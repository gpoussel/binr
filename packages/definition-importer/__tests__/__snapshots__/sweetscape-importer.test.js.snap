// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Sweetscape Importer creates 010 definition 1`] = `
Array [
  Object {
    "arguments": Array [
      Object {
        "type": "number",
        "value": 9,
      },
    ],
    "name": Object {
      "name": "RequiresVersion",
      "type": "identifier",
    },
    "type": "functionCallExpression",
  },
  Object {
    "arguments": Array [
      Object {
        "type": "boolean",
        "value": true,
      },
    ],
    "name": Object {
      "name": "HighlightAllowInstanceSharing",
      "type": "identifier",
    },
    "type": "functionCallExpression",
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [],
        "initializer": Object {
          "arguments": Array [
            Object {
              "string": "code-comment",
              "type": "string",
            },
          ],
          "name": Object {
            "name": "HighlightFindStyle",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        "name": "commentStyle",
      },
    ],
    "local": true,
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "int",
    },
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [],
        "initializer": Object {
          "arguments": Array [
            Object {
              "string": "code-keyword",
              "type": "string",
            },
          ],
          "name": Object {
            "name": "HighlightFindStyle",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        "name": "keywordStyle",
      },
    ],
    "local": true,
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "int",
    },
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [],
        "initializer": Object {
          "arguments": Array [
            Object {
              "string": "code-data-type",
              "type": "string",
            },
          ],
          "name": Object {
            "name": "HighlightFindStyle",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        "name": "dataTypeStyle",
      },
    ],
    "local": true,
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "int",
    },
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [],
        "initializer": Object {
          "arguments": Array [
            Object {
              "string": "code-string",
              "type": "string",
            },
          ],
          "name": Object {
            "name": "HighlightFindStyle",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        "name": "stringStyle",
      },
    ],
    "local": true,
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "int",
    },
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [],
        "initializer": Object {
          "arguments": Array [
            Object {
              "string": "calculator-result",
              "type": "string",
            },
          ],
          "name": Object {
            "name": "HighlightFindStyle",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        "name": "calculatorStyle",
      },
    ],
    "local": true,
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "int",
    },
  },
  Object {
    "annotations": Array [],
    "const": true,
    "declarations": Array [
      Object {
        "annotations": Array [],
        "initializer": Object {
          "type": "number",
          "value": 0,
        },
        "name": "RULE_NONE",
      },
    ],
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "int",
    },
  },
  Object {
    "annotations": Array [],
    "const": true,
    "declarations": Array [
      Object {
        "annotations": Array [],
        "initializer": Object {
          "type": "number",
          "value": 1,
        },
        "name": "RULE_MULTILINE_COMMENT",
      },
    ],
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "int",
    },
  },
  Object {
    "annotations": Array [],
    "const": true,
    "declarations": Array [
      Object {
        "annotations": Array [],
        "initializer": Object {
          "type": "number",
          "value": 2,
        },
        "name": "RULE_STRING",
      },
    ],
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "int",
    },
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [],
        "initializer": Object {
          "arguments": Array [
            Object {
              "name": "HIGHLIGHT_WHOLEWORD",
              "type": "identifier",
            },
            Object {
              "string": "#define",
              "type": "string",
            },
            Object {
              "string": "#else",
              "type": "string",
            },
            Object {
              "string": "#endif",
              "type": "string",
            },
            Object {
              "string": "#error",
              "type": "string",
            },
            Object {
              "string": "#ifdef",
              "type": "string",
            },
            Object {
              "string": "#ifndef",
              "type": "string",
            },
            Object {
              "string": "#include",
              "type": "string",
            },
            Object {
              "string": "#undef",
              "type": "string",
            },
            Object {
              "string": "#warning",
              "type": "string",
            },
            Object {
              "string": "FALSE",
              "type": "string",
            },
            Object {
              "string": "TRUE",
              "type": "string",
            },
            Object {
              "string": "break",
              "type": "string",
            },
            Object {
              "string": "case",
              "type": "string",
            },
            Object {
              "string": "continue",
              "type": "string",
            },
            Object {
              "string": "default",
              "type": "string",
            },
            Object {
              "string": "do",
              "type": "string",
            },
            Object {
              "string": "else",
              "type": "string",
            },
            Object {
              "string": "exists",
              "type": "string",
            },
            Object {
              "string": "false",
              "type": "string",
            },
            Object {
              "string": "for",
              "type": "string",
            },
            Object {
              "string": "function_exists",
              "type": "string",
            },
            Object {
              "string": "if",
              "type": "string",
            },
            Object {
              "string": "parentof",
              "type": "string",
            },
            Object {
              "string": "return",
              "type": "string",
            },
            Object {
              "string": "sizeof",
              "type": "string",
            },
            Object {
              "string": "startof",
              "type": "string",
            },
            Object {
              "string": "switch",
              "type": "string",
            },
            Object {
              "string": "this",
              "type": "string",
            },
            Object {
              "string": "true",
              "type": "string",
            },
            Object {
              "string": "typedef",
              "type": "string",
            },
            Object {
              "string": "while",
              "type": "string",
            },
            Object {
              "string": "#link",
              "type": "string",
            },
            Object {
              "string": "#endlink",
              "type": "string",
            },
          ],
          "name": Object {
            "name": "HighlightBuildKeywordList",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        "name": "keywordList",
      },
    ],
    "local": true,
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "TKeywordList",
    },
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [],
        "initializer": Object {
          "arguments": Array [
            Object {
              "name": "HIGHLIGHT_WHOLEWORD",
              "type": "identifier",
            },
            Object {
              "string": "BYTE",
              "type": "string",
            },
            Object {
              "string": "CHAR",
              "type": "string",
            },
            Object {
              "string": "DOSDATE",
              "type": "string",
            },
            Object {
              "string": "DOSTIME",
              "type": "string",
            },
            Object {
              "string": "DOUBLE",
              "type": "string",
            },
            Object {
              "string": "DWORD",
              "type": "string",
            },
            Object {
              "string": "FILETIME",
              "type": "string",
            },
            Object {
              "string": "FLOAT",
              "type": "string",
            },
            Object {
              "string": "HFLOAT",
              "type": "string",
            },
            Object {
              "string": "INT",
              "type": "string",
            },
            Object {
              "string": "INT16",
              "type": "string",
            },
            Object {
              "string": "INT32",
              "type": "string",
            },
            Object {
              "string": "INT64",
              "type": "string",
            },
            Object {
              "string": "LONG",
              "type": "string",
            },
            Object {
              "string": "OLETIME",
              "type": "string",
            },
            Object {
              "string": "QUAD",
              "type": "string",
            },
            Object {
              "string": "QWORD",
              "type": "string",
            },
            Object {
              "string": "SHORT",
              "type": "string",
            },
            Object {
              "string": "UBYTE",
              "type": "string",
            },
            Object {
              "string": "UCHAR",
              "type": "string",
            },
            Object {
              "string": "UINT",
              "type": "string",
            },
            Object {
              "string": "UINT16",
              "type": "string",
            },
            Object {
              "string": "UINT32",
              "type": "string",
            },
            Object {
              "string": "UINT64",
              "type": "string",
            },
            Object {
              "string": "ULONG",
              "type": "string",
            },
            Object {
              "string": "UQUAD",
              "type": "string",
            },
            Object {
              "string": "USHORT",
              "type": "string",
            },
            Object {
              "string": "WORD",
              "type": "string",
            },
            Object {
              "string": "__int64",
              "type": "string",
            },
            Object {
              "string": "__uint64",
              "type": "string",
            },
            Object {
              "string": "byte",
              "type": "string",
            },
            Object {
              "string": "char",
              "type": "string",
            },
            Object {
              "string": "const",
              "type": "string",
            },
            Object {
              "string": "double",
              "type": "string",
            },
            Object {
              "string": "enum",
              "type": "string",
            },
            Object {
              "string": "float",
              "type": "string",
            },
            Object {
              "string": "hfloat",
              "type": "string",
            },
            Object {
              "string": "int",
              "type": "string",
            },
            Object {
              "string": "int16",
              "type": "string",
            },
            Object {
              "string": "int32",
              "type": "string",
            },
            Object {
              "string": "int64",
              "type": "string",
            },
            Object {
              "string": "local",
              "type": "string",
            },
            Object {
              "string": "long",
              "type": "string",
            },
            Object {
              "string": "quad",
              "type": "string",
            },
            Object {
              "string": "short",
              "type": "string",
            },
            Object {
              "string": "signed",
              "type": "string",
            },
            Object {
              "string": "string",
              "type": "string",
            },
            Object {
              "string": "struct",
              "type": "string",
            },
            Object {
              "string": "time64_t",
              "type": "string",
            },
            Object {
              "string": "time_t",
              "type": "string",
            },
            Object {
              "string": "ubyte",
              "type": "string",
            },
            Object {
              "string": "uchar",
              "type": "string",
            },
            Object {
              "string": "uint",
              "type": "string",
            },
            Object {
              "string": "uint16",
              "type": "string",
            },
            Object {
              "string": "uint32",
              "type": "string",
            },
            Object {
              "string": "uint64",
              "type": "string",
            },
            Object {
              "string": "ulong",
              "type": "string",
            },
            Object {
              "string": "union",
              "type": "string",
            },
            Object {
              "string": "unsigned",
              "type": "string",
            },
            Object {
              "string": "uquad",
              "type": "string",
            },
            Object {
              "string": "ushort",
              "type": "string",
            },
            Object {
              "string": "void",
              "type": "string",
            },
            Object {
              "string": "wchar_t",
              "type": "string",
            },
            Object {
              "string": "wstring",
              "type": "string",
            },
          ],
          "name": Object {
            "name": "HighlightBuildKeywordList",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        "name": "dataTypeList",
      },
    ],
    "local": true,
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "TKeywordList",
    },
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "i",
            },
            Object {
              "annotations": Array [],
              "name": "len",
            },
            Object {
              "annotations": Array [],
              "name": "pos",
            },
            Object {
              "annotations": Array [],
              "initializer": Object {
                "name": "flags",
                "type": "identifier",
              },
              "name": "rule",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "body": Object {
            "statements": Array [
              Object {
                "condition": Object {
                  "left": Object {
                    "left": Object {
                      "left": Object {
                        "expression": Object {
                          "name": "text",
                          "type": "identifier",
                        },
                        "index": Object {
                          "name": "i",
                          "type": "identifier",
                        },
                        "type": "arrayIndexExpression",
                      },
                      "operator": "==",
                      "right": Object {
                        "string": "/",
                        "type": "string",
                      },
                      "type": "binaryExpression",
                    },
                    "operator": "||",
                    "right": Object {
                      "left": Object {
                        "name": "rule",
                        "type": "identifier",
                      },
                      "operator": "==",
                      "right": Object {
                        "name": "RULE_MULTILINE_COMMENT",
                        "type": "identifier",
                      },
                      "type": "binaryExpression",
                    },
                    "type": "binaryExpression",
                  },
                  "operator": "&&",
                  "right": Object {
                    "arguments": Array [
                      Object {
                        "name": "text",
                        "type": "identifier",
                      },
                      Object {
                        "name": "count",
                        "type": "identifier",
                      },
                      Object {
                        "string": "/*",
                        "type": "string",
                      },
                      Object {
                        "string": "*/",
                        "type": "string",
                      },
                      Object {
                        "name": "i",
                        "type": "identifier",
                      },
                      Object {
                        "name": "rule",
                        "type": "identifier",
                      },
                      Object {
                        "name": "RULE_NONE",
                        "type": "identifier",
                      },
                      Object {
                        "name": "RULE_MULTILINE_COMMENT",
                        "type": "identifier",
                      },
                      Object {
                        "name": "foreColors",
                        "type": "identifier",
                      },
                      Object {
                        "name": "backColors",
                        "type": "identifier",
                      },
                      Object {
                        "name": "commentStyle",
                        "type": "identifier",
                      },
                    ],
                    "name": Object {
                      "name": "HighlightCheckMultiLineRule",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  "type": "binaryExpression",
                },
                "trueStatement": Object {
                  "name": "continue",
                  "type": "identifier",
                },
                "type": "ifStatement",
              },
              Object {
                "condition": Object {
                  "left": Object {
                    "left": Object {
                      "left": Object {
                        "expression": Object {
                          "name": "text",
                          "type": "identifier",
                        },
                        "index": Object {
                          "name": "i",
                          "type": "identifier",
                        },
                        "type": "arrayIndexExpression",
                      },
                      "operator": "==",
                      "right": Object {
                        "string": "\\\\\\"",
                        "type": "string",
                      },
                      "type": "binaryExpression",
                    },
                    "operator": "||",
                    "right": Object {
                      "left": Object {
                        "name": "rule",
                        "type": "identifier",
                      },
                      "operator": "==",
                      "right": Object {
                        "name": "RULE_STRING",
                        "type": "identifier",
                      },
                      "type": "binaryExpression",
                    },
                    "type": "binaryExpression",
                  },
                  "operator": "&&",
                  "right": Object {
                    "arguments": Array [
                      Object {
                        "name": "text",
                        "type": "identifier",
                      },
                      Object {
                        "name": "count",
                        "type": "identifier",
                      },
                      Object {
                        "string": "\\\\\\"",
                        "type": "string",
                      },
                      Object {
                        "string": "\\\\\\"",
                        "type": "string",
                      },
                      Object {
                        "name": "i",
                        "type": "identifier",
                      },
                      Object {
                        "name": "rule",
                        "type": "identifier",
                      },
                      Object {
                        "name": "RULE_NONE",
                        "type": "identifier",
                      },
                      Object {
                        "name": "RULE_STRING",
                        "type": "identifier",
                      },
                      Object {
                        "name": "foreColors",
                        "type": "identifier",
                      },
                      Object {
                        "name": "backColors",
                        "type": "identifier",
                      },
                      Object {
                        "name": "stringStyle",
                        "type": "identifier",
                      },
                      Object {
                        "name": "HIGHLIGHT_CSTRING",
                        "type": "identifier",
                      },
                    ],
                    "name": Object {
                      "name": "HighlightCheckMultiLineRule",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  "type": "binaryExpression",
                },
                "trueStatement": Object {
                  "name": "continue",
                  "type": "identifier",
                },
                "type": "ifStatement",
              },
              Object {
                "condition": Object {
                  "left": Object {
                    "left": Object {
                      "expression": Object {
                        "name": "text",
                        "type": "identifier",
                      },
                      "index": Object {
                        "name": "i",
                        "type": "identifier",
                      },
                      "type": "arrayIndexExpression",
                    },
                    "operator": "==",
                    "right": Object {
                      "string": "/",
                      "type": "string",
                    },
                    "type": "binaryExpression",
                  },
                  "operator": "&&",
                  "right": Object {
                    "arguments": Array [
                      Object {
                        "name": "text",
                        "type": "identifier",
                      },
                      Object {
                        "name": "count",
                        "type": "identifier",
                      },
                      Object {
                        "string": "//",
                        "type": "string",
                      },
                      Object {
                        "name": "i",
                        "type": "identifier",
                      },
                      Object {
                        "name": "foreColors",
                        "type": "identifier",
                      },
                      Object {
                        "name": "backColors",
                        "type": "identifier",
                      },
                      Object {
                        "name": "commentStyle",
                        "type": "identifier",
                      },
                    ],
                    "name": Object {
                      "name": "HighlightCheckCommentRule",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  "type": "binaryExpression",
                },
                "trueStatement": Object {
                  "name": "continue",
                  "type": "identifier",
                },
                "type": "ifStatement",
              },
              Object {
                "condition": Object {
                  "left": Object {
                    "left": Object {
                      "expression": Object {
                        "name": "text",
                        "type": "identifier",
                      },
                      "index": Object {
                        "name": "i",
                        "type": "identifier",
                      },
                      "type": "arrayIndexExpression",
                    },
                    "operator": "==",
                    "right": Object {
                      "string": "<",
                      "type": "string",
                    },
                    "type": "binaryExpression",
                  },
                  "operator": "&&",
                  "right": Object {
                    "arguments": Array [
                      Object {
                        "name": "text",
                        "type": "identifier",
                      },
                      Object {
                        "name": "count",
                        "type": "identifier",
                      },
                      Object {
                        "string": "<<<",
                        "type": "string",
                      },
                      Object {
                        "name": "i",
                        "type": "identifier",
                      },
                      Object {
                        "name": "foreColors",
                        "type": "identifier",
                      },
                      Object {
                        "name": "backColors",
                        "type": "identifier",
                      },
                      Object {
                        "name": "calculatorStyle",
                        "type": "identifier",
                      },
                    ],
                    "name": Object {
                      "name": "HighlightCheckCommentRule",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  "type": "binaryExpression",
                },
                "trueStatement": Object {
                  "name": "continue",
                  "type": "identifier",
                },
                "type": "ifStatement",
              },
              Object {
                "condition": Object {
                  "left": Object {
                    "left": Object {
                      "expression": Object {
                        "name": "text",
                        "type": "identifier",
                      },
                      "index": Object {
                        "name": "i",
                        "type": "identifier",
                      },
                      "type": "arrayIndexExpression",
                    },
                    "operator": "==",
                    "right": Object {
                      "string": "'",
                      "type": "string",
                    },
                    "type": "binaryExpression",
                  },
                  "operator": "&&",
                  "right": Object {
                    "arguments": Array [
                      Object {
                        "name": "text",
                        "type": "identifier",
                      },
                      Object {
                        "name": "count",
                        "type": "identifier",
                      },
                      Object {
                        "string": "\\\\'",
                        "type": "string",
                      },
                      Object {
                        "string": "\\\\'",
                        "type": "string",
                      },
                      Object {
                        "name": "i",
                        "type": "identifier",
                      },
                      Object {
                        "name": "foreColors",
                        "type": "identifier",
                      },
                      Object {
                        "name": "backColors",
                        "type": "identifier",
                      },
                      Object {
                        "name": "stringStyle",
                        "type": "identifier",
                      },
                      Object {
                        "name": "HIGHLIGHT_CSTRING",
                        "type": "identifier",
                      },
                    ],
                    "name": Object {
                      "name": "HighlightCheckSingleLineRule",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  "type": "binaryExpression",
                },
                "trueStatement": Object {
                  "name": "continue",
                  "type": "identifier",
                },
                "type": "ifStatement",
              },
              Object {
                "condition": Object {
                  "arguments": Array [
                    Object {
                      "name": "text",
                      "type": "identifier",
                    },
                    Object {
                      "name": "count",
                      "type": "identifier",
                    },
                    Object {
                      "name": "keywordList",
                      "type": "identifier",
                    },
                    Object {
                      "name": "i",
                      "type": "identifier",
                    },
                    Object {
                      "name": "foreColors",
                      "type": "identifier",
                    },
                    Object {
                      "name": "backColors",
                      "type": "identifier",
                    },
                    Object {
                      "name": "keywordStyle",
                      "type": "identifier",
                    },
                  ],
                  "name": Object {
                    "name": "HighlightCheckKeywordRule",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "trueStatement": Object {
                  "name": "continue",
                  "type": "identifier",
                },
                "type": "ifStatement",
              },
              Object {
                "condition": Object {
                  "arguments": Array [
                    Object {
                      "name": "text",
                      "type": "identifier",
                    },
                    Object {
                      "name": "count",
                      "type": "identifier",
                    },
                    Object {
                      "name": "dataTypeList",
                      "type": "identifier",
                    },
                    Object {
                      "name": "i",
                      "type": "identifier",
                    },
                    Object {
                      "name": "foreColors",
                      "type": "identifier",
                    },
                    Object {
                      "name": "backColors",
                      "type": "identifier",
                    },
                    Object {
                      "name": "dataTypeStyle",
                      "type": "identifier",
                    },
                  ],
                  "name": Object {
                    "name": "HighlightCheckKeywordRule",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "trueStatement": Object {
                  "name": "continue",
                  "type": "identifier",
                },
                "type": "ifStatement",
              },
              Object {
                "left": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "arguments": Array [
                    Object {
                      "name": "text",
                      "type": "identifier",
                    },
                    Object {
                      "name": "count",
                      "type": "identifier",
                    },
                    Object {
                      "name": "i",
                      "type": "identifier",
                    },
                  ],
                  "name": Object {
                    "name": "HighlightGetNextToken",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "type": "binaryExpression",
              },
            ],
            "type": "statementList",
          },
          "condition": Object {
            "left": Object {
              "name": "i",
              "type": "identifier",
            },
            "operator": "<",
            "right": Object {
              "name": "count",
              "type": "identifier",
            },
            "type": "binaryExpression",
          },
          "type": "whileStatement",
        },
        Object {
          "left": Object {
            "name": "flags",
            "type": "identifier",
          },
          "operator": "=",
          "right": Object {
            "name": "rule",
            "type": "identifier",
          },
          "type": "binaryExpression",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "HighlightLineRealtime",
    "parameters": Array [
      Object {
        "name": "line",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "int64",
        },
      },
      Object {
        "name": "text",
        "reference": false,
        "type": Object {
          "array": true,
          "name": "wchar_t",
        },
      },
      Object {
        "name": "foreColors",
        "reference": false,
        "type": Object {
          "array": true,
          "name": "int",
        },
      },
      Object {
        "name": "backColors",
        "reference": false,
        "type": Object {
          "array": true,
          "name": "int",
        },
      },
      Object {
        "name": "count",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "int",
        },
      },
      Object {
        "name": "flags",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "ushort",
        },
      },
    ],
    "returnType": Object {
      "name": "void",
    },
    "type": "functionDeclaration",
  },
]
`;

exports[`Sweetscape Importer creates CAP definition 1`] = `
Array [
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [],
        "arraySelector": Object {
          "type": "number",
          "value": 256,
        },
        "name": "method_offsets",
      },
    ],
    "local": true,
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "ushort",
    },
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [],
        "arraySelector": Object {
          "type": "number",
          "value": 256,
        },
        "name": "method_codesize",
      },
    ],
    "local": true,
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "ushort",
    },
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [],
        "initializer": Object {
          "type": "number",
          "value": 0,
        },
        "name": "tail_index",
      },
    ],
    "local": true,
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "uint64",
    },
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [],
        "initializer": Object {
          "type": "number",
          "value": 0,
        },
        "name": "head_index",
      },
    ],
    "local": true,
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "uint64",
    },
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "left": Object {
            "expression": Object {
              "name": "method_offsets",
              "type": "identifier",
            },
            "index": Object {
              "name": "tail_index",
              "type": "identifier",
            },
            "type": "arrayIndexExpression",
          },
          "operator": "=",
          "right": Object {
            "name": "offset",
            "type": "identifier",
          },
          "type": "binaryExpression",
        },
        Object {
          "left": Object {
            "expression": Object {
              "name": "method_codesize",
              "type": "identifier",
            },
            "index": Object {
              "name": "tail_index",
              "type": "identifier",
            },
            "type": "arrayIndexExpression",
          },
          "operator": "=",
          "right": Object {
            "name": "codesize",
            "type": "identifier",
          },
          "type": "binaryExpression",
        },
        Object {
          "expression": Object {
            "name": "tail_index",
            "type": "identifier",
          },
          "operator": "++",
          "type": "postfixExpression",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "queue_push_method",
    "parameters": Array [
      Object {
        "name": "offset",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "ushort",
        },
      },
      Object {
        "name": "codesize",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "ushort",
        },
      },
    ],
    "returnType": Object {
      "name": "void",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "condition": Object {
            "left": Object {
              "name": "head_index",
              "type": "identifier",
            },
            "operator": "!=",
            "right": Object {
              "name": "tail_index",
              "type": "identifier",
            },
            "type": "binaryExpression",
          },
          "falseStatement": Object {
            "statements": Array [
              Object {
                "assignmentExpression": Object {
                  "type": "number",
                  "value": 0,
                },
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "expression": Object {
                  "name": "head_index",
                  "type": "identifier",
                },
                "operator": "++",
                "type": "postfixExpression",
              },
              Object {
                "assignmentExpression": Object {
                  "type": "number",
                  "value": 1,
                },
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "queue_pop_method",
    "parameters": Array [],
    "returnType": Object {
      "array": false,
      "name": "uint",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "condition": Object {
            "left": Object {
              "name": "head_index",
              "type": "identifier",
            },
            "operator": "!=",
            "right": Object {
              "name": "tail_index",
              "type": "identifier",
            },
            "type": "binaryExpression",
          },
          "falseStatement": Object {
            "statements": Array [
              Object {
                "assignmentExpression": Object {
                  "type": "number",
                  "value": 0,
                },
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "assignmentExpression": Object {
                  "type": "number",
                  "value": 1,
                },
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "queue_peek_method",
    "parameters": Array [],
    "returnType": Object {
      "array": false,
      "name": "uint",
    },
    "type": "functionDeclaration",
  },
  Object {
    "baseType": Object {
      "array": false,
      "name": "short",
    },
    "declarations": Array [
      Object {
        "name": "COMP_STORED",
        "value": Object {
          "type": "number",
          "value": 0,
        },
      },
      Object {
        "name": "COMP_SHRUNK",
        "value": Object {
          "type": "number",
          "value": 1,
        },
      },
      Object {
        "name": "COMP_REDUCED1",
        "value": Object {
          "type": "number",
          "value": 2,
        },
      },
      Object {
        "name": "COMP_REDUCED2",
        "value": Object {
          "type": "number",
          "value": 3,
        },
      },
      Object {
        "name": "COMP_REDUCED3",
        "value": Object {
          "type": "number",
          "value": 4,
        },
      },
      Object {
        "name": "COMP_REDUCED4",
        "value": Object {
          "type": "number",
          "value": 5,
        },
      },
      Object {
        "name": "COMP_IMPLODED",
        "value": Object {
          "type": "number",
          "value": 6,
        },
      },
      Object {
        "name": "COMP_TOKEN",
        "value": Object {
          "type": "number",
          "value": 7,
        },
      },
      Object {
        "name": "COMP_DEFLATE",
        "value": Object {
          "type": "number",
          "value": 8,
        },
      },
      Object {
        "name": "COMP_DEFLATE64",
        "value": Object {
          "type": "number",
          "value": 9,
        },
      },
    ],
    "type": "enumDeclaration",
  },
  Object {
    "baseType": Object {
      "array": false,
      "name": "uchar",
    },
    "declarations": Array [
      Object {
        "name": "aaload",
        "value": Object {
          "type": "number",
          "value": 36,
        },
      },
      Object {
        "name": "aastore",
        "value": Object {
          "type": "number",
          "value": 55,
        },
      },
      Object {
        "name": "aconst_null",
        "value": Object {
          "type": "number",
          "value": 1,
        },
      },
      Object {
        "name": "aload",
        "value": Object {
          "type": "number",
          "value": 21,
        },
      },
      Object {
        "name": "aload_0",
        "value": Object {
          "type": "number",
          "value": 24,
        },
      },
      Object {
        "name": "aload_1",
        "value": Object {
          "type": "number",
          "value": 25,
        },
      },
      Object {
        "name": "aload_2",
        "value": Object {
          "type": "number",
          "value": 26,
        },
      },
      Object {
        "name": "aload_3",
        "value": Object {
          "type": "number",
          "value": 27,
        },
      },
      Object {
        "name": "anewarray",
        "value": Object {
          "type": "number",
          "value": 145,
        },
      },
      Object {
        "name": "areturn",
        "value": Object {
          "type": "number",
          "value": 119,
        },
      },
      Object {
        "name": "arraylength",
        "value": Object {
          "type": "number",
          "value": 146,
        },
      },
      Object {
        "name": "astore",
        "value": Object {
          "type": "number",
          "value": 40,
        },
      },
      Object {
        "name": "astore_0",
        "value": Object {
          "type": "number",
          "value": 43,
        },
      },
      Object {
        "name": "astore_1",
        "value": Object {
          "type": "number",
          "value": 44,
        },
      },
      Object {
        "name": "astore_2",
        "value": Object {
          "type": "number",
          "value": 45,
        },
      },
      Object {
        "name": "astore_3",
        "value": Object {
          "type": "number",
          "value": 46,
        },
      },
      Object {
        "name": "athrow",
        "value": Object {
          "type": "number",
          "value": 147,
        },
      },
      Object {
        "name": "baload",
        "value": Object {
          "type": "number",
          "value": 37,
        },
      },
      Object {
        "name": "bastore",
        "value": Object {
          "type": "number",
          "value": 56,
        },
      },
      Object {
        "name": "bipush",
        "value": Object {
          "type": "number",
          "value": 18,
        },
      },
      Object {
        "name": "bspush",
        "value": Object {
          "type": "number",
          "value": 16,
        },
      },
      Object {
        "name": "checkcast",
        "value": Object {
          "type": "number",
          "value": 148,
        },
      },
      Object {
        "name": "dup",
        "value": Object {
          "type": "number",
          "value": 61,
        },
      },
      Object {
        "name": "dup_x",
        "value": Object {
          "type": "number",
          "value": 63,
        },
      },
      Object {
        "name": "dup2",
        "value": Object {
          "type": "number",
          "value": 62,
        },
      },
      Object {
        "name": "getfield_a",
        "value": Object {
          "type": "number",
          "value": 131,
        },
      },
      Object {
        "name": "getfield_b",
        "value": Object {
          "type": "number",
          "value": 132,
        },
      },
      Object {
        "name": "getfield_s",
        "value": Object {
          "type": "number",
          "value": 133,
        },
      },
      Object {
        "name": "getfield_i",
        "value": Object {
          "type": "number",
          "value": 134,
        },
      },
      Object {
        "name": "getfield_a_this",
        "value": Object {
          "type": "number",
          "value": 173,
        },
      },
      Object {
        "name": "getfield_b_this",
        "value": Object {
          "type": "number",
          "value": 174,
        },
      },
      Object {
        "name": "getfield_s_this",
        "value": Object {
          "type": "number",
          "value": 175,
        },
      },
      Object {
        "name": "getfield_i_this",
        "value": Object {
          "type": "number",
          "value": 176,
        },
      },
      Object {
        "name": "getfield_a_w",
        "value": Object {
          "type": "number",
          "value": 169,
        },
      },
      Object {
        "name": "getfield_b_w",
        "value": Object {
          "type": "number",
          "value": 170,
        },
      },
      Object {
        "name": "getfield_s_w",
        "value": Object {
          "type": "number",
          "value": 171,
        },
      },
      Object {
        "name": "getfield_i_w",
        "value": Object {
          "type": "number",
          "value": 172,
        },
      },
      Object {
        "name": "getstatic_a",
        "value": Object {
          "type": "number",
          "value": 123,
        },
      },
      Object {
        "name": "getstatic_b",
        "value": Object {
          "type": "number",
          "value": 124,
        },
      },
      Object {
        "name": "getstatic_s",
        "value": Object {
          "type": "number",
          "value": 125,
        },
      },
      Object {
        "name": "getstatic_i",
        "value": Object {
          "type": "number",
          "value": 126,
        },
      },
      Object {
        "name": "goto",
        "value": Object {
          "type": "number",
          "value": 112,
        },
      },
      Object {
        "name": "goto_w",
        "value": Object {
          "type": "number",
          "value": 168,
        },
      },
      Object {
        "name": "i2b",
        "value": Object {
          "type": "number",
          "value": 93,
        },
      },
      Object {
        "name": "i2s",
        "value": Object {
          "type": "number",
          "value": 94,
        },
      },
      Object {
        "name": "iadd",
        "value": Object {
          "type": "number",
          "value": 66,
        },
      },
      Object {
        "name": "iaload",
        "value": Object {
          "type": "number",
          "value": 39,
        },
      },
      Object {
        "name": "iand",
        "value": Object {
          "type": "number",
          "value": 84,
        },
      },
      Object {
        "name": "iastore",
        "value": Object {
          "type": "number",
          "value": 58,
        },
      },
      Object {
        "name": "icmp",
        "value": Object {
          "type": "number",
          "value": 95,
        },
      },
      Object {
        "name": "iconst_m1",
        "value": Object {
          "type": "number",
          "value": 9,
        },
      },
      Object {
        "name": "iconst_0",
        "value": Object {
          "type": "number",
          "value": 10,
        },
      },
      Object {
        "name": "iconst_1",
        "value": Object {
          "type": "number",
          "value": 11,
        },
      },
      Object {
        "name": "iconst_2",
        "value": Object {
          "type": "number",
          "value": 12,
        },
      },
      Object {
        "name": "iconst_3",
        "value": Object {
          "type": "number",
          "value": 13,
        },
      },
      Object {
        "name": "iconst_4",
        "value": Object {
          "type": "number",
          "value": 14,
        },
      },
      Object {
        "name": "iconst_5",
        "value": Object {
          "type": "number",
          "value": 15,
        },
      },
      Object {
        "name": "idiv",
        "value": Object {
          "type": "number",
          "value": 72,
        },
      },
      Object {
        "name": "if_acmpeq",
        "value": Object {
          "type": "number",
          "value": 104,
        },
      },
      Object {
        "name": "if_acmpne",
        "value": Object {
          "type": "number",
          "value": 105,
        },
      },
      Object {
        "name": "if_acmpeq_w",
        "value": Object {
          "type": "number",
          "value": 160,
        },
      },
      Object {
        "name": "if_acmpne_w",
        "value": Object {
          "type": "number",
          "value": 161,
        },
      },
      Object {
        "name": "if_scmpeq",
        "value": Object {
          "type": "number",
          "value": 106,
        },
      },
      Object {
        "name": "if_scmpne",
        "value": Object {
          "type": "number",
          "value": 107,
        },
      },
      Object {
        "name": "if_scmplt",
        "value": Object {
          "type": "number",
          "value": 108,
        },
      },
      Object {
        "name": "if_scmpge",
        "value": Object {
          "type": "number",
          "value": 109,
        },
      },
      Object {
        "name": "if_scmpgt",
        "value": Object {
          "type": "number",
          "value": 110,
        },
      },
      Object {
        "name": "if_scmple",
        "value": Object {
          "type": "number",
          "value": 111,
        },
      },
      Object {
        "name": "if_scmpeq_w",
        "value": Object {
          "type": "number",
          "value": 162,
        },
      },
      Object {
        "name": "if_scmpne_w",
        "value": Object {
          "type": "number",
          "value": 163,
        },
      },
      Object {
        "name": "if_scmplt_w",
        "value": Object {
          "type": "number",
          "value": 164,
        },
      },
      Object {
        "name": "if_scmpge_w",
        "value": Object {
          "type": "number",
          "value": 165,
        },
      },
      Object {
        "name": "if_scmpgt_w",
        "value": Object {
          "type": "number",
          "value": 166,
        },
      },
      Object {
        "name": "if_scmple_w",
        "value": Object {
          "type": "number",
          "value": 167,
        },
      },
      Object {
        "name": "ifeq",
        "value": Object {
          "type": "number",
          "value": 96,
        },
      },
      Object {
        "name": "ifne",
        "value": Object {
          "type": "number",
          "value": 97,
        },
      },
      Object {
        "name": "iflt",
        "value": Object {
          "type": "number",
          "value": 98,
        },
      },
      Object {
        "name": "ifge",
        "value": Object {
          "type": "number",
          "value": 99,
        },
      },
      Object {
        "name": "ifgt",
        "value": Object {
          "type": "number",
          "value": 100,
        },
      },
      Object {
        "name": "ifle",
        "value": Object {
          "type": "number",
          "value": 101,
        },
      },
      Object {
        "name": "ifeq_w",
        "value": Object {
          "type": "number",
          "value": 152,
        },
      },
      Object {
        "name": "ifne_w",
        "value": Object {
          "type": "number",
          "value": 153,
        },
      },
      Object {
        "name": "iflt_w",
        "value": Object {
          "type": "number",
          "value": 154,
        },
      },
      Object {
        "name": "ifge_w",
        "value": Object {
          "type": "number",
          "value": 155,
        },
      },
      Object {
        "name": "ifgt_w",
        "value": Object {
          "type": "number",
          "value": 156,
        },
      },
      Object {
        "name": "ifle_w",
        "value": Object {
          "type": "number",
          "value": 157,
        },
      },
      Object {
        "name": "ifnonnull",
        "value": Object {
          "type": "number",
          "value": 103,
        },
      },
      Object {
        "name": "ifnonnull_w",
        "value": Object {
          "type": "number",
          "value": 159,
        },
      },
      Object {
        "name": "ifnull",
        "value": Object {
          "type": "number",
          "value": 102,
        },
      },
      Object {
        "name": "ifnull_w",
        "value": Object {
          "type": "number",
          "value": 158,
        },
      },
      Object {
        "name": "iinc",
        "value": Object {
          "type": "number",
          "value": 90,
        },
      },
      Object {
        "name": "iinc_w",
        "value": Object {
          "type": "number",
          "value": 151,
        },
      },
      Object {
        "name": "iipush",
        "value": Object {
          "type": "number",
          "value": 20,
        },
      },
      Object {
        "name": "iload",
        "value": Object {
          "type": "number",
          "value": 23,
        },
      },
      Object {
        "name": "iload_0",
        "value": Object {
          "type": "number",
          "value": 32,
        },
      },
      Object {
        "name": "iload_1",
        "value": Object {
          "type": "number",
          "value": 33,
        },
      },
      Object {
        "name": "iload_2",
        "value": Object {
          "type": "number",
          "value": 34,
        },
      },
      Object {
        "name": "iload_3",
        "value": Object {
          "type": "number",
          "value": 35,
        },
      },
      Object {
        "name": "ilookupswitch",
        "value": Object {
          "type": "number",
          "value": 118,
        },
      },
      Object {
        "name": "imul",
        "value": Object {
          "type": "number",
          "value": 70,
        },
      },
      Object {
        "name": "ineg",
        "value": Object {
          "type": "number",
          "value": 76,
        },
      },
      Object {
        "name": "instanceof",
        "value": Object {
          "type": "number",
          "value": 149,
        },
      },
      Object {
        "name": "invokeinterface",
        "value": Object {
          "type": "number",
          "value": 142,
        },
      },
      Object {
        "name": "invokespecial",
        "value": Object {
          "type": "number",
          "value": 140,
        },
      },
      Object {
        "name": "invokestatic",
        "value": Object {
          "type": "number",
          "value": 141,
        },
      },
      Object {
        "name": "invokevirtual",
        "value": Object {
          "type": "number",
          "value": 139,
        },
      },
      Object {
        "name": "ior",
        "value": Object {
          "type": "number",
          "value": 86,
        },
      },
      Object {
        "name": "irem",
        "value": Object {
          "type": "number",
          "value": 74,
        },
      },
      Object {
        "name": "ireturn",
        "value": Object {
          "type": "number",
          "value": 121,
        },
      },
      Object {
        "name": "ishl",
        "value": Object {
          "type": "number",
          "value": 78,
        },
      },
      Object {
        "name": "ishr",
        "value": Object {
          "type": "number",
          "value": 80,
        },
      },
      Object {
        "name": "istore",
        "value": Object {
          "type": "number",
          "value": 42,
        },
      },
      Object {
        "name": "istore_0",
        "value": Object {
          "type": "number",
          "value": 51,
        },
      },
      Object {
        "name": "istore_1",
        "value": Object {
          "type": "number",
          "value": 52,
        },
      },
      Object {
        "name": "istore_2",
        "value": Object {
          "type": "number",
          "value": 53,
        },
      },
      Object {
        "name": "istore_3",
        "value": Object {
          "type": "number",
          "value": 54,
        },
      },
      Object {
        "name": "isub",
        "value": Object {
          "type": "number",
          "value": 68,
        },
      },
      Object {
        "name": "itableswitch",
        "value": Object {
          "type": "number",
          "value": 116,
        },
      },
      Object {
        "name": "iushr",
        "value": Object {
          "type": "number",
          "value": 82,
        },
      },
      Object {
        "name": "ixor",
        "value": Object {
          "type": "number",
          "value": 88,
        },
      },
      Object {
        "name": "jsr",
        "value": Object {
          "type": "number",
          "value": 113,
        },
      },
      Object {
        "name": "new",
        "value": Object {
          "type": "number",
          "value": 143,
        },
      },
      Object {
        "name": "newarray",
        "value": Object {
          "type": "number",
          "value": 144,
        },
      },
      Object {
        "name": "nop",
        "value": Object {
          "type": "number",
          "value": 0,
        },
      },
      Object {
        "name": "pop",
        "value": Object {
          "type": "number",
          "value": 59,
        },
      },
      Object {
        "name": "pop2",
        "value": Object {
          "type": "number",
          "value": 60,
        },
      },
      Object {
        "name": "putfield_a",
        "value": Object {
          "type": "number",
          "value": 135,
        },
      },
      Object {
        "name": "putfield_b",
        "value": Object {
          "type": "number",
          "value": 136,
        },
      },
      Object {
        "name": "putfield_s",
        "value": Object {
          "type": "number",
          "value": 137,
        },
      },
      Object {
        "name": "putfield_i",
        "value": Object {
          "type": "number",
          "value": 138,
        },
      },
      Object {
        "name": "putfield_a_this",
        "value": Object {
          "type": "number",
          "value": 181,
        },
      },
      Object {
        "name": "putfield_b_this",
        "value": Object {
          "type": "number",
          "value": 182,
        },
      },
      Object {
        "name": "putfield_s_this",
        "value": Object {
          "type": "number",
          "value": 183,
        },
      },
      Object {
        "name": "putfield_i_this",
        "value": Object {
          "type": "number",
          "value": 184,
        },
      },
      Object {
        "name": "putfield_a_w",
        "value": Object {
          "type": "number",
          "value": 177,
        },
      },
      Object {
        "name": "putfield_b_w",
        "value": Object {
          "type": "number",
          "value": 178,
        },
      },
      Object {
        "name": "putfield_s_w",
        "value": Object {
          "type": "number",
          "value": 179,
        },
      },
      Object {
        "name": "putfield_i_w",
        "value": Object {
          "type": "number",
          "value": 180,
        },
      },
      Object {
        "name": "putstatic_a",
        "value": Object {
          "type": "number",
          "value": 127,
        },
      },
      Object {
        "name": "putstatic_b",
        "value": Object {
          "type": "number",
          "value": 128,
        },
      },
      Object {
        "name": "putstatic_s",
        "value": Object {
          "type": "number",
          "value": 129,
        },
      },
      Object {
        "name": "putstatic_i",
        "value": Object {
          "type": "number",
          "value": 130,
        },
      },
      Object {
        "name": "ret",
        "value": Object {
          "type": "number",
          "value": 114,
        },
      },
      Object {
        "name": "Return",
        "value": Object {
          "type": "number",
          "value": 122,
        },
      },
      Object {
        "name": "s2b",
        "value": Object {
          "type": "number",
          "value": 91,
        },
      },
      Object {
        "name": "s2i",
        "value": Object {
          "type": "number",
          "value": 92,
        },
      },
      Object {
        "name": "sadd",
        "value": Object {
          "type": "number",
          "value": 65,
        },
      },
      Object {
        "name": "saload",
        "value": Object {
          "type": "number",
          "value": 70,
        },
      },
      Object {
        "name": "sand",
        "value": Object {
          "type": "number",
          "value": 83,
        },
      },
      Object {
        "name": "sastore",
        "value": Object {
          "type": "number",
          "value": 57,
        },
      },
      Object {
        "name": "sconst_m1",
        "value": Object {
          "type": "number",
          "value": 2,
        },
      },
      Object {
        "name": "sconst_0",
        "value": Object {
          "type": "number",
          "value": 3,
        },
      },
      Object {
        "name": "sconst_1",
        "value": Object {
          "type": "number",
          "value": 4,
        },
      },
      Object {
        "name": "sconst_2",
        "value": Object {
          "type": "number",
          "value": 5,
        },
      },
      Object {
        "name": "sconst_3",
        "value": Object {
          "type": "number",
          "value": 6,
        },
      },
      Object {
        "name": "sconst_4",
        "value": Object {
          "type": "number",
          "value": 7,
        },
      },
      Object {
        "name": "sconst_5",
        "value": Object {
          "type": "number",
          "value": 8,
        },
      },
      Object {
        "name": "sdiv",
        "value": Object {
          "type": "number",
          "value": 71,
        },
      },
      Object {
        "name": "sinc",
        "value": Object {
          "type": "number",
          "value": 89,
        },
      },
      Object {
        "name": "sinc_w",
        "value": Object {
          "type": "number",
          "value": 150,
        },
      },
      Object {
        "name": "sipush",
        "value": Object {
          "type": "number",
          "value": 19,
        },
      },
      Object {
        "name": "sload",
        "value": Object {
          "type": "number",
          "value": 22,
        },
      },
      Object {
        "name": "sload_0",
        "value": Object {
          "type": "number",
          "value": 28,
        },
      },
      Object {
        "name": "sload_1",
        "value": Object {
          "type": "number",
          "value": 29,
        },
      },
      Object {
        "name": "sload_2",
        "value": Object {
          "type": "number",
          "value": 30,
        },
      },
      Object {
        "name": "sload_3",
        "value": Object {
          "type": "number",
          "value": 31,
        },
      },
      Object {
        "name": "slookupswitch",
        "value": Object {
          "type": "number",
          "value": 117,
        },
      },
      Object {
        "name": "smul",
        "value": Object {
          "type": "number",
          "value": 69,
        },
      },
      Object {
        "name": "sneg",
        "value": Object {
          "type": "number",
          "value": 75,
        },
      },
      Object {
        "name": "sor",
        "value": Object {
          "type": "number",
          "value": 85,
        },
      },
      Object {
        "name": "srem",
        "value": Object {
          "type": "number",
          "value": 73,
        },
      },
      Object {
        "name": "sreturn",
        "value": Object {
          "type": "number",
          "value": 120,
        },
      },
      Object {
        "name": "sshl",
        "value": Object {
          "type": "number",
          "value": 77,
        },
      },
      Object {
        "name": "sshr",
        "value": Object {
          "type": "number",
          "value": 79,
        },
      },
      Object {
        "name": "sspush",
        "value": Object {
          "type": "number",
          "value": 17,
        },
      },
      Object {
        "name": "sstore",
        "value": Object {
          "type": "number",
          "value": 41,
        },
      },
      Object {
        "name": "sstore_0",
        "value": Object {
          "type": "number",
          "value": 47,
        },
      },
      Object {
        "name": "sstore_1",
        "value": Object {
          "type": "number",
          "value": 48,
        },
      },
      Object {
        "name": "sstore_2",
        "value": Object {
          "type": "number",
          "value": 49,
        },
      },
      Object {
        "name": "sstore_3",
        "value": Object {
          "type": "number",
          "value": 50,
        },
      },
      Object {
        "name": "ssub",
        "value": Object {
          "type": "number",
          "value": 67,
        },
      },
      Object {
        "name": "stableswitch",
        "value": Object {
          "type": "number",
          "value": 115,
        },
      },
      Object {
        "name": "sushr",
        "value": Object {
          "type": "number",
          "value": 81,
        },
      },
      Object {
        "name": "swap_x",
        "value": Object {
          "type": "number",
          "value": 64,
        },
      },
      Object {
        "name": "sxor",
        "value": Object {
          "type": "number",
          "value": 87,
        },
      },
    ],
    "type": "enumDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "minor_version",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "char",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "major_version",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "char",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "AID_length",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "char",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "AID_length",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [],
                  "arraySelector": Object {
                    "name": "AID_length",
                    "type": "identifier",
                  },
                  "name": "AID",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "char",
              },
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "PACKAGE_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "name_length",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "char",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "name_length",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [],
                  "arraySelector": Object {
                    "name": "name_length",
                    "type": "identifier",
                  },
                  "name": "name",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "char",
              },
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "PACKAGE_NAME_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "image_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "array_init_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "array_init_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "STATIC_FIELD_SIZE_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "component_tag",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "AID_length",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "AID_length",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [],
                  "arraySelector": Object {
                    "name": "AID_length",
                    "type": "identifier",
                  },
                  "name": "AID",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "char",
              },
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "CUSTOM_COMPONENT_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "tag",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "char",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "magic",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "minor_version",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "major_version",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "flags",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "package",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "PACKAGE_INFO",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "package_name",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "PACKAGE_NAME_INFO",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "HEADER_COMPONENT",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "tag",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "arraySelector": Object {
                  "type": "number",
                  "value": 12,
                },
                "name": "component_sizes",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "static_field_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "STATIC_FIELD_SIZE_INFO",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "import_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "applet_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "custom_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "custom_count",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [],
                  "arraySelector": Object {
                    "name": "custom_count",
                    "type": "identifier",
                  },
                  "name": "custom_components",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "CUSTOM_COMPONENT_INFO",
              },
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "DIRECTORY_COMPONENT",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "AID_length",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "AID_length",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [],
                  "arraySelector": Object {
                    "name": "AID_length",
                    "type": "identifier",
                  },
                  "name": "AID",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "char",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "install_method_offset",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "APPLET_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "tag",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "count",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "optimize",
                      "value": Object {
                        "type": "boolean",
                        "value": false,
                      },
                    },
                  ],
                  "arraySelector": Object {
                    "name": "count",
                    "type": "identifier",
                  },
                  "name": "applets",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "APPLET_INFO",
              },
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "APPLET_COMPONENT",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "tag",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "count",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "optimize",
                      "value": Object {
                        "type": "boolean",
                        "value": false,
                      },
                    },
                  ],
                  "arraySelector": Object {
                    "name": "count",
                    "type": "identifier",
                  },
                  "name": "packages",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "PACKAGE_INFO",
              },
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "IMPORT_COMPONENT",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "nibble_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "nibble_count",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [],
                  "arraySelector": Object {
                    "left": Object {
                      "left": Object {
                        "name": "nibble_count",
                        "type": "identifier",
                      },
                      "operator": "+",
                      "right": Object {
                        "type": "number",
                        "value": 1,
                      },
                      "type": "binaryExpression",
                    },
                    "operator": "/",
                    "right": Object {
                      "type": "number",
                      "value": 2,
                    },
                    "type": "binaryExpression",
                  },
                  "name": "type",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "uchar",
              },
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "TYPE_DESCRIPTOR",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "condition": Object {
              "left": Object {
                "arguments": Array [
                  Object {
                    "arguments": Array [],
                    "name": Object {
                      "name": "FTell",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                ],
                "name": Object {
                  "name": "ReadByte",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "operator": "&",
              "right": Object {
                "type": "number",
                "value": 128,
              },
              "type": "binaryExpression",
            },
            "falseStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "name": "package_token",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "uchar",
                  },
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "name": "class_token",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "uchar",
                  },
                },
              ],
              "type": "statementList",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "name": "internal_class_ref",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "ushort",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "CLASS_REF",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "interface_name_length",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "interface_name_length",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [],
                  "arraySelector": Object {
                    "name": "interface_name_length",
                    "type": "identifier",
                  },
                  "name": "interface_name",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "uchar",
              },
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "INTERFACE_NAME_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "interface",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "CLASS_REF",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "count",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [],
                  "arraySelector": Object {
                    "name": "count",
                    "type": "identifier",
                  },
                  "name": "index",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "uchar",
              },
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "IMPLEMENTED_INTERFACE_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "remote_method_hash",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "signature_offset",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "virtual_method_token",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "REMOTE_METHOD_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "tag",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "class_ref",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "CLASS_REF",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "padding",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "CONST_CLASSREF_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "tag",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "class",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "CLASS_REF",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "token",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "CONST_INSTANCEFIELDREF_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "tag",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "class",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "CLASS_REF",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "token",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "CONST_VIRTUALMETHODREF_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "tag",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "class",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "CLASS_REF",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "token",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "CONST_SUPERMETHODREF_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "condition": Object {
              "left": Object {
                "arguments": Array [
                  Object {
                    "arguments": Array [],
                    "name": Object {
                      "name": "FTell",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                ],
                "name": Object {
                  "name": "ReadByte",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "operator": "==",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "falseStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "name": "package_token",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "uchar",
                  },
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "name": "class_token",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "uchar",
                  },
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "name": "token",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "uchar",
                  },
                },
              ],
              "type": "statementList",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "name": "padding",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "uchar",
                  },
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "name": "offset",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "ushort",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "STATIC_FIELD_REF",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "class",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "CLASS_REF",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "token",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "INSTANCE_FIELD_REF",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "condition": Object {
              "left": Object {
                "arguments": Array [
                  Object {
                    "arguments": Array [],
                    "name": Object {
                      "name": "FTell",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                ],
                "name": Object {
                  "name": "ReadByte",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "operator": "==",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "falseStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "name": "package_token",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "uchar",
                  },
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "name": "class_token",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "uchar",
                  },
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "name": "token",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "uchar",
                  },
                },
              ],
              "type": "statementList",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "name": "padding",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "uchar",
                  },
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "name": "offset",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "ushort",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "STATIC_METHOD_REF",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "tag",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "static_field_ref",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "STATIC_FIELD_REF",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "CONST_STATICFIELDREF_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "tag",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "static_method_ref",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "STATIC_METHOD_REF",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "CONST_STATICMETHODREF_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "remote_methods_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "remote_methods_count",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "optimize",
                      "value": Object {
                        "type": "boolean",
                        "value": false,
                      },
                    },
                  ],
                  "arraySelector": Object {
                    "name": "remote_methods_count",
                    "type": "identifier",
                  },
                  "name": "remote_methods",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "REMOTE_METHOD_INFO",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "hash_modifier_length",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "hash_modifier_length",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "optimize",
                      "value": Object {
                        "type": "boolean",
                        "value": false,
                      },
                    },
                  ],
                  "arraySelector": Object {
                    "name": "hash_modifier_length",
                    "type": "identifier",
                  },
                  "name": "hash_modifier",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "uchar",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "class_name_length",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "class_name_length",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "optimize",
                      "value": Object {
                        "type": "boolean",
                        "value": false,
                      },
                    },
                  ],
                  "arraySelector": Object {
                    "name": "class_name_length",
                    "type": "identifier",
                  },
                  "name": "class_name",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "uchar",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "remote_interface_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "remote_interface_count",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "optimize",
                      "value": Object {
                        "type": "boolean",
                        "value": false,
                      },
                    },
                  ],
                  "arraySelector": Object {
                    "name": "remote_interface_count",
                    "type": "identifier",
                  },
                  "name": "remote_interfaces",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "CLASS_REF",
              },
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "REMOTE_INTERFACE_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "bits": Object {
                  "type": "number",
                  "value": 4,
                },
                "name": "flags",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "bits": Object {
                  "type": "number",
                  "value": 4,
                },
                "name": "interface_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "super_class_ref",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "CLASS_REF",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "declared_instance_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "first_reference_token",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "reference_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "public_method_table_base",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "public_method_table_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "package_method_table_base",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "package_method_table_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "public_method_table_count",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "optimize",
                      "value": Object {
                        "type": "boolean",
                        "value": false,
                      },
                    },
                  ],
                  "arraySelector": Object {
                    "name": "public_method_table_count",
                    "type": "identifier",
                  },
                  "name": "public_virtual_method_table",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "ushort",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "package_method_table_count",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "optimize",
                      "value": Object {
                        "type": "boolean",
                        "value": false,
                      },
                    },
                  ],
                  "arraySelector": Object {
                    "name": "package_method_table_count",
                    "type": "identifier",
                  },
                  "name": "package_virtual_method_table",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "ushort",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "interface_count",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "optimize",
                      "value": Object {
                        "type": "boolean",
                        "value": false,
                      },
                    },
                  ],
                  "arraySelector": Object {
                    "name": "interface_count",
                    "type": "identifier",
                  },
                  "name": "interfaces",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "IMPLEMENTED_INTERFACE_INFO",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "flags",
                "type": "identifier",
              },
              "operator": "&",
              "right": Object {
                "type": "number",
                "value": 2,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [],
                  "name": "remote_interfaces",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "REMOTE_INTERFACE_INFO",
              },
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "CLASS_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "bits": Object {
                  "type": "number",
                  "value": 4,
                },
                "name": "flags",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "bits": Object {
                  "type": "number",
                  "value": 4,
                },
                "name": "interface_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "interface_count",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "optimize",
                      "value": Object {
                        "type": "boolean",
                        "value": false,
                      },
                    },
                  ],
                  "arraySelector": Object {
                    "name": "interface_count",
                    "type": "identifier",
                  },
                  "name": "super_interfaces",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "CLASS_REF",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "flags",
                "type": "identifier",
              },
              "operator": "&",
              "right": Object {
                "type": "number",
                "value": 2,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [],
                  "name": "interface_name",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "INTERFACE_NAME_INFO",
              },
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "INTERFACE_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "tag",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "arguments": Array [],
                  "name": Object {
                    "name": "FTell",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "name": "start_index",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint64",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "signature_pool_length",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "arguments": Array [],
                  "name": Object {
                    "name": "FTell",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "name": "sign_index",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint64",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "signature_pool_length",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "body": Object {
                    "statements": Array [
                      Object {
                        "annotations": Array [],
                        "declarations": Array [
                          Object {
                            "annotations": Array [],
                            "name": "descriptor",
                          },
                        ],
                        "type": "variableDeclaration",
                        "variableType": Object {
                          "array": false,
                          "name": "TYPE_DESCRIPTOR",
                        },
                      },
                    ],
                    "type": "statementList",
                  },
                  "condition": Object {
                    "left": Object {
                      "arguments": Array [],
                      "name": Object {
                        "name": "FTell",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    "operator": "<",
                    "right": Object {
                      "left": Object {
                        "name": "sign_index",
                        "type": "identifier",
                      },
                      "operator": "+",
                      "right": Object {
                        "name": "signature_pool_length",
                        "type": "identifier",
                      },
                      "type": "binaryExpression",
                    },
                    "type": "binaryExpression",
                  },
                  "type": "whileStatement",
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
          Object {
            "body": Object {
              "statements": Array [
                Object {
                  "condition": Object {
                    "left": Object {
                      "arguments": Array [
                        Object {
                          "arguments": Array [],
                          "name": Object {
                            "name": "FTell",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                      ],
                      "name": Object {
                        "name": "ReadByte",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    "operator": "&",
                    "right": Object {
                      "type": "number",
                      "value": 128,
                    },
                    "type": "binaryExpression",
                  },
                  "falseStatement": Object {
                    "statements": Array [
                      Object {
                        "annotations": Array [],
                        "declarations": Array [
                          Object {
                            "annotations": Array [],
                            "name": "class",
                          },
                        ],
                        "type": "variableDeclaration",
                        "variableType": Object {
                          "array": false,
                          "name": "CLASS_INFO",
                        },
                      },
                    ],
                    "type": "statementList",
                  },
                  "trueStatement": Object {
                    "statements": Array [
                      Object {
                        "annotations": Array [],
                        "declarations": Array [
                          Object {
                            "annotations": Array [],
                            "name": "interface",
                          },
                        ],
                        "type": "variableDeclaration",
                        "variableType": Object {
                          "array": false,
                          "name": "INTERFACE_INFO",
                        },
                      },
                    ],
                    "type": "statementList",
                  },
                  "type": "ifStatement",
                },
              ],
              "type": "statementList",
            },
            "condition": Object {
              "left": Object {
                "arguments": Array [],
                "name": Object {
                  "name": "FTell",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "operator": "<",
              "right": Object {
                "left": Object {
                  "name": "start_index",
                  "type": "identifier",
                },
                "operator": "+",
                "right": Object {
                  "name": "size",
                  "type": "identifier",
                },
                "type": "binaryExpression",
              },
              "type": "binaryExpression",
            },
            "type": "whileStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "CLASS_COMPONENT",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "type",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "arraySelector": Object {
                  "name": "count",
                  "type": "identifier",
                },
                "name": "values",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "ARRAY_INIT_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "tag",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "image_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "reference_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "array_init_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "array_init_count",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "optimize",
                      "value": Object {
                        "type": "boolean",
                        "value": false,
                      },
                    },
                  ],
                  "arraySelector": Object {
                    "name": "array_init_count",
                    "type": "identifier",
                  },
                  "name": "array_init",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "ARRAY_INIT_INFO",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "default_value_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "non_default_value_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "non_default_value_count",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "optimize",
                      "value": Object {
                        "type": "boolean",
                        "value": false,
                      },
                    },
                  ],
                  "arraySelector": Object {
                    "name": "non_default_value_count",
                    "type": "identifier",
                  },
                  "name": "non_default_values",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "uchar",
              },
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "STATICFIELD_COMPONENT",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "tag",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "byte_index_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "arraySelector": Object {
                  "name": "byte_index_count",
                  "type": "identifier",
                },
                "name": "offsets_to_byte_indices",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "byte2_index_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "arraySelector": Object {
                  "name": "byte2_index_count",
                  "type": "identifier",
                },
                "name": "offsets_to_byte2_indices",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "REFERENCELOC_COMPONENT",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "tag",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "class_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [
              Object {
                "key": "optimize",
                "value": Object {
                  "type": "boolean",
                  "value": false,
                },
              },
            ],
            "arraySelector": Object {
              "name": "class_count",
              "type": "identifier",
            },
            "declaration": Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "annotations": Array [],
                    "declarations": Array [
                      Object {
                        "annotations": Array [],
                        "name": "class_offset",
                      },
                    ],
                    "type": "variableDeclaration",
                    "variableType": Object {
                      "array": false,
                      "name": "ushort",
                    },
                  },
                  Object {
                    "annotations": Array [],
                    "declarations": Array [
                      Object {
                        "annotations": Array [],
                        "name": "static_field_count",
                      },
                    ],
                    "type": "variableDeclaration",
                    "variableType": Object {
                      "array": false,
                      "name": "uchar",
                    },
                  },
                  Object {
                    "annotations": Array [],
                    "declarations": Array [
                      Object {
                        "annotations": Array [],
                        "name": "static_method_count",
                      },
                    ],
                    "type": "variableDeclaration",
                    "variableType": Object {
                      "array": false,
                      "name": "uchar",
                    },
                  },
                  Object {
                    "annotations": Array [],
                    "declarations": Array [
                      Object {
                        "annotations": Array [],
                        "arraySelector": Object {
                          "name": "static_field_count",
                          "type": "identifier",
                        },
                        "name": "static_field_offsets",
                      },
                    ],
                    "type": "variableDeclaration",
                    "variableType": Object {
                      "array": false,
                      "name": "ushort",
                    },
                  },
                  Object {
                    "annotations": Array [],
                    "declarations": Array [
                      Object {
                        "annotations": Array [],
                        "arraySelector": Object {
                          "name": "static_method_count",
                          "type": "identifier",
                        },
                        "name": "static_method_offsets",
                      },
                    ],
                    "type": "variableDeclaration",
                    "variableType": Object {
                      "array": false,
                      "name": "ushort",
                    },
                  },
                ],
                "type": "statementList",
              },
            },
            "name": "class_exports",
            "type": "structDeclaration",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "EXPORT_COMPONENT",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "start_offset",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "stop_bit",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "bits": Object {
                  "type": "number",
                  "value": 15,
                },
                "name": "active_length",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "handler_offset",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "catch_type_index",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "EXCEPTION_HANDLER_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "bits": Object {
                  "type": "number",
                  "value": 4,
                },
                "name": "flags",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "bits": Object {
                  "type": "number",
                  "value": 4,
                },
                "name": "max_stack",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "bits": Object {
                  "type": "number",
                  "value": 4,
                },
                "name": "nargs",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "bits": Object {
                  "type": "number",
                  "value": 4,
                },
                "name": "max_locals",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "METHOD_HEADER_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "bits": Object {
                  "type": "number",
                  "value": 4,
                },
                "name": "flags",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "bits": Object {
                  "type": "number",
                  "value": 4,
                },
                "name": "padding",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "max_stack",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "nargs",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "max_locals",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "EXTENDED_METHOD_HEADER_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "ReadJavaOpcode",
          "type": "identifier",
        },
      },
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "opcode",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "JVCODE",
            },
          },
          Object {
            "statements": Array [
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "aaload",
                    "type": "identifier",
                  },
                  Object {
                    "name": "aastore",
                    "type": "identifier",
                  },
                  Object {
                    "name": "aconst_null",
                    "type": "identifier",
                  },
                  Object {
                    "name": "aload_0",
                    "type": "identifier",
                  },
                  Object {
                    "name": "aload_1",
                    "type": "identifier",
                  },
                  Object {
                    "name": "aload_2",
                    "type": "identifier",
                  },
                  Object {
                    "name": "aload_3",
                    "type": "identifier",
                  },
                  Object {
                    "name": "areturn",
                    "type": "identifier",
                  },
                  Object {
                    "name": "arraylength",
                    "type": "identifier",
                  },
                  Object {
                    "name": "astore_0",
                    "type": "identifier",
                  },
                  Object {
                    "name": "astore_1",
                    "type": "identifier",
                  },
                  Object {
                    "name": "astore_2",
                    "type": "identifier",
                  },
                  Object {
                    "name": "astore_3",
                    "type": "identifier",
                  },
                  Object {
                    "name": "athrow",
                    "type": "identifier",
                  },
                  Object {
                    "name": "baload",
                    "type": "identifier",
                  },
                  Object {
                    "name": "bastore",
                    "type": "identifier",
                  },
                  Object {
                    "name": "dup",
                    "type": "identifier",
                  },
                  Object {
                    "name": "dup2",
                    "type": "identifier",
                  },
                  Object {
                    "name": "i2b",
                    "type": "identifier",
                  },
                  Object {
                    "name": "i2s",
                    "type": "identifier",
                  },
                  Object {
                    "name": "iadd",
                    "type": "identifier",
                  },
                  Object {
                    "name": "iaload",
                    "type": "identifier",
                  },
                  Object {
                    "name": "iand",
                    "type": "identifier",
                  },
                  Object {
                    "name": "iastore",
                    "type": "identifier",
                  },
                  Object {
                    "name": "icmp",
                    "type": "identifier",
                  },
                  Object {
                    "name": "iconst_m1",
                    "type": "identifier",
                  },
                  Object {
                    "name": "iconst_0",
                    "type": "identifier",
                  },
                  Object {
                    "name": "iconst_1",
                    "type": "identifier",
                  },
                  Object {
                    "name": "iconst_2",
                    "type": "identifier",
                  },
                  Object {
                    "name": "iconst_3",
                    "type": "identifier",
                  },
                  Object {
                    "name": "iconst_4",
                    "type": "identifier",
                  },
                  Object {
                    "name": "iconst_5",
                    "type": "identifier",
                  },
                  Object {
                    "name": "idiv",
                    "type": "identifier",
                  },
                  Object {
                    "name": "iload_0",
                    "type": "identifier",
                  },
                  Object {
                    "name": "iload_1",
                    "type": "identifier",
                  },
                  Object {
                    "name": "iload_2",
                    "type": "identifier",
                  },
                  Object {
                    "name": "iload_3",
                    "type": "identifier",
                  },
                  Object {
                    "name": "imul",
                    "type": "identifier",
                  },
                  Object {
                    "name": "ineg",
                    "type": "identifier",
                  },
                  Object {
                    "name": "ior",
                    "type": "identifier",
                  },
                  Object {
                    "name": "irem",
                    "type": "identifier",
                  },
                  Object {
                    "name": "ireturn",
                    "type": "identifier",
                  },
                  Object {
                    "name": "ishl",
                    "type": "identifier",
                  },
                  Object {
                    "name": "ishr",
                    "type": "identifier",
                  },
                  Object {
                    "name": "istore_0",
                    "type": "identifier",
                  },
                  Object {
                    "name": "istore_1",
                    "type": "identifier",
                  },
                  Object {
                    "name": "istore_2",
                    "type": "identifier",
                  },
                  Object {
                    "name": "istore_3",
                    "type": "identifier",
                  },
                  Object {
                    "name": "isub",
                    "type": "identifier",
                  },
                  Object {
                    "name": "iushr",
                    "type": "identifier",
                  },
                  Object {
                    "name": "ixor",
                    "type": "identifier",
                  },
                  Object {
                    "name": "nop",
                    "type": "identifier",
                  },
                  Object {
                    "name": "pop",
                    "type": "identifier",
                  },
                  Object {
                    "name": "pop2",
                    "type": "identifier",
                  },
                  Object {
                    "name": "Return",
                    "type": "identifier",
                  },
                  Object {
                    "name": "s2b",
                    "type": "identifier",
                  },
                  Object {
                    "name": "s2i",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sadd",
                    "type": "identifier",
                  },
                  Object {
                    "name": "saload",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sand",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sastore",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sconst_m1",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sconst_0",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sconst_1",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sconst_2",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sconst_3",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sconst_4",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sconst_5",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sdiv",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sload_0",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sload_1",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sload_2",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sload_3",
                    "type": "identifier",
                  },
                  Object {
                    "name": "smul",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sneg",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sor",
                    "type": "identifier",
                  },
                  Object {
                    "name": "srem",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sreturn",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sshl",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sshr",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sstore_0",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sstore_1",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sstore_2",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sstore_3",
                    "type": "identifier",
                  },
                  Object {
                    "name": "ssub",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sushr",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sxor",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [],
                          "name": "operand1",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "uchar",
                      },
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "aload",
                    "type": "identifier",
                  },
                  Object {
                    "name": "astore",
                    "type": "identifier",
                  },
                  Object {
                    "name": "bipush",
                    "type": "identifier",
                  },
                  Object {
                    "name": "bspush",
                    "type": "identifier",
                  },
                  Object {
                    "name": "dup_x",
                    "type": "identifier",
                  },
                  Object {
                    "name": "getfield_a",
                    "type": "identifier",
                  },
                  Object {
                    "name": "getfield_b",
                    "type": "identifier",
                  },
                  Object {
                    "name": "getfield_s",
                    "type": "identifier",
                  },
                  Object {
                    "name": "getfield_i",
                    "type": "identifier",
                  },
                  Object {
                    "name": "getfield_a_this",
                    "type": "identifier",
                  },
                  Object {
                    "name": "getfield_b_this",
                    "type": "identifier",
                  },
                  Object {
                    "name": "getfield_s_this",
                    "type": "identifier",
                  },
                  Object {
                    "name": "getfield_i_this",
                    "type": "identifier",
                  },
                  Object {
                    "name": "goto",
                    "type": "identifier",
                  },
                  Object {
                    "name": "if_acmpeq",
                    "type": "identifier",
                  },
                  Object {
                    "name": "if_acmpne",
                    "type": "identifier",
                  },
                  Object {
                    "name": "if_scmpeq",
                    "type": "identifier",
                  },
                  Object {
                    "name": "if_scmpne",
                    "type": "identifier",
                  },
                  Object {
                    "name": "if_scmplt",
                    "type": "identifier",
                  },
                  Object {
                    "name": "if_scmpge",
                    "type": "identifier",
                  },
                  Object {
                    "name": "if_scmpgt",
                    "type": "identifier",
                  },
                  Object {
                    "name": "if_scmple",
                    "type": "identifier",
                  },
                  Object {
                    "name": "ifeq",
                    "type": "identifier",
                  },
                  Object {
                    "name": "ifne",
                    "type": "identifier",
                  },
                  Object {
                    "name": "iflt",
                    "type": "identifier",
                  },
                  Object {
                    "name": "ifge",
                    "type": "identifier",
                  },
                  Object {
                    "name": "ifgt",
                    "type": "identifier",
                  },
                  Object {
                    "name": "ifle",
                    "type": "identifier",
                  },
                  Object {
                    "name": "ifnonnull",
                    "type": "identifier",
                  },
                  Object {
                    "name": "ifnull",
                    "type": "identifier",
                  },
                  Object {
                    "name": "iload",
                    "type": "identifier",
                  },
                  Object {
                    "name": "istore",
                    "type": "identifier",
                  },
                  Object {
                    "name": "newarray",
                    "type": "identifier",
                  },
                  Object {
                    "name": "putfield_a",
                    "type": "identifier",
                  },
                  Object {
                    "name": "putfield_b",
                    "type": "identifier",
                  },
                  Object {
                    "name": "putfield_s",
                    "type": "identifier",
                  },
                  Object {
                    "name": "putfield_i",
                    "type": "identifier",
                  },
                  Object {
                    "name": "putfield_a_this",
                    "type": "identifier",
                  },
                  Object {
                    "name": "putfield_b_this",
                    "type": "identifier",
                  },
                  Object {
                    "name": "putfield_s_this",
                    "type": "identifier",
                  },
                  Object {
                    "name": "putfield_i_this",
                    "type": "identifier",
                  },
                  Object {
                    "name": "ret",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sload",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sstore",
                    "type": "identifier",
                  },
                  Object {
                    "name": "swap_x",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [],
                          "name": "operand1",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "ushort",
                      },
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "anewarray",
                    "type": "identifier",
                  },
                  Object {
                    "name": "getfield_a_w",
                    "type": "identifier",
                  },
                  Object {
                    "name": "getfield_b_w",
                    "type": "identifier",
                  },
                  Object {
                    "name": "getfield_s_w",
                    "type": "identifier",
                  },
                  Object {
                    "name": "getfield_i_w",
                    "type": "identifier",
                  },
                  Object {
                    "name": "getstatic_a",
                    "type": "identifier",
                  },
                  Object {
                    "name": "getstatic_b",
                    "type": "identifier",
                  },
                  Object {
                    "name": "getstatic_s",
                    "type": "identifier",
                  },
                  Object {
                    "name": "getstatic_i",
                    "type": "identifier",
                  },
                  Object {
                    "name": "goto_w",
                    "type": "identifier",
                  },
                  Object {
                    "name": "if_acmpeq_w",
                    "type": "identifier",
                  },
                  Object {
                    "name": "if_acmpne_w",
                    "type": "identifier",
                  },
                  Object {
                    "name": "if_scmpeq_w",
                    "type": "identifier",
                  },
                  Object {
                    "name": "if_scmpne_w",
                    "type": "identifier",
                  },
                  Object {
                    "name": "if_scmplt_w",
                    "type": "identifier",
                  },
                  Object {
                    "name": "if_scmpge_w",
                    "type": "identifier",
                  },
                  Object {
                    "name": "if_scmpgt_w",
                    "type": "identifier",
                  },
                  Object {
                    "name": "if_scmple_w",
                    "type": "identifier",
                  },
                  Object {
                    "name": "ifeq_w",
                    "type": "identifier",
                  },
                  Object {
                    "name": "ifne_w",
                    "type": "identifier",
                  },
                  Object {
                    "name": "iflt_w",
                    "type": "identifier",
                  },
                  Object {
                    "name": "ifge_w",
                    "type": "identifier",
                  },
                  Object {
                    "name": "ifgt_w",
                    "type": "identifier",
                  },
                  Object {
                    "name": "ifle_w",
                    "type": "identifier",
                  },
                  Object {
                    "name": "ifnonnull_w",
                    "type": "identifier",
                  },
                  Object {
                    "name": "ifnull_w",
                    "type": "identifier",
                  },
                  Object {
                    "name": "invokespecial",
                    "type": "identifier",
                  },
                  Object {
                    "name": "invokestatic",
                    "type": "identifier",
                  },
                  Object {
                    "name": "invokevirtual",
                    "type": "identifier",
                  },
                  Object {
                    "name": "jsr",
                    "type": "identifier",
                  },
                  Object {
                    "name": "new",
                    "type": "identifier",
                  },
                  Object {
                    "name": "putfield_a_w",
                    "type": "identifier",
                  },
                  Object {
                    "name": "putfield_b_w",
                    "type": "identifier",
                  },
                  Object {
                    "name": "putfield_s_w",
                    "type": "identifier",
                  },
                  Object {
                    "name": "putfield_i_w",
                    "type": "identifier",
                  },
                  Object {
                    "name": "putstatic_a",
                    "type": "identifier",
                  },
                  Object {
                    "name": "putstatic_b",
                    "type": "identifier",
                  },
                  Object {
                    "name": "putstatic_s",
                    "type": "identifier",
                  },
                  Object {
                    "name": "putstatic_i",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sipush",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sspush",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [],
                          "name": "operand1",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "uchar",
                      },
                    },
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [],
                          "name": "operand2",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "ushort",
                      },
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "checkcast",
                    "type": "identifier",
                  },
                  Object {
                    "name": "iinc_w",
                    "type": "identifier",
                  },
                  Object {
                    "name": "instanceof",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sinc_w",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [],
                          "name": "operand1",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "uchar",
                      },
                    },
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [],
                          "name": "operand2",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "uchar",
                      },
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "iinc",
                    "type": "identifier",
                  },
                  Object {
                    "name": "sinc",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [],
                          "name": "operand1",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "uint",
                      },
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "iipush",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [],
                          "name": "args",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "uchar",
                      },
                    },
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [],
                          "name": "index",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "ushort",
                      },
                    },
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [],
                          "name": "method",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "uchar",
                      },
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "invokeinterface",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [],
                          "name": "default_offset",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "ushort",
                      },
                    },
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [],
                          "name": "pairs",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "ushort",
                      },
                    },
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [],
                          "initializer": Object {
                            "type": "number",
                            "value": 0,
                          },
                          "name": "index",
                        },
                      ],
                      "local": true,
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "ushort",
                      },
                    },
                    Object {
                      "condition": Object {
                        "left": Object {
                          "name": "pairs",
                          "type": "identifier",
                        },
                        "operator": ">",
                        "right": Object {
                          "type": "number",
                          "value": 0,
                        },
                        "type": "binaryExpression",
                      },
                      "trueStatement": Object {
                        "statements": Array [
                          Object {
                            "body": Object {
                              "statements": Array [
                                Object {
                                  "annotations": Array [],
                                  "declaration": Object {
                                    "body": Object {
                                      "statements": Array [
                                        Object {
                                          "annotations": Array [],
                                          "declarations": Array [
                                            Object {
                                              "annotations": Array [],
                                              "name": "match",
                                            },
                                          ],
                                          "type": "variableDeclaration",
                                          "variableType": Object {
                                            "array": false,
                                            "name": "uint",
                                          },
                                        },
                                        Object {
                                          "annotations": Array [],
                                          "declarations": Array [
                                            Object {
                                              "annotations": Array [],
                                              "name": "offset",
                                            },
                                          ],
                                          "type": "variableDeclaration",
                                          "variableType": Object {
                                            "array": false,
                                            "name": "ushort",
                                          },
                                        },
                                      ],
                                      "type": "statementList",
                                    },
                                  },
                                  "name": "imo_pairs",
                                  "type": "structDeclaration",
                                },
                                Object {
                                  "expression": Object {
                                    "name": "index",
                                    "type": "identifier",
                                  },
                                  "operator": "++",
                                  "type": "postfixExpression",
                                },
                              ],
                              "type": "statementList",
                            },
                            "condition": Object {
                              "left": Object {
                                "name": "index",
                                "type": "identifier",
                              },
                              "operator": "<",
                              "right": Object {
                                "name": "pairs",
                                "type": "identifier",
                              },
                              "type": "binaryExpression",
                            },
                            "type": "whileStatement",
                          },
                        ],
                        "type": "statementList",
                      },
                      "type": "ifStatement",
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "ilookupswitch",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [],
                          "name": "default_offset",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "ushort",
                      },
                    },
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [],
                          "name": "low",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "uint",
                      },
                    },
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [],
                          "name": "high",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "uint",
                      },
                    },
                    Object {
                      "condition": Object {
                        "left": Object {
                          "left": Object {
                            "name": "high",
                            "type": "identifier",
                          },
                          "operator": "-",
                          "right": Object {
                            "name": "low",
                            "type": "identifier",
                          },
                          "type": "binaryExpression",
                        },
                        "operator": ">",
                        "right": Object {
                          "type": "number",
                          "value": 0,
                        },
                        "type": "binaryExpression",
                      },
                      "trueStatement": Object {
                        "annotations": Array [],
                        "declarations": Array [
                          Object {
                            "annotations": Array [],
                            "arraySelector": Object {
                              "left": Object {
                                "name": "high",
                                "type": "identifier",
                              },
                              "operator": "-",
                              "right": Object {
                                "name": "low",
                                "type": "identifier",
                              },
                              "type": "binaryExpression",
                            },
                            "name": "offsets",
                          },
                        ],
                        "type": "variableDeclaration",
                        "variableType": Object {
                          "array": false,
                          "name": "ushort",
                        },
                      },
                      "type": "ifStatement",
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "itableswitch",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [],
                          "name": "default_offset",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "ushort",
                      },
                    },
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [],
                          "name": "pairs",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "ushort",
                      },
                    },
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [],
                          "initializer": Object {
                            "type": "number",
                            "value": 0,
                          },
                          "name": "index",
                        },
                      ],
                      "local": true,
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "ushort",
                      },
                    },
                    Object {
                      "condition": Object {
                        "left": Object {
                          "name": "pairs",
                          "type": "identifier",
                        },
                        "operator": ">",
                        "right": Object {
                          "type": "number",
                          "value": 0,
                        },
                        "type": "binaryExpression",
                      },
                      "trueStatement": Object {
                        "statements": Array [
                          Object {
                            "body": Object {
                              "statements": Array [
                                Object {
                                  "annotations": Array [],
                                  "declaration": Object {
                                    "body": Object {
                                      "statements": Array [
                                        Object {
                                          "annotations": Array [],
                                          "declarations": Array [
                                            Object {
                                              "annotations": Array [],
                                              "name": "match",
                                            },
                                          ],
                                          "type": "variableDeclaration",
                                          "variableType": Object {
                                            "array": false,
                                            "name": "ushort",
                                          },
                                        },
                                        Object {
                                          "annotations": Array [],
                                          "declarations": Array [
                                            Object {
                                              "annotations": Array [],
                                              "name": "offset",
                                            },
                                          ],
                                          "type": "variableDeclaration",
                                          "variableType": Object {
                                            "array": false,
                                            "name": "ushort",
                                          },
                                        },
                                      ],
                                      "type": "statementList",
                                    },
                                  },
                                  "name": "imo_pairs",
                                  "type": "structDeclaration",
                                },
                                Object {
                                  "expression": Object {
                                    "name": "index",
                                    "type": "identifier",
                                  },
                                  "operator": "++",
                                  "type": "postfixExpression",
                                },
                              ],
                              "type": "statementList",
                            },
                            "condition": Object {
                              "left": Object {
                                "name": "index",
                                "type": "identifier",
                              },
                              "operator": "<",
                              "right": Object {
                                "name": "pairs",
                                "type": "identifier",
                              },
                              "type": "binaryExpression",
                            },
                            "type": "whileStatement",
                          },
                        ],
                        "type": "statementList",
                      },
                      "type": "ifStatement",
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "slookupswitch",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [],
                          "name": "default_offset",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "ushort",
                      },
                    },
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [],
                          "name": "low",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "ushort",
                      },
                    },
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [],
                          "name": "high",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "ushort",
                      },
                    },
                    Object {
                      "condition": Object {
                        "left": Object {
                          "left": Object {
                            "name": "high",
                            "type": "identifier",
                          },
                          "operator": "-",
                          "right": Object {
                            "name": "low",
                            "type": "identifier",
                          },
                          "type": "binaryExpression",
                        },
                        "operator": ">",
                        "right": Object {
                          "type": "number",
                          "value": 0,
                        },
                        "type": "binaryExpression",
                      },
                      "trueStatement": Object {
                        "annotations": Array [],
                        "declarations": Array [
                          Object {
                            "annotations": Array [],
                            "arraySelector": Object {
                              "left": Object {
                                "name": "high",
                                "type": "identifier",
                              },
                              "operator": "-",
                              "right": Object {
                                "name": "low",
                                "type": "identifier",
                              },
                              "type": "binaryExpression",
                            },
                            "name": "offsets",
                          },
                        ],
                        "type": "variableDeclaration",
                        "variableType": Object {
                          "array": false,
                          "name": "ushort",
                        },
                      },
                      "type": "ifStatement",
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "stableswitch",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "type": "defaultStatement",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [],
                  "type": "statementList",
                },
                "labels": Array [],
              },
            ],
            "type": "switchStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "JAVA_OPCODE",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [],
        "initializer": Object {
          "type": "number",
          "value": 0,
        },
        "name": "start_bytecode",
      },
    ],
    "local": true,
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "uint64",
    },
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "arguments": Array [
              Object {
                "expression": Object {
                  "name": "code",
                  "type": "identifier",
                },
                "name": "opcode",
                "type": "propertyAccessExpression",
              },
            ],
            "name": Object {
              "name": "EnumToString",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ReadJavaOpcode",
    "parameters": Array [
      Object {
        "name": "code",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "JAVA_OPCODE",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "tag",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "arguments": Array [],
                  "name": Object {
                    "name": "FTell",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "name": "start_index",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint64",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "left": Object {
                    "arguments": Array [],
                    "name": Object {
                      "name": "FTell",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  "operator": "-",
                  "right": Object {
                    "name": "start_index",
                    "type": "identifier",
                  },
                  "type": "binaryExpression",
                },
                "name": "handler_size",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint64",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "arguments": Array [],
                  "name": Object {
                    "name": "FTell",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "name": "start_method",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint64",
            },
          },
          Object {
            "left": Object {
              "name": "start_bytecode",
              "type": "identifier",
            },
            "operator": "=",
            "right": Object {
              "name": "start_method",
              "type": "identifier",
            },
            "type": "binaryExpression",
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "handler_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "handler_count",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "optimize",
                      "value": Object {
                        "type": "boolean",
                        "value": false,
                      },
                    },
                  ],
                  "arraySelector": Object {
                    "name": "handler_count",
                    "type": "identifier",
                  },
                  "name": "exception_handlers",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "EXCEPTION_HANDLER_INFO",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "body": Object {
              "statements": Array [
                Object {
                  "arguments": Array [
                    Object {
                      "left": Object {
                        "name": "start_method",
                        "type": "identifier",
                      },
                      "operator": "+",
                      "right": Object {
                        "expression": Object {
                          "name": "method_offsets",
                          "type": "identifier",
                        },
                        "index": Object {
                          "name": "head_index",
                          "type": "identifier",
                        },
                        "type": "arrayIndexExpression",
                      },
                      "type": "binaryExpression",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                Object {
                  "annotations": Array [],
                  "declaration": Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "condition": Object {
                            "left": Object {
                              "arguments": Array [
                                Object {
                                  "arguments": Array [],
                                  "name": Object {
                                    "name": "FTell",
                                    "type": "identifier",
                                  },
                                  "type": "functionCallExpression",
                                },
                              ],
                              "name": Object {
                                "name": "ReadByte",
                                "type": "identifier",
                              },
                              "type": "functionCallExpression",
                            },
                            "operator": "&",
                            "right": Object {
                              "type": "number",
                              "value": 128,
                            },
                            "type": "binaryExpression",
                          },
                          "falseStatement": Object {
                            "statements": Array [
                              Object {
                                "annotations": Array [],
                                "declarations": Array [
                                  Object {
                                    "annotations": Array [],
                                    "name": "method_header",
                                  },
                                ],
                                "type": "variableDeclaration",
                                "variableType": Object {
                                  "array": false,
                                  "name": "METHOD_HEADER_INFO",
                                },
                              },
                            ],
                            "type": "statementList",
                          },
                          "trueStatement": Object {
                            "statements": Array [
                              Object {
                                "annotations": Array [],
                                "declarations": Array [
                                  Object {
                                    "annotations": Array [],
                                    "name": "method_header",
                                  },
                                ],
                                "type": "variableDeclaration",
                                "variableType": Object {
                                  "array": false,
                                  "name": "EXTENDED_METHOD_HEADER_INFO",
                                },
                              },
                            ],
                            "type": "statementList",
                          },
                          "type": "ifStatement",
                        },
                        Object {
                          "left": Object {
                            "name": "start_index",
                            "type": "identifier",
                          },
                          "operator": "=",
                          "right": Object {
                            "arguments": Array [],
                            "name": Object {
                              "name": "FTell",
                              "type": "identifier",
                            },
                            "type": "functionCallExpression",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "annotations": Array [],
                          "declarations": Array [
                            Object {
                              "annotations": Array [],
                              "initializer": Object {
                                "expression": Object {
                                  "name": "method_codesize",
                                  "type": "identifier",
                                },
                                "index": Object {
                                  "name": "head_index",
                                  "type": "identifier",
                                },
                                "type": "arrayIndexExpression",
                              },
                              "name": "codesize",
                            },
                          ],
                          "local": true,
                          "type": "variableDeclaration",
                          "variableType": Object {
                            "array": false,
                            "name": "uint16",
                          },
                        },
                        Object {
                          "condition": Object {
                            "left": Object {
                              "name": "codesize",
                              "type": "identifier",
                            },
                            "operator": "!=",
                            "right": Object {
                              "type": "number",
                              "value": 0,
                            },
                            "type": "binaryExpression",
                          },
                          "trueStatement": Object {
                            "statements": Array [
                              Object {
                                "annotations": Array [],
                                "declaration": Object {
                                  "body": Object {
                                    "statements": Array [
                                      Object {
                                        "body": Object {
                                          "statements": Array [
                                            Object {
                                              "annotations": Array [],
                                              "declarations": Array [
                                                Object {
                                                  "annotations": Array [],
                                                  "name": "code",
                                                },
                                              ],
                                              "type": "variableDeclaration",
                                              "variableType": Object {
                                                "array": false,
                                                "name": "JAVA_OPCODE",
                                              },
                                            },
                                          ],
                                          "type": "statementList",
                                        },
                                        "condition": Object {
                                          "left": Object {
                                            "arguments": Array [],
                                            "name": Object {
                                              "name": "FTell",
                                              "type": "identifier",
                                            },
                                            "type": "functionCallExpression",
                                          },
                                          "operator": "<",
                                          "right": Object {
                                            "left": Object {
                                              "name": "start_index",
                                              "type": "identifier",
                                            },
                                            "operator": "+",
                                            "right": Object {
                                              "name": "codesize",
                                              "type": "identifier",
                                            },
                                            "type": "binaryExpression",
                                          },
                                          "type": "binaryExpression",
                                        },
                                        "type": "whileStatement",
                                      },
                                    ],
                                    "type": "statementList",
                                  },
                                },
                                "name": "bytecodes",
                                "type": "structDeclaration",
                              },
                            ],
                            "type": "statementList",
                          },
                          "type": "ifStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                  },
                  "name": "methods",
                  "type": "structDeclaration",
                },
                Object {
                  "expression": Object {
                    "name": "head_index",
                    "type": "identifier",
                  },
                  "operator": "++",
                  "type": "postfixExpression",
                },
              ],
              "type": "statementList",
            },
            "condition": Object {
              "left": Object {
                "name": "head_index",
                "type": "identifier",
              },
              "operator": "!=",
              "right": Object {
                "name": "tail_index",
                "type": "identifier",
              },
              "type": "binaryExpression",
            },
            "type": "whileStatement",
          },
          Object {
            "arguments": Array [
              Object {
                "left": Object {
                  "name": "start_index",
                  "type": "identifier",
                },
                "operator": "+",
                "right": Object {
                  "name": "size",
                  "type": "identifier",
                },
                "type": "binaryExpression",
              },
            ],
            "name": Object {
              "name": "FSeek",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "METHOD_COMPONENT",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "tag",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "arraySelector": Object {
                  "type": "number",
                  "value": 3,
                },
                "name": "info",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "CP_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "tag",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "arraySelector": Object {
                  "name": "count",
                  "type": "identifier",
                },
                "name": "constant_pool",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "CP_INFO",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "CONSTANT_POOL_COMPONENT",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "token",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "access_flags",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "access_flags",
                "type": "identifier",
              },
              "operator": "&",
              "right": Object {
                "type": "number",
                "value": 8,
              },
              "type": "binaryExpression",
            },
            "falseStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "name": "field_ref",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "INSTANCE_FIELD_REF",
                  },
                },
              ],
              "type": "statementList",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "name": "field_ref",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "STATIC_FIELD_REF",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
          Object {
            "annotations": Array [],
            "declaration": Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "annotations": Array [],
                    "declarations": Array [
                      Object {
                        "annotations": Array [],
                        "name": "primitive_type",
                      },
                    ],
                    "type": "variableDeclaration",
                    "variableType": Object {
                      "array": false,
                      "name": "ushort",
                    },
                  },
                  Object {
                    "annotations": Array [],
                    "declarations": Array [
                      Object {
                        "annotations": Array [],
                        "name": "reference_type",
                      },
                    ],
                    "type": "variableDeclaration",
                    "variableType": Object {
                      "array": false,
                      "name": "ushort",
                    },
                  },
                ],
                "type": "statementList",
              },
            },
            "name": "type",
            "type": "unionDeclaration",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "FIELD_DESCRIPTOR_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "token",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "access_flags",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "method_offset",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "type_offset",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "bytecode_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "exception_handler_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "exception_handler_index",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "bytecode_count",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "left": Object {
                    "expression": Object {
                      "name": "method_offsets",
                      "type": "identifier",
                    },
                    "index": Object {
                      "name": "tail_index",
                      "type": "identifier",
                    },
                    "type": "arrayIndexExpression",
                  },
                  "operator": "=",
                  "right": Object {
                    "name": "method_offset",
                    "type": "identifier",
                  },
                  "type": "binaryExpression",
                },
                Object {
                  "left": Object {
                    "expression": Object {
                      "name": "method_codesize",
                      "type": "identifier",
                    },
                    "index": Object {
                      "name": "tail_index",
                      "type": "identifier",
                    },
                    "type": "arrayIndexExpression",
                  },
                  "operator": "=",
                  "right": Object {
                    "name": "bytecode_count",
                    "type": "identifier",
                  },
                  "type": "binaryExpression",
                },
                Object {
                  "expression": Object {
                    "name": "tail_index",
                    "type": "identifier",
                  },
                  "operator": "++",
                  "type": "postfixExpression",
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "METHOD_DESCRIPTOR_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "token",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "access_flags",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "this_class_ref",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "CLASS_REF",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "interface_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "field_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "method_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "interface_count",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "optimize",
                      "value": Object {
                        "type": "boolean",
                        "value": false,
                      },
                    },
                  ],
                  "arraySelector": Object {
                    "name": "interface_count",
                    "type": "identifier",
                  },
                  "name": "interfaces",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "CLASS_REF",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "field_count",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "optimize",
                      "value": Object {
                        "type": "boolean",
                        "value": false,
                      },
                    },
                  ],
                  "arraySelector": Object {
                    "name": "field_count",
                    "type": "identifier",
                  },
                  "name": "fields",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "FIELD_DESCRIPTOR_INFO",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "method_count",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "optimize",
                          "value": Object {
                            "type": "boolean",
                            "value": false,
                          },
                        },
                      ],
                      "arraySelector": Object {
                        "name": "method_count",
                        "type": "identifier",
                      },
                      "name": "methods",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "METHOD_DESCRIPTOR_INFO",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "CLASS_DESCRIPTOR_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "tag",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "arguments": Array [],
                  "name": Object {
                    "name": "FTell",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "name": "start_index",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint64",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "class_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "class_count",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "optimize",
                      "value": Object {
                        "type": "boolean",
                        "value": false,
                      },
                    },
                  ],
                  "arraySelector": Object {
                    "name": "class_count",
                    "type": "identifier",
                  },
                  "name": "classes",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "CLASS_DESCRIPTOR_INFO",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "arguments": Array [],
                  "name": Object {
                    "name": "FTell",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "name": "desc_start_index",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint64",
            },
          },
          Object {
            "annotations": Array [],
            "declaration": Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "annotations": Array [],
                    "declarations": Array [
                      Object {
                        "annotations": Array [],
                        "name": "constant_pool_count",
                      },
                    ],
                    "type": "variableDeclaration",
                    "variableType": Object {
                      "array": false,
                      "name": "ushort",
                    },
                  },
                  Object {
                    "condition": Object {
                      "left": Object {
                        "name": "constant_pool_count",
                        "type": "identifier",
                      },
                      "operator": ">",
                      "right": Object {
                        "type": "number",
                        "value": 0,
                      },
                      "type": "binaryExpression",
                    },
                    "trueStatement": Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [],
                          "arraySelector": Object {
                            "name": "constant_pool_count",
                            "type": "identifier",
                          },
                          "name": "constant_pool_types",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "ushort",
                      },
                    },
                    "type": "ifStatement",
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "annotations": Array [],
                          "declarations": Array [
                            Object {
                              "annotations": Array [],
                              "name": "type_desc",
                            },
                          ],
                          "type": "variableDeclaration",
                          "variableType": Object {
                            "array": false,
                            "name": "TYPE_DESCRIPTOR",
                          },
                        },
                      ],
                      "type": "statementList",
                    },
                    "condition": Object {
                      "left": Object {
                        "arguments": Array [],
                        "name": Object {
                          "name": "FTell",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      "operator": "<",
                      "right": Object {
                        "left": Object {
                          "name": "start_index",
                          "type": "identifier",
                        },
                        "operator": "+",
                        "right": Object {
                          "name": "size",
                          "type": "identifier",
                        },
                        "type": "binaryExpression",
                      },
                      "type": "binaryExpression",
                    },
                    "type": "whileStatement",
                  },
                ],
                "type": "statementList",
              },
            },
            "name": "types",
            "type": "structDeclaration",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "DESCRIPTOR_COMPONENT",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "length",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "length",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [],
                  "arraySelector": Object {
                    "name": "length",
                    "type": "identifier",
                  },
                  "name": "bytes",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "uchar",
              },
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "UTF8_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "name_index",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "descriptor_index",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "access_flags",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "contents",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "FIELD_DEBUG_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "index",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "name_index",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "descriptor_index",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "start_pc",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "length",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "VARIABLE_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "start_pc",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "end_pc",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "source_line",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "LINE_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "name_index",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "descriptor_index",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "access_flags",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "location",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "header_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "body_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "variable_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "line_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "variable_count",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "optimize",
                      "value": Object {
                        "type": "boolean",
                        "value": false,
                      },
                    },
                  ],
                  "arraySelector": Object {
                    "name": "variable_count",
                    "type": "identifier",
                  },
                  "name": "variable_table",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "VARIABLE_INFO",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "line_count",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "optimize",
                      "value": Object {
                        "type": "boolean",
                        "value": false,
                      },
                    },
                  ],
                  "arraySelector": Object {
                    "name": "line_count",
                    "type": "identifier",
                  },
                  "name": "line_table",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "LINE_INFO",
              },
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "METHOD_DEBUG_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "name_index",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "access_flags",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "location",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "superclass_name_index",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "source_file_index",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "interface_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "field_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "method_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "interface_count",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "optimize",
                      "value": Object {
                        "type": "boolean",
                        "value": false,
                      },
                    },
                  ],
                  "arraySelector": Object {
                    "name": "interface_count",
                    "type": "identifier",
                  },
                  "name": "interface_names_indexes",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "ushort",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "field_count",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "optimize",
                      "value": Object {
                        "type": "boolean",
                        "value": false,
                      },
                    },
                  ],
                  "arraySelector": Object {
                    "name": "field_count",
                    "type": "identifier",
                  },
                  "name": "fields",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "FIELD_DEBUG_INFO",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "method_count",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "optimize",
                      "value": Object {
                        "type": "boolean",
                        "value": false,
                      },
                    },
                  ],
                  "arraySelector": Object {
                    "name": "method_count",
                    "type": "identifier",
                  },
                  "name": "methods",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "METHOD_DEBUG_INFO",
              },
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "CLASS_DEBUG_INFO",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "tag",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uchar",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "string_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "optimize",
                    "value": Object {
                      "type": "boolean",
                      "value": false,
                    },
                  },
                ],
                "arraySelector": Object {
                  "name": "string_count",
                  "type": "identifier",
                },
                "name": "strings_table",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "UTF8_INFO",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "package_name_index",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "class_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "optimize",
                    "value": Object {
                      "type": "boolean",
                      "value": false,
                    },
                  },
                ],
                "arraySelector": Object {
                  "name": "class_count",
                  "type": "identifier",
                },
                "name": "classes",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "CLASS_DEBUG_INFO",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "DEBUG_COMPONENT",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [],
        "initializer": Object {
          "type": "number",
          "value": 0,
        },
        "name": "method_comp_offset",
      },
    ],
    "local": true,
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "uint64",
    },
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [],
        "initializer": Object {
          "type": "boolean",
          "value": false,
        },
        "name": "descriptor_comp_decoded",
      },
    ],
    "local": true,
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "uchar",
    },
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [],
        "initializer": Object {
          "type": "boolean",
          "value": false,
        },
        "name": "method_comp_decoded",
      },
    ],
    "local": true,
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "uchar",
    },
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [],
        "initializer": Object {
          "type": "number",
          "value": 0,
        },
        "name": "current_file_rec_offset",
      },
    ],
    "local": true,
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "uint64",
    },
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [],
        "initializer": Object {
          "type": "number",
          "value": 0,
        },
        "name": "next_file_rec_offset",
      },
    ],
    "local": true,
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "uint64",
    },
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "arraySelector": Object {
                  "type": "number",
                  "value": 4,
                },
                "name": "signature",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "char",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "version",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "flags",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "mode",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "COMPTYPE",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "mode",
                "type": "identifier",
              },
              "operator": "!=",
              "right": Object {
                "name": "COMP_STORED",
                "type": "identifier",
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "assignmentExpression": Object {
                "string": "Not a valid CAP file",
                "type": "string",
              },
              "type": "returnStatement",
            },
            "type": "ifStatement",
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "filetime",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DOSTIME",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "filedate",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DOSDATE",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "crc",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "comp_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "uncomp_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "filename_length",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "extrafield_length",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "filename_length",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [],
                  "arraySelector": Object {
                    "name": "filename_length",
                    "type": "identifier",
                  },
                  "name": "filename",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "char",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "extrafield_length",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [],
                  "arraySelector": Object {
                    "name": "extrafield_length",
                    "type": "identifier",
                  },
                  "name": "extrafield",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "uchar",
              },
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "CAPFILEHEADER",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "ReadCAPFILERECORD",
          "type": "identifier",
        },
      },
      Object {
        "key": "write",
        "value": Object {
          "name": "WriteCAPFILERECORD",
          "type": "identifier",
        },
      },
      Object {
        "key": "size",
        "value": Object {
          "name": "SizeCAPFILERECORD",
          "type": "identifier",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "header",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "CAPFILEHEADER",
            },
          },
          Object {
            "arguments": Array [
              Object {
                "name": "cNone",
                "type": "identifier",
              },
            ],
            "name": Object {
              "name": "SetBackColor",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          Object {
            "arguments": Array [],
            "name": Object {
              "name": "BigEndian",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          Object {
            "condition": Object {
              "left": Object {
                "arguments": Array [
                  Object {
                    "arguments": Array [
                      Object {
                        "expression": Object {
                          "name": "header",
                          "type": "identifier",
                        },
                        "name": "filename",
                        "type": "propertyAccessExpression",
                      },
                    ],
                    "name": Object {
                      "name": "FileNameGetBase",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  Object {
                    "string": "header.cap",
                    "type": "string",
                  },
                ],
                "name": Object {
                  "name": "Stricmp",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "operator": "==",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "falseStatement": Object {
              "condition": Object {
                "left": Object {
                  "arguments": Array [
                    Object {
                      "arguments": Array [
                        Object {
                          "expression": Object {
                            "name": "header",
                            "type": "identifier",
                          },
                          "name": "filename",
                          "type": "propertyAccessExpression",
                        },
                      ],
                      "name": Object {
                        "name": "FileNameGetBase",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    Object {
                      "string": "directory.cap",
                      "type": "string",
                    },
                  ],
                  "name": Object {
                    "name": "Stricmp",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "operator": "==",
                "right": Object {
                  "type": "number",
                  "value": 0,
                },
                "type": "binaryExpression",
              },
              "falseStatement": Object {
                "condition": Object {
                  "left": Object {
                    "arguments": Array [
                      Object {
                        "arguments": Array [
                          Object {
                            "expression": Object {
                              "name": "header",
                              "type": "identifier",
                            },
                            "name": "filename",
                            "type": "propertyAccessExpression",
                          },
                        ],
                        "name": Object {
                          "name": "FileNameGetBase",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      Object {
                        "string": "applet.cap",
                        "type": "string",
                      },
                    ],
                    "name": Object {
                      "name": "Stricmp",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  "operator": "==",
                  "right": Object {
                    "type": "number",
                    "value": 0,
                  },
                  "type": "binaryExpression",
                },
                "falseStatement": Object {
                  "condition": Object {
                    "left": Object {
                      "arguments": Array [
                        Object {
                          "arguments": Array [
                            Object {
                              "expression": Object {
                                "name": "header",
                                "type": "identifier",
                              },
                              "name": "filename",
                              "type": "propertyAccessExpression",
                            },
                          ],
                          "name": Object {
                            "name": "FileNameGetBase",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                        Object {
                          "string": "class.cap",
                          "type": "string",
                        },
                      ],
                      "name": Object {
                        "name": "Stricmp",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    "operator": "==",
                    "right": Object {
                      "type": "number",
                      "value": 0,
                    },
                    "type": "binaryExpression",
                  },
                  "falseStatement": Object {
                    "condition": Object {
                      "left": Object {
                        "arguments": Array [
                          Object {
                            "arguments": Array [
                              Object {
                                "expression": Object {
                                  "name": "header",
                                  "type": "identifier",
                                },
                                "name": "filename",
                                "type": "propertyAccessExpression",
                              },
                            ],
                            "name": Object {
                              "name": "FileNameGetBase",
                              "type": "identifier",
                            },
                            "type": "functionCallExpression",
                          },
                          Object {
                            "string": "import.cap",
                            "type": "string",
                          },
                        ],
                        "name": Object {
                          "name": "Stricmp",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      "operator": "==",
                      "right": Object {
                        "type": "number",
                        "value": 0,
                      },
                      "type": "binaryExpression",
                    },
                    "falseStatement": Object {
                      "condition": Object {
                        "left": Object {
                          "arguments": Array [
                            Object {
                              "arguments": Array [
                                Object {
                                  "expression": Object {
                                    "name": "header",
                                    "type": "identifier",
                                  },
                                  "name": "filename",
                                  "type": "propertyAccessExpression",
                                },
                              ],
                              "name": Object {
                                "name": "FileNameGetBase",
                                "type": "identifier",
                              },
                              "type": "functionCallExpression",
                            },
                            Object {
                              "string": "constantpool.cap",
                              "type": "string",
                            },
                          ],
                          "name": Object {
                            "name": "Stricmp",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                        "operator": "==",
                        "right": Object {
                          "type": "number",
                          "value": 0,
                        },
                        "type": "binaryExpression",
                      },
                      "falseStatement": Object {
                        "condition": Object {
                          "left": Object {
                            "arguments": Array [
                              Object {
                                "arguments": Array [
                                  Object {
                                    "expression": Object {
                                      "name": "header",
                                      "type": "identifier",
                                    },
                                    "name": "filename",
                                    "type": "propertyAccessExpression",
                                  },
                                ],
                                "name": Object {
                                  "name": "FileNameGetBase",
                                  "type": "identifier",
                                },
                                "type": "functionCallExpression",
                              },
                              Object {
                                "string": "method.cap",
                                "type": "string",
                              },
                            ],
                            "name": Object {
                              "name": "Stricmp",
                              "type": "identifier",
                            },
                            "type": "functionCallExpression",
                          },
                          "operator": "==",
                          "right": Object {
                            "type": "number",
                            "value": 0,
                          },
                          "type": "binaryExpression",
                        },
                        "falseStatement": Object {
                          "condition": Object {
                            "left": Object {
                              "arguments": Array [
                                Object {
                                  "arguments": Array [
                                    Object {
                                      "expression": Object {
                                        "name": "header",
                                        "type": "identifier",
                                      },
                                      "name": "filename",
                                      "type": "propertyAccessExpression",
                                    },
                                  ],
                                  "name": Object {
                                    "name": "FileNameGetBase",
                                    "type": "identifier",
                                  },
                                  "type": "functionCallExpression",
                                },
                                Object {
                                  "string": "staticfield.cap",
                                  "type": "string",
                                },
                              ],
                              "name": Object {
                                "name": "Stricmp",
                                "type": "identifier",
                              },
                              "type": "functionCallExpression",
                            },
                            "operator": "==",
                            "right": Object {
                              "type": "number",
                              "value": 0,
                            },
                            "type": "binaryExpression",
                          },
                          "falseStatement": Object {
                            "condition": Object {
                              "left": Object {
                                "arguments": Array [
                                  Object {
                                    "arguments": Array [
                                      Object {
                                        "expression": Object {
                                          "name": "header",
                                          "type": "identifier",
                                        },
                                        "name": "filename",
                                        "type": "propertyAccessExpression",
                                      },
                                    ],
                                    "name": Object {
                                      "name": "FileNameGetBase",
                                      "type": "identifier",
                                    },
                                    "type": "functionCallExpression",
                                  },
                                  Object {
                                    "string": "reflocation.cap",
                                    "type": "string",
                                  },
                                ],
                                "name": Object {
                                  "name": "Stricmp",
                                  "type": "identifier",
                                },
                                "type": "functionCallExpression",
                              },
                              "operator": "==",
                              "right": Object {
                                "type": "number",
                                "value": 0,
                              },
                              "type": "binaryExpression",
                            },
                            "falseStatement": Object {
                              "condition": Object {
                                "left": Object {
                                  "arguments": Array [
                                    Object {
                                      "arguments": Array [
                                        Object {
                                          "expression": Object {
                                            "name": "header",
                                            "type": "identifier",
                                          },
                                          "name": "filename",
                                          "type": "propertyAccessExpression",
                                        },
                                      ],
                                      "name": Object {
                                        "name": "FileNameGetBase",
                                        "type": "identifier",
                                      },
                                      "type": "functionCallExpression",
                                    },
                                    Object {
                                      "string": "export.cap",
                                      "type": "string",
                                    },
                                  ],
                                  "name": Object {
                                    "name": "Stricmp",
                                    "type": "identifier",
                                  },
                                  "type": "functionCallExpression",
                                },
                                "operator": "==",
                                "right": Object {
                                  "type": "number",
                                  "value": 0,
                                },
                                "type": "binaryExpression",
                              },
                              "falseStatement": Object {
                                "condition": Object {
                                  "left": Object {
                                    "arguments": Array [
                                      Object {
                                        "arguments": Array [
                                          Object {
                                            "expression": Object {
                                              "name": "header",
                                              "type": "identifier",
                                            },
                                            "name": "filename",
                                            "type": "propertyAccessExpression",
                                          },
                                        ],
                                        "name": Object {
                                          "name": "FileNameGetBase",
                                          "type": "identifier",
                                        },
                                        "type": "functionCallExpression",
                                      },
                                      Object {
                                        "string": "descriptor.cap",
                                        "type": "string",
                                      },
                                    ],
                                    "name": Object {
                                      "name": "Stricmp",
                                      "type": "identifier",
                                    },
                                    "type": "functionCallExpression",
                                  },
                                  "operator": "==",
                                  "right": Object {
                                    "type": "number",
                                    "value": 0,
                                  },
                                  "type": "binaryExpression",
                                },
                                "falseStatement": Object {
                                  "condition": Object {
                                    "left": Object {
                                      "arguments": Array [
                                        Object {
                                          "arguments": Array [
                                            Object {
                                              "expression": Object {
                                                "name": "header",
                                                "type": "identifier",
                                              },
                                              "name": "filename",
                                              "type": "propertyAccessExpression",
                                            },
                                          ],
                                          "name": Object {
                                            "name": "FileNameGetBase",
                                            "type": "identifier",
                                          },
                                          "type": "functionCallExpression",
                                        },
                                        Object {
                                          "string": "debug.cap",
                                          "type": "string",
                                        },
                                      ],
                                      "name": Object {
                                        "name": "Stricmp",
                                        "type": "identifier",
                                      },
                                      "type": "functionCallExpression",
                                    },
                                    "operator": "==",
                                    "right": Object {
                                      "type": "number",
                                      "value": 0,
                                    },
                                    "type": "binaryExpression",
                                  },
                                  "trueStatement": Object {
                                    "statements": Array [
                                      Object {
                                        "annotations": Array [],
                                        "declarations": Array [
                                          Object {
                                            "annotations": Array [],
                                            "name": "debug_component",
                                          },
                                        ],
                                        "type": "variableDeclaration",
                                        "variableType": Object {
                                          "array": false,
                                          "name": "DEBUG_COMPONENT",
                                        },
                                      },
                                    ],
                                    "type": "statementList",
                                  },
                                  "type": "ifStatement",
                                },
                                "trueStatement": Object {
                                  "statements": Array [
                                    Object {
                                      "annotations": Array [],
                                      "declarations": Array [
                                        Object {
                                          "annotations": Array [],
                                          "name": "descriptor_component",
                                        },
                                      ],
                                      "type": "variableDeclaration",
                                      "variableType": Object {
                                        "array": false,
                                        "name": "DESCRIPTOR_COMPONENT",
                                      },
                                    },
                                    Object {
                                      "left": Object {
                                        "name": "descriptor_comp_decoded",
                                        "type": "identifier",
                                      },
                                      "operator": "=",
                                      "right": Object {
                                        "type": "boolean",
                                        "value": true,
                                      },
                                      "type": "binaryExpression",
                                    },
                                  ],
                                  "type": "statementList",
                                },
                                "type": "ifStatement",
                              },
                              "trueStatement": Object {
                                "statements": Array [
                                  Object {
                                    "annotations": Array [],
                                    "declarations": Array [
                                      Object {
                                        "annotations": Array [],
                                        "name": "export_component",
                                      },
                                    ],
                                    "type": "variableDeclaration",
                                    "variableType": Object {
                                      "array": false,
                                      "name": "EXPORT_COMPONENT",
                                    },
                                  },
                                ],
                                "type": "statementList",
                              },
                              "type": "ifStatement",
                            },
                            "trueStatement": Object {
                              "statements": Array [
                                Object {
                                  "annotations": Array [],
                                  "declarations": Array [
                                    Object {
                                      "annotations": Array [],
                                      "name": "refloc_component",
                                    },
                                  ],
                                  "type": "variableDeclaration",
                                  "variableType": Object {
                                    "array": false,
                                    "name": "REFERENCELOC_COMPONENT",
                                  },
                                },
                              ],
                              "type": "statementList",
                            },
                            "type": "ifStatement",
                          },
                          "trueStatement": Object {
                            "statements": Array [
                              Object {
                                "annotations": Array [],
                                "declarations": Array [
                                  Object {
                                    "annotations": Array [],
                                    "name": "staticfield_component",
                                  },
                                ],
                                "type": "variableDeclaration",
                                "variableType": Object {
                                  "array": false,
                                  "name": "STATICFIELD_COMPONENT",
                                },
                              },
                            ],
                            "type": "statementList",
                          },
                          "type": "ifStatement",
                        },
                        "trueStatement": Object {
                          "statements": Array [
                            Object {
                              "annotations": Array [],
                              "declarations": Array [
                                Object {
                                  "annotations": Array [],
                                  "name": "method_component",
                                },
                              ],
                              "type": "variableDeclaration",
                              "variableType": Object {
                                "array": false,
                                "name": "METHOD_COMPONENT",
                              },
                            },
                            Object {
                              "left": Object {
                                "name": "method_comp_decoded",
                                "type": "identifier",
                              },
                              "operator": "=",
                              "right": Object {
                                "type": "boolean",
                                "value": true,
                              },
                              "type": "binaryExpression",
                            },
                          ],
                          "type": "statementList",
                        },
                        "type": "ifStatement",
                      },
                      "trueStatement": Object {
                        "statements": Array [
                          Object {
                            "annotations": Array [],
                            "declarations": Array [
                              Object {
                                "annotations": Array [],
                                "name": "constantpool_component",
                              },
                            ],
                            "type": "variableDeclaration",
                            "variableType": Object {
                              "array": false,
                              "name": "CONSTANT_POOL_COMPONENT",
                            },
                          },
                        ],
                        "type": "statementList",
                      },
                      "type": "ifStatement",
                    },
                    "trueStatement": Object {
                      "statements": Array [
                        Object {
                          "annotations": Array [],
                          "declarations": Array [
                            Object {
                              "annotations": Array [],
                              "name": "import_component",
                            },
                          ],
                          "type": "variableDeclaration",
                          "variableType": Object {
                            "array": false,
                            "name": "IMPORT_COMPONENT",
                          },
                        },
                      ],
                      "type": "statementList",
                    },
                    "type": "ifStatement",
                  },
                  "trueStatement": Object {
                    "statements": Array [
                      Object {
                        "annotations": Array [],
                        "declarations": Array [
                          Object {
                            "annotations": Array [],
                            "name": "class_component",
                          },
                        ],
                        "type": "variableDeclaration",
                        "variableType": Object {
                          "array": false,
                          "name": "CLASS_COMPONENT",
                        },
                      },
                    ],
                    "type": "statementList",
                  },
                  "type": "ifStatement",
                },
                "trueStatement": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [],
                          "name": "applet_component",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "APPLET_COMPONENT",
                      },
                    },
                  ],
                  "type": "statementList",
                },
                "type": "ifStatement",
              },
              "trueStatement": Object {
                "statements": Array [
                  Object {
                    "annotations": Array [],
                    "declarations": Array [
                      Object {
                        "annotations": Array [],
                        "name": "directory_component",
                      },
                    ],
                    "type": "variableDeclaration",
                    "variableType": Object {
                      "array": false,
                      "name": "DIRECTORY_COMPONENT",
                    },
                  },
                ],
                "type": "statementList",
              },
              "type": "ifStatement",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "name": "header_component",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "HEADER_COMPONENT",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
          Object {
            "arguments": Array [],
            "name": Object {
              "name": "LittleEndian",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "CAPFILERECORD",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "left": Object {
              "left": Object {
                "left": Object {
                  "type": "number",
                  "value": 30,
                },
                "operator": "+",
                "right": Object {
                  "arguments": Array [
                    Object {
                      "left": Object {
                        "arguments": Array [
                          Object {
                            "name": "r",
                            "type": "identifier",
                          },
                        ],
                        "name": Object {
                          "name": "startof",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      "operator": "+",
                      "right": Object {
                        "type": "number",
                        "value": 18,
                      },
                      "type": "binaryExpression",
                    },
                  ],
                  "name": Object {
                    "name": "ReadUInt",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "type": "binaryExpression",
              },
              "operator": "+",
              "right": Object {
                "arguments": Array [
                  Object {
                    "left": Object {
                      "arguments": Array [
                        Object {
                          "name": "r",
                          "type": "identifier",
                        },
                      ],
                      "name": Object {
                        "name": "startof",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    "operator": "+",
                    "right": Object {
                      "type": "number",
                      "value": 26,
                    },
                    "type": "binaryExpression",
                  },
                ],
                "name": Object {
                  "name": "ReadUShort",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "type": "binaryExpression",
            },
            "operator": "+",
            "right": Object {
              "arguments": Array [
                Object {
                  "left": Object {
                    "arguments": Array [
                      Object {
                        "name": "r",
                        "type": "identifier",
                      },
                    ],
                    "name": Object {
                      "name": "startof",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  "operator": "+",
                  "right": Object {
                    "type": "number",
                    "value": 28,
                  },
                  "type": "binaryExpression",
                },
              ],
              "name": Object {
                "name": "ReadUShort",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
            "type": "binaryExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "SizeCAPFILERECORD",
    "parameters": Array [
      Object {
        "name": "r",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "CAPFILERECORD",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "int",
    },
    "type": "functionDeclaration",
  },
  Object {
    "type": "emptyStatement",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "ReadCAPDIRENTRY",
          "type": "identifier",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "arraySelector": Object {
                  "type": "number",
                  "value": 4,
                },
                "name": "signature",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "char",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "version_src",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "version_trgt",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "flags",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "mode",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "COMPTYPE",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "filetime",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DOSTIME",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "filedate",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DOSDATE",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "crc",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "comp_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "uncomp_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "filename_length",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "extrafield_length",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "comment_length",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "disknum_start",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "internal_attr",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "external_attr",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "offset_hdr",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "filename_length",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [],
                  "arraySelector": Object {
                    "name": "filename_length",
                    "type": "identifier",
                  },
                  "name": "filename",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "char",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "extrafield_length",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [],
                  "arraySelector": Object {
                    "name": "extrafield_length",
                    "type": "identifier",
                  },
                  "name": "extrafield",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "uchar",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "comment_length",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [],
                  "arraySelector": Object {
                    "name": "comment_length",
                    "type": "identifier",
                  },
                  "name": "comment",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "uchar",
              },
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "CAPDIRENTRY",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "arraySelector": Object {
                  "type": "number",
                  "value": 4,
                },
                "name": "signature",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "char",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "data_length",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "data_length",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [],
                  "arraySelector": Object {
                    "name": "data_length",
                    "type": "identifier",
                  },
                  "name": "data",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "uchar",
              },
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "CAPDIGITALSIG",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "arraySelector": Object {
                  "type": "number",
                  "value": 4,
                },
                "name": "signature",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "char",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "crc",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "comp_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "uncomp_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "CAPDATADESCR",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "arraySelector": Object {
                  "type": "number",
                  "value": 4,
                },
                "name": "signature",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "char",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "disknum",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "disknum_start",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "disk_entries",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "directory_entries",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "directory_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "directory_offset",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "comment_length",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "comment_length",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [],
                  "arraySelector": Object {
                    "name": "comment_length",
                    "type": "identifier",
                  },
                  "name": "comment",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "char",
              },
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "CAPENDLOCATOR",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "condition": Object {
            "arguments": Array [
              Object {
                "expression": Object {
                  "expression": Object {
                    "name": "file",
                    "type": "identifier",
                  },
                  "name": "header",
                  "type": "propertyAccessExpression",
                },
                "name": "filename",
                "type": "propertyAccessExpression",
              },
            ],
            "name": Object {
              "name": "exists",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "condition": Object {
                  "left": Object {
                    "arguments": Array [
                      Object {
                        "arguments": Array [
                          Object {
                            "expression": Object {
                              "expression": Object {
                                "name": "file",
                                "type": "identifier",
                              },
                              "name": "header",
                              "type": "propertyAccessExpression",
                            },
                            "name": "filename",
                            "type": "propertyAccessExpression",
                          },
                        ],
                        "name": Object {
                          "name": "FileNameGetBase",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      Object {
                        "string": "header.cap",
                        "type": "string",
                      },
                    ],
                    "name": Object {
                      "name": "Stricmp",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  "operator": "==",
                  "right": Object {
                    "type": "number",
                    "value": 0,
                  },
                  "type": "binaryExpression",
                },
                "falseStatement": Object {
                  "condition": Object {
                    "left": Object {
                      "arguments": Array [
                        Object {
                          "arguments": Array [
                            Object {
                              "expression": Object {
                                "expression": Object {
                                  "name": "file",
                                  "type": "identifier",
                                },
                                "name": "header",
                                "type": "propertyAccessExpression",
                              },
                              "name": "filename",
                              "type": "propertyAccessExpression",
                            },
                          ],
                          "name": Object {
                            "name": "FileNameGetBase",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                        Object {
                          "string": "directory.cap",
                          "type": "string",
                        },
                      ],
                      "name": Object {
                        "name": "Stricmp",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    "operator": "==",
                    "right": Object {
                      "type": "number",
                      "value": 0,
                    },
                    "type": "binaryExpression",
                  },
                  "falseStatement": Object {
                    "condition": Object {
                      "left": Object {
                        "arguments": Array [
                          Object {
                            "arguments": Array [
                              Object {
                                "expression": Object {
                                  "expression": Object {
                                    "name": "file",
                                    "type": "identifier",
                                  },
                                  "name": "header",
                                  "type": "propertyAccessExpression",
                                },
                                "name": "filename",
                                "type": "propertyAccessExpression",
                              },
                            ],
                            "name": Object {
                              "name": "FileNameGetBase",
                              "type": "identifier",
                            },
                            "type": "functionCallExpression",
                          },
                          Object {
                            "string": "applet.cap",
                            "type": "string",
                          },
                        ],
                        "name": Object {
                          "name": "Stricmp",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      "operator": "==",
                      "right": Object {
                        "type": "number",
                        "value": 0,
                      },
                      "type": "binaryExpression",
                    },
                    "falseStatement": Object {
                      "condition": Object {
                        "left": Object {
                          "arguments": Array [
                            Object {
                              "arguments": Array [
                                Object {
                                  "expression": Object {
                                    "expression": Object {
                                      "name": "file",
                                      "type": "identifier",
                                    },
                                    "name": "header",
                                    "type": "propertyAccessExpression",
                                  },
                                  "name": "filename",
                                  "type": "propertyAccessExpression",
                                },
                              ],
                              "name": Object {
                                "name": "FileNameGetBase",
                                "type": "identifier",
                              },
                              "type": "functionCallExpression",
                            },
                            Object {
                              "string": "class.cap",
                              "type": "string",
                            },
                          ],
                          "name": Object {
                            "name": "Stricmp",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                        "operator": "==",
                        "right": Object {
                          "type": "number",
                          "value": 0,
                        },
                        "type": "binaryExpression",
                      },
                      "falseStatement": Object {
                        "condition": Object {
                          "left": Object {
                            "arguments": Array [
                              Object {
                                "arguments": Array [
                                  Object {
                                    "expression": Object {
                                      "expression": Object {
                                        "name": "file",
                                        "type": "identifier",
                                      },
                                      "name": "header",
                                      "type": "propertyAccessExpression",
                                    },
                                    "name": "filename",
                                    "type": "propertyAccessExpression",
                                  },
                                ],
                                "name": Object {
                                  "name": "FileNameGetBase",
                                  "type": "identifier",
                                },
                                "type": "functionCallExpression",
                              },
                              Object {
                                "string": "import.cap",
                                "type": "string",
                              },
                            ],
                            "name": Object {
                              "name": "Stricmp",
                              "type": "identifier",
                            },
                            "type": "functionCallExpression",
                          },
                          "operator": "==",
                          "right": Object {
                            "type": "number",
                            "value": 0,
                          },
                          "type": "binaryExpression",
                        },
                        "falseStatement": Object {
                          "condition": Object {
                            "left": Object {
                              "arguments": Array [
                                Object {
                                  "arguments": Array [
                                    Object {
                                      "expression": Object {
                                        "expression": Object {
                                          "name": "file",
                                          "type": "identifier",
                                        },
                                        "name": "header",
                                        "type": "propertyAccessExpression",
                                      },
                                      "name": "filename",
                                      "type": "propertyAccessExpression",
                                    },
                                  ],
                                  "name": Object {
                                    "name": "FileNameGetBase",
                                    "type": "identifier",
                                  },
                                  "type": "functionCallExpression",
                                },
                                Object {
                                  "string": "constantpool.cap",
                                  "type": "string",
                                },
                              ],
                              "name": Object {
                                "name": "Stricmp",
                                "type": "identifier",
                              },
                              "type": "functionCallExpression",
                            },
                            "operator": "==",
                            "right": Object {
                              "type": "number",
                              "value": 0,
                            },
                            "type": "binaryExpression",
                          },
                          "falseStatement": Object {
                            "condition": Object {
                              "left": Object {
                                "arguments": Array [
                                  Object {
                                    "arguments": Array [
                                      Object {
                                        "expression": Object {
                                          "expression": Object {
                                            "name": "file",
                                            "type": "identifier",
                                          },
                                          "name": "header",
                                          "type": "propertyAccessExpression",
                                        },
                                        "name": "filename",
                                        "type": "propertyAccessExpression",
                                      },
                                    ],
                                    "name": Object {
                                      "name": "FileNameGetBase",
                                      "type": "identifier",
                                    },
                                    "type": "functionCallExpression",
                                  },
                                  Object {
                                    "string": "method.cap",
                                    "type": "string",
                                  },
                                ],
                                "name": Object {
                                  "name": "Stricmp",
                                  "type": "identifier",
                                },
                                "type": "functionCallExpression",
                              },
                              "operator": "==",
                              "right": Object {
                                "type": "number",
                                "value": 0,
                              },
                              "type": "binaryExpression",
                            },
                            "falseStatement": Object {
                              "condition": Object {
                                "left": Object {
                                  "arguments": Array [
                                    Object {
                                      "arguments": Array [
                                        Object {
                                          "expression": Object {
                                            "expression": Object {
                                              "name": "file",
                                              "type": "identifier",
                                            },
                                            "name": "header",
                                            "type": "propertyAccessExpression",
                                          },
                                          "name": "filename",
                                          "type": "propertyAccessExpression",
                                        },
                                      ],
                                      "name": Object {
                                        "name": "FileNameGetBase",
                                        "type": "identifier",
                                      },
                                      "type": "functionCallExpression",
                                    },
                                    Object {
                                      "string": "staticfield.cap",
                                      "type": "string",
                                    },
                                  ],
                                  "name": Object {
                                    "name": "Stricmp",
                                    "type": "identifier",
                                  },
                                  "type": "functionCallExpression",
                                },
                                "operator": "==",
                                "right": Object {
                                  "type": "number",
                                  "value": 0,
                                },
                                "type": "binaryExpression",
                              },
                              "falseStatement": Object {
                                "condition": Object {
                                  "left": Object {
                                    "arguments": Array [
                                      Object {
                                        "arguments": Array [
                                          Object {
                                            "expression": Object {
                                              "expression": Object {
                                                "name": "file",
                                                "type": "identifier",
                                              },
                                              "name": "header",
                                              "type": "propertyAccessExpression",
                                            },
                                            "name": "filename",
                                            "type": "propertyAccessExpression",
                                          },
                                        ],
                                        "name": Object {
                                          "name": "FileNameGetBase",
                                          "type": "identifier",
                                        },
                                        "type": "functionCallExpression",
                                      },
                                      Object {
                                        "string": "reflocation.cap",
                                        "type": "string",
                                      },
                                    ],
                                    "name": Object {
                                      "name": "Stricmp",
                                      "type": "identifier",
                                    },
                                    "type": "functionCallExpression",
                                  },
                                  "operator": "==",
                                  "right": Object {
                                    "type": "number",
                                    "value": 0,
                                  },
                                  "type": "binaryExpression",
                                },
                                "falseStatement": Object {
                                  "condition": Object {
                                    "left": Object {
                                      "arguments": Array [
                                        Object {
                                          "arguments": Array [
                                            Object {
                                              "expression": Object {
                                                "expression": Object {
                                                  "name": "file",
                                                  "type": "identifier",
                                                },
                                                "name": "header",
                                                "type": "propertyAccessExpression",
                                              },
                                              "name": "filename",
                                              "type": "propertyAccessExpression",
                                            },
                                          ],
                                          "name": Object {
                                            "name": "FileNameGetBase",
                                            "type": "identifier",
                                          },
                                          "type": "functionCallExpression",
                                        },
                                        Object {
                                          "string": "export.cap",
                                          "type": "string",
                                        },
                                      ],
                                      "name": Object {
                                        "name": "Stricmp",
                                        "type": "identifier",
                                      },
                                      "type": "functionCallExpression",
                                    },
                                    "operator": "==",
                                    "right": Object {
                                      "type": "number",
                                      "value": 0,
                                    },
                                    "type": "binaryExpression",
                                  },
                                  "falseStatement": Object {
                                    "condition": Object {
                                      "left": Object {
                                        "arguments": Array [
                                          Object {
                                            "arguments": Array [
                                              Object {
                                                "expression": Object {
                                                  "expression": Object {
                                                    "name": "file",
                                                    "type": "identifier",
                                                  },
                                                  "name": "header",
                                                  "type": "propertyAccessExpression",
                                                },
                                                "name": "filename",
                                                "type": "propertyAccessExpression",
                                              },
                                            ],
                                            "name": Object {
                                              "name": "FileNameGetBase",
                                              "type": "identifier",
                                            },
                                            "type": "functionCallExpression",
                                          },
                                          Object {
                                            "string": "descriptor.cap",
                                            "type": "string",
                                          },
                                        ],
                                        "name": Object {
                                          "name": "Stricmp",
                                          "type": "identifier",
                                        },
                                        "type": "functionCallExpression",
                                      },
                                      "operator": "==",
                                      "right": Object {
                                        "type": "number",
                                        "value": 0,
                                      },
                                      "type": "binaryExpression",
                                    },
                                    "falseStatement": Object {
                                      "condition": Object {
                                        "left": Object {
                                          "arguments": Array [
                                            Object {
                                              "arguments": Array [
                                                Object {
                                                  "expression": Object {
                                                    "expression": Object {
                                                      "name": "file",
                                                      "type": "identifier",
                                                    },
                                                    "name": "header",
                                                    "type": "propertyAccessExpression",
                                                  },
                                                  "name": "filename",
                                                  "type": "propertyAccessExpression",
                                                },
                                              ],
                                              "name": Object {
                                                "name": "FileNameGetBase",
                                                "type": "identifier",
                                              },
                                              "type": "functionCallExpression",
                                            },
                                            Object {
                                              "string": "debug.cap",
                                              "type": "string",
                                            },
                                          ],
                                          "name": Object {
                                            "name": "Stricmp",
                                            "type": "identifier",
                                          },
                                          "type": "functionCallExpression",
                                        },
                                        "operator": "==",
                                        "right": Object {
                                          "type": "number",
                                          "value": 0,
                                        },
                                        "type": "binaryExpression",
                                      },
                                      "trueStatement": Object {
                                        "statements": Array [
                                          Object {
                                            "assignmentExpression": Object {
                                              "string": "Debug",
                                              "type": "string",
                                            },
                                            "type": "returnStatement",
                                          },
                                        ],
                                        "type": "statementList",
                                      },
                                      "type": "ifStatement",
                                    },
                                    "trueStatement": Object {
                                      "statements": Array [
                                        Object {
                                          "assignmentExpression": Object {
                                            "string": "Descriptor",
                                            "type": "string",
                                          },
                                          "type": "returnStatement",
                                        },
                                      ],
                                      "type": "statementList",
                                    },
                                    "type": "ifStatement",
                                  },
                                  "trueStatement": Object {
                                    "statements": Array [
                                      Object {
                                        "assignmentExpression": Object {
                                          "string": "Export",
                                          "type": "string",
                                        },
                                        "type": "returnStatement",
                                      },
                                    ],
                                    "type": "statementList",
                                  },
                                  "type": "ifStatement",
                                },
                                "trueStatement": Object {
                                  "statements": Array [
                                    Object {
                                      "assignmentExpression": Object {
                                        "string": "ReferenceLocation",
                                        "type": "string",
                                      },
                                      "type": "returnStatement",
                                    },
                                  ],
                                  "type": "statementList",
                                },
                                "type": "ifStatement",
                              },
                              "trueStatement": Object {
                                "statements": Array [
                                  Object {
                                    "assignmentExpression": Object {
                                      "string": "StaticField",
                                      "type": "string",
                                    },
                                    "type": "returnStatement",
                                  },
                                ],
                                "type": "statementList",
                              },
                              "type": "ifStatement",
                            },
                            "trueStatement": Object {
                              "statements": Array [
                                Object {
                                  "assignmentExpression": Object {
                                    "string": "Method",
                                    "type": "string",
                                  },
                                  "type": "returnStatement",
                                },
                              ],
                              "type": "statementList",
                            },
                            "type": "ifStatement",
                          },
                          "trueStatement": Object {
                            "statements": Array [
                              Object {
                                "assignmentExpression": Object {
                                  "string": "ConstantPool",
                                  "type": "string",
                                },
                                "type": "returnStatement",
                              },
                            ],
                            "type": "statementList",
                          },
                          "type": "ifStatement",
                        },
                        "trueStatement": Object {
                          "statements": Array [
                            Object {
                              "assignmentExpression": Object {
                                "string": "Import",
                                "type": "string",
                              },
                              "type": "returnStatement",
                            },
                          ],
                          "type": "statementList",
                        },
                        "type": "ifStatement",
                      },
                      "trueStatement": Object {
                        "statements": Array [
                          Object {
                            "assignmentExpression": Object {
                              "string": "Class",
                              "type": "string",
                            },
                            "type": "returnStatement",
                          },
                        ],
                        "type": "statementList",
                      },
                      "type": "ifStatement",
                    },
                    "trueStatement": Object {
                      "statements": Array [
                        Object {
                          "assignmentExpression": Object {
                            "string": "Applet",
                            "type": "string",
                          },
                          "type": "returnStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "type": "ifStatement",
                  },
                  "trueStatement": Object {
                    "statements": Array [
                      Object {
                        "assignmentExpression": Object {
                          "string": "Directory",
                          "type": "string",
                        },
                        "type": "returnStatement",
                      },
                    ],
                    "type": "statementList",
                  },
                  "type": "ifStatement",
                },
                "trueStatement": Object {
                  "statements": Array [
                    Object {
                      "assignmentExpression": Object {
                        "string": "Header",
                        "type": "string",
                      },
                      "type": "returnStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "type": "ifStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "assignmentExpression": Object {
            "string": "",
            "type": "string",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ReadCAPFILERECORD",
    "parameters": Array [
      Object {
        "name": "file",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "CAPFILERECORD",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "condition": Object {
            "arguments": Array [
              Object {
                "expression": Object {
                  "name": "entry",
                  "type": "identifier",
                },
                "name": "filename",
                "type": "propertyAccessExpression",
              },
            ],
            "name": Object {
              "name": "exists",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "condition": Object {
                  "left": Object {
                    "arguments": Array [
                      Object {
                        "arguments": Array [
                          Object {
                            "expression": Object {
                              "name": "entry",
                              "type": "identifier",
                            },
                            "name": "filename",
                            "type": "propertyAccessExpression",
                          },
                        ],
                        "name": Object {
                          "name": "FileNameGetBase",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      Object {
                        "string": "header.cap",
                        "type": "string",
                      },
                    ],
                    "name": Object {
                      "name": "Stricmp",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  "operator": "==",
                  "right": Object {
                    "type": "number",
                    "value": 0,
                  },
                  "type": "binaryExpression",
                },
                "falseStatement": Object {
                  "condition": Object {
                    "left": Object {
                      "arguments": Array [
                        Object {
                          "arguments": Array [
                            Object {
                              "expression": Object {
                                "name": "entry",
                                "type": "identifier",
                              },
                              "name": "filename",
                              "type": "propertyAccessExpression",
                            },
                          ],
                          "name": Object {
                            "name": "FileNameGetBase",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                        Object {
                          "string": "directory.cap",
                          "type": "string",
                        },
                      ],
                      "name": Object {
                        "name": "Stricmp",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    "operator": "==",
                    "right": Object {
                      "type": "number",
                      "value": 0,
                    },
                    "type": "binaryExpression",
                  },
                  "falseStatement": Object {
                    "condition": Object {
                      "left": Object {
                        "arguments": Array [
                          Object {
                            "arguments": Array [
                              Object {
                                "expression": Object {
                                  "name": "entry",
                                  "type": "identifier",
                                },
                                "name": "filename",
                                "type": "propertyAccessExpression",
                              },
                            ],
                            "name": Object {
                              "name": "FileNameGetBase",
                              "type": "identifier",
                            },
                            "type": "functionCallExpression",
                          },
                          Object {
                            "string": "applet.cap",
                            "type": "string",
                          },
                        ],
                        "name": Object {
                          "name": "Stricmp",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      "operator": "==",
                      "right": Object {
                        "type": "number",
                        "value": 0,
                      },
                      "type": "binaryExpression",
                    },
                    "falseStatement": Object {
                      "condition": Object {
                        "left": Object {
                          "arguments": Array [
                            Object {
                              "arguments": Array [
                                Object {
                                  "expression": Object {
                                    "name": "entry",
                                    "type": "identifier",
                                  },
                                  "name": "filename",
                                  "type": "propertyAccessExpression",
                                },
                              ],
                              "name": Object {
                                "name": "FileNameGetBase",
                                "type": "identifier",
                              },
                              "type": "functionCallExpression",
                            },
                            Object {
                              "string": "class.cap",
                              "type": "string",
                            },
                          ],
                          "name": Object {
                            "name": "Stricmp",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                        "operator": "==",
                        "right": Object {
                          "type": "number",
                          "value": 0,
                        },
                        "type": "binaryExpression",
                      },
                      "falseStatement": Object {
                        "condition": Object {
                          "left": Object {
                            "arguments": Array [
                              Object {
                                "arguments": Array [
                                  Object {
                                    "expression": Object {
                                      "name": "entry",
                                      "type": "identifier",
                                    },
                                    "name": "filename",
                                    "type": "propertyAccessExpression",
                                  },
                                ],
                                "name": Object {
                                  "name": "FileNameGetBase",
                                  "type": "identifier",
                                },
                                "type": "functionCallExpression",
                              },
                              Object {
                                "string": "import.cap",
                                "type": "string",
                              },
                            ],
                            "name": Object {
                              "name": "Stricmp",
                              "type": "identifier",
                            },
                            "type": "functionCallExpression",
                          },
                          "operator": "==",
                          "right": Object {
                            "type": "number",
                            "value": 0,
                          },
                          "type": "binaryExpression",
                        },
                        "falseStatement": Object {
                          "condition": Object {
                            "left": Object {
                              "arguments": Array [
                                Object {
                                  "arguments": Array [
                                    Object {
                                      "expression": Object {
                                        "name": "entry",
                                        "type": "identifier",
                                      },
                                      "name": "filename",
                                      "type": "propertyAccessExpression",
                                    },
                                  ],
                                  "name": Object {
                                    "name": "FileNameGetBase",
                                    "type": "identifier",
                                  },
                                  "type": "functionCallExpression",
                                },
                                Object {
                                  "string": "constantpool.cap",
                                  "type": "string",
                                },
                              ],
                              "name": Object {
                                "name": "Stricmp",
                                "type": "identifier",
                              },
                              "type": "functionCallExpression",
                            },
                            "operator": "==",
                            "right": Object {
                              "type": "number",
                              "value": 0,
                            },
                            "type": "binaryExpression",
                          },
                          "falseStatement": Object {
                            "condition": Object {
                              "left": Object {
                                "arguments": Array [
                                  Object {
                                    "arguments": Array [
                                      Object {
                                        "expression": Object {
                                          "name": "entry",
                                          "type": "identifier",
                                        },
                                        "name": "filename",
                                        "type": "propertyAccessExpression",
                                      },
                                    ],
                                    "name": Object {
                                      "name": "FileNameGetBase",
                                      "type": "identifier",
                                    },
                                    "type": "functionCallExpression",
                                  },
                                  Object {
                                    "string": "method.cap",
                                    "type": "string",
                                  },
                                ],
                                "name": Object {
                                  "name": "Stricmp",
                                  "type": "identifier",
                                },
                                "type": "functionCallExpression",
                              },
                              "operator": "==",
                              "right": Object {
                                "type": "number",
                                "value": 0,
                              },
                              "type": "binaryExpression",
                            },
                            "falseStatement": Object {
                              "condition": Object {
                                "left": Object {
                                  "arguments": Array [
                                    Object {
                                      "arguments": Array [
                                        Object {
                                          "expression": Object {
                                            "name": "entry",
                                            "type": "identifier",
                                          },
                                          "name": "filename",
                                          "type": "propertyAccessExpression",
                                        },
                                      ],
                                      "name": Object {
                                        "name": "FileNameGetBase",
                                        "type": "identifier",
                                      },
                                      "type": "functionCallExpression",
                                    },
                                    Object {
                                      "string": "staticfield.cap",
                                      "type": "string",
                                    },
                                  ],
                                  "name": Object {
                                    "name": "Stricmp",
                                    "type": "identifier",
                                  },
                                  "type": "functionCallExpression",
                                },
                                "operator": "==",
                                "right": Object {
                                  "type": "number",
                                  "value": 0,
                                },
                                "type": "binaryExpression",
                              },
                              "falseStatement": Object {
                                "condition": Object {
                                  "left": Object {
                                    "arguments": Array [
                                      Object {
                                        "arguments": Array [
                                          Object {
                                            "expression": Object {
                                              "name": "entry",
                                              "type": "identifier",
                                            },
                                            "name": "filename",
                                            "type": "propertyAccessExpression",
                                          },
                                        ],
                                        "name": Object {
                                          "name": "FileNameGetBase",
                                          "type": "identifier",
                                        },
                                        "type": "functionCallExpression",
                                      },
                                      Object {
                                        "string": "reflocation.cap",
                                        "type": "string",
                                      },
                                    ],
                                    "name": Object {
                                      "name": "Stricmp",
                                      "type": "identifier",
                                    },
                                    "type": "functionCallExpression",
                                  },
                                  "operator": "==",
                                  "right": Object {
                                    "type": "number",
                                    "value": 0,
                                  },
                                  "type": "binaryExpression",
                                },
                                "falseStatement": Object {
                                  "condition": Object {
                                    "left": Object {
                                      "arguments": Array [
                                        Object {
                                          "arguments": Array [
                                            Object {
                                              "expression": Object {
                                                "name": "entry",
                                                "type": "identifier",
                                              },
                                              "name": "filename",
                                              "type": "propertyAccessExpression",
                                            },
                                          ],
                                          "name": Object {
                                            "name": "FileNameGetBase",
                                            "type": "identifier",
                                          },
                                          "type": "functionCallExpression",
                                        },
                                        Object {
                                          "string": "export.cap",
                                          "type": "string",
                                        },
                                      ],
                                      "name": Object {
                                        "name": "Stricmp",
                                        "type": "identifier",
                                      },
                                      "type": "functionCallExpression",
                                    },
                                    "operator": "==",
                                    "right": Object {
                                      "type": "number",
                                      "value": 0,
                                    },
                                    "type": "binaryExpression",
                                  },
                                  "falseStatement": Object {
                                    "condition": Object {
                                      "left": Object {
                                        "arguments": Array [
                                          Object {
                                            "arguments": Array [
                                              Object {
                                                "expression": Object {
                                                  "name": "entry",
                                                  "type": "identifier",
                                                },
                                                "name": "filename",
                                                "type": "propertyAccessExpression",
                                              },
                                            ],
                                            "name": Object {
                                              "name": "FileNameGetBase",
                                              "type": "identifier",
                                            },
                                            "type": "functionCallExpression",
                                          },
                                          Object {
                                            "string": "descriptor.cap",
                                            "type": "string",
                                          },
                                        ],
                                        "name": Object {
                                          "name": "Stricmp",
                                          "type": "identifier",
                                        },
                                        "type": "functionCallExpression",
                                      },
                                      "operator": "==",
                                      "right": Object {
                                        "type": "number",
                                        "value": 0,
                                      },
                                      "type": "binaryExpression",
                                    },
                                    "falseStatement": Object {
                                      "condition": Object {
                                        "left": Object {
                                          "arguments": Array [
                                            Object {
                                              "arguments": Array [
                                                Object {
                                                  "expression": Object {
                                                    "name": "entry",
                                                    "type": "identifier",
                                                  },
                                                  "name": "filename",
                                                  "type": "propertyAccessExpression",
                                                },
                                              ],
                                              "name": Object {
                                                "name": "FileNameGetBase",
                                                "type": "identifier",
                                              },
                                              "type": "functionCallExpression",
                                            },
                                            Object {
                                              "string": "debug.cap",
                                              "type": "string",
                                            },
                                          ],
                                          "name": Object {
                                            "name": "Stricmp",
                                            "type": "identifier",
                                          },
                                          "type": "functionCallExpression",
                                        },
                                        "operator": "==",
                                        "right": Object {
                                          "type": "number",
                                          "value": 0,
                                        },
                                        "type": "binaryExpression",
                                      },
                                      "trueStatement": Object {
                                        "statements": Array [
                                          Object {
                                            "assignmentExpression": Object {
                                              "string": "Debug Entry",
                                              "type": "string",
                                            },
                                            "type": "returnStatement",
                                          },
                                        ],
                                        "type": "statementList",
                                      },
                                      "type": "ifStatement",
                                    },
                                    "trueStatement": Object {
                                      "statements": Array [
                                        Object {
                                          "assignmentExpression": Object {
                                            "string": "Descriptor Entry",
                                            "type": "string",
                                          },
                                          "type": "returnStatement",
                                        },
                                      ],
                                      "type": "statementList",
                                    },
                                    "type": "ifStatement",
                                  },
                                  "trueStatement": Object {
                                    "statements": Array [
                                      Object {
                                        "assignmentExpression": Object {
                                          "string": "Export Entry",
                                          "type": "string",
                                        },
                                        "type": "returnStatement",
                                      },
                                    ],
                                    "type": "statementList",
                                  },
                                  "type": "ifStatement",
                                },
                                "trueStatement": Object {
                                  "statements": Array [
                                    Object {
                                      "assignmentExpression": Object {
                                        "string": "ReferenceLocation Entry",
                                        "type": "string",
                                      },
                                      "type": "returnStatement",
                                    },
                                  ],
                                  "type": "statementList",
                                },
                                "type": "ifStatement",
                              },
                              "trueStatement": Object {
                                "statements": Array [
                                  Object {
                                    "assignmentExpression": Object {
                                      "string": "StaticField Entry",
                                      "type": "string",
                                    },
                                    "type": "returnStatement",
                                  },
                                ],
                                "type": "statementList",
                              },
                              "type": "ifStatement",
                            },
                            "trueStatement": Object {
                              "statements": Array [
                                Object {
                                  "assignmentExpression": Object {
                                    "string": "Method Entry",
                                    "type": "string",
                                  },
                                  "type": "returnStatement",
                                },
                              ],
                              "type": "statementList",
                            },
                            "type": "ifStatement",
                          },
                          "trueStatement": Object {
                            "statements": Array [
                              Object {
                                "assignmentExpression": Object {
                                  "string": "ConstantPool Entry",
                                  "type": "string",
                                },
                                "type": "returnStatement",
                              },
                            ],
                            "type": "statementList",
                          },
                          "type": "ifStatement",
                        },
                        "trueStatement": Object {
                          "statements": Array [
                            Object {
                              "assignmentExpression": Object {
                                "string": "Import Entry",
                                "type": "string",
                              },
                              "type": "returnStatement",
                            },
                          ],
                          "type": "statementList",
                        },
                        "type": "ifStatement",
                      },
                      "trueStatement": Object {
                        "statements": Array [
                          Object {
                            "assignmentExpression": Object {
                              "string": "Class Entry",
                              "type": "string",
                            },
                            "type": "returnStatement",
                          },
                        ],
                        "type": "statementList",
                      },
                      "type": "ifStatement",
                    },
                    "trueStatement": Object {
                      "statements": Array [
                        Object {
                          "assignmentExpression": Object {
                            "string": "Applet Entry",
                            "type": "string",
                          },
                          "type": "returnStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "type": "ifStatement",
                  },
                  "trueStatement": Object {
                    "statements": Array [
                      Object {
                        "assignmentExpression": Object {
                          "string": "Directory Entry",
                          "type": "string",
                        },
                        "type": "returnStatement",
                      },
                    ],
                    "type": "statementList",
                  },
                  "type": "ifStatement",
                },
                "trueStatement": Object {
                  "statements": Array [
                    Object {
                      "assignmentExpression": Object {
                        "string": "Header Entry",
                        "type": "string",
                      },
                      "type": "returnStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "type": "ifStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "assignmentExpression": Object {
            "string": "Unknown Entry",
            "type": "string",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ReadCAPDIRENTRY",
    "parameters": Array [
      Object {
        "name": "entry",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "CAPDIRENTRY",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "arguments": Array [
                  Object {
                    "name": "s",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "Strlen",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "name": "len",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "condition": Object {
            "arguments": Array [
              Object {
                "expression": Object {
                  "name": "file",
                  "type": "identifier",
                },
                "name": "frFileName",
                "type": "propertyAccessExpression",
              },
            ],
            "name": Object {
              "name": "exists",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "arguments": Array [
                  Object {
                    "expression": Object {
                      "name": "file",
                      "type": "identifier",
                    },
                    "name": "frFileName",
                    "type": "propertyAccessExpression",
                  },
                  Object {
                    "name": "s",
                    "type": "identifier",
                  },
                  Object {
                    "expression": Object {
                      "name": "file",
                      "type": "identifier",
                    },
                    "name": "frFileNameLength",
                    "type": "propertyAccessExpression",
                  },
                ],
                "name": Object {
                  "name": "Strncpy",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              Object {
                "condition": Object {
                  "left": Object {
                    "name": "len",
                    "type": "identifier",
                  },
                  "operator": "<",
                  "right": Object {
                    "expression": Object {
                      "name": "file",
                      "type": "identifier",
                    },
                    "name": "frFileNameLength",
                    "type": "propertyAccessExpression",
                  },
                  "type": "binaryExpression",
                },
                "trueStatement": Object {
                  "left": Object {
                    "expression": Object {
                      "expression": Object {
                        "name": "file",
                        "type": "identifier",
                      },
                      "name": "frFileName",
                      "type": "propertyAccessExpression",
                    },
                    "index": Object {
                      "name": "len",
                      "type": "identifier",
                    },
                    "type": "arrayIndexExpression",
                  },
                  "operator": "=",
                  "right": Object {
                    "type": "number",
                    "value": 0,
                  },
                  "type": "binaryExpression",
                },
                "type": "ifStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "WriteCAPFILERECORD",
    "parameters": Array [
      Object {
        "name": "file",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "CAPFILERECORD",
        },
      },
      Object {
        "name": "s",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "string",
        },
      },
    ],
    "returnType": Object {
      "name": "void",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [],
        "name": "tag",
      },
    ],
    "local": true,
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "uint",
    },
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [],
        "initializer": Object {
          "type": "number",
          "value": 0,
        },
        "name": "filename_len",
      },
    ],
    "local": true,
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "ushort",
    },
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [],
        "array": true,
        "name": "filename",
      },
    ],
    "local": true,
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "char",
    },
  },
  Object {
    "arguments": Array [],
    "name": Object {
      "name": "LittleEndian",
      "type": "identifier",
    },
    "type": "functionCallExpression",
  },
  Object {
    "body": Object {
      "statements": Array [
        Object {
          "left": Object {
            "name": "tag",
            "type": "identifier",
          },
          "operator": "=",
          "right": Object {
            "arguments": Array [
              Object {
                "arguments": Array [],
                "name": Object {
                  "name": "FTell",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
            ],
            "name": Object {
              "name": "ReadUInt",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "binaryExpression",
        },
        Object {
          "condition": Object {
            "left": Object {
              "name": "tag",
              "type": "identifier",
            },
            "operator": "==",
            "right": Object {
              "type": "number",
              "value": 67324752,
            },
            "type": "binaryExpression",
          },
          "falseStatement": Object {
            "condition": Object {
              "left": Object {
                "name": "tag",
                "type": "identifier",
              },
              "operator": "==",
              "right": Object {
                "type": "number",
                "value": 134695760,
              },
              "type": "binaryExpression",
            },
            "falseStatement": Object {
              "condition": Object {
                "left": Object {
                  "name": "tag",
                  "type": "identifier",
                },
                "operator": "==",
                "right": Object {
                  "type": "number",
                  "value": 33639248,
                },
                "type": "binaryExpression",
              },
              "falseStatement": Object {
                "condition": Object {
                  "left": Object {
                    "name": "tag",
                    "type": "identifier",
                  },
                  "operator": "==",
                  "right": Object {
                    "type": "number",
                    "value": 84233040,
                  },
                  "type": "binaryExpression",
                },
                "falseStatement": Object {
                  "condition": Object {
                    "left": Object {
                      "name": "tag",
                      "type": "identifier",
                    },
                    "operator": "==",
                    "right": Object {
                      "type": "number",
                      "value": 101010256,
                    },
                    "type": "binaryExpression",
                  },
                  "falseStatement": Object {
                    "statements": Array [
                      Object {
                        "arguments": Array [
                          Object {
                            "string": "Unknown CAP tag encountered. Template stopped.",
                            "type": "string",
                          },
                        ],
                        "name": Object {
                          "name": "Warning",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      Object {
                        "assignmentExpression": Object {
                          "expression": Object {
                            "type": "number",
                            "value": 1,
                          },
                          "operator": "-",
                          "type": "unaryExpression",
                        },
                        "type": "returnStatement",
                      },
                    ],
                    "type": "statementList",
                  },
                  "trueStatement": Object {
                    "statements": Array [
                      Object {
                        "arguments": Array [
                          Object {
                            "name": "cLtYellow",
                            "type": "identifier",
                          },
                        ],
                        "name": Object {
                          "name": "SetBackColor",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      Object {
                        "annotations": Array [],
                        "declarations": Array [
                          Object {
                            "annotations": Array [],
                            "name": "endLocator",
                          },
                        ],
                        "type": "variableDeclaration",
                        "variableType": Object {
                          "array": false,
                          "name": "CAPENDLOCATOR",
                        },
                      },
                    ],
                    "type": "statementList",
                  },
                  "type": "ifStatement",
                },
                "trueStatement": Object {
                  "statements": Array [
                    Object {
                      "arguments": Array [
                        Object {
                          "name": "cLtBlue",
                          "type": "identifier",
                        },
                      ],
                      "name": Object {
                        "name": "SetBackColor",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [],
                          "name": "digitalSig",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "CAPDIGITALSIG",
                      },
                    },
                  ],
                  "type": "statementList",
                },
                "type": "ifStatement",
              },
              "trueStatement": Object {
                "statements": Array [
                  Object {
                    "arguments": Array [
                      Object {
                        "name": "cLtPurple",
                        "type": "identifier",
                      },
                    ],
                    "name": Object {
                      "name": "SetBackColor",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  Object {
                    "annotations": Array [],
                    "declarations": Array [
                      Object {
                        "annotations": Array [],
                        "name": "dirEntry",
                      },
                    ],
                    "type": "variableDeclaration",
                    "variableType": Object {
                      "array": false,
                      "name": "CAPDIRENTRY",
                    },
                  },
                ],
                "type": "statementList",
              },
              "type": "ifStatement",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "arguments": Array [
                    Object {
                      "name": "cLtGreen",
                      "type": "identifier",
                    },
                  ],
                  "name": Object {
                    "name": "SetBackColor",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "name": "dataDescr",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "CAPDATADESCR",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "arguments": Array [
                  Object {
                    "name": "cLtGray",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "SetBackColor",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              Object {
                "left": Object {
                  "name": "current_file_rec_offset",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "arguments": Array [],
                  "name": Object {
                    "name": "FTell",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "type": "binaryExpression",
              },
              Object {
                "left": Object {
                  "name": "filename_len",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "arguments": Array [
                    Object {
                      "left": Object {
                        "arguments": Array [],
                        "name": Object {
                          "name": "FTell",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      "operator": "+",
                      "right": Object {
                        "type": "number",
                        "value": 26,
                      },
                      "type": "binaryExpression",
                    },
                  ],
                  "name": Object {
                    "name": "ReadUShort",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "type": "binaryExpression",
              },
              Object {
                "left": Object {
                  "name": "filename",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "arguments": Array [
                    Object {
                      "left": Object {
                        "arguments": Array [],
                        "name": Object {
                          "name": "FTell",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      "operator": "+",
                      "right": Object {
                        "type": "number",
                        "value": 30,
                      },
                      "type": "binaryExpression",
                    },
                    Object {
                      "name": "filename_len",
                      "type": "identifier",
                    },
                  ],
                  "name": Object {
                    "name": "ReadString",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "type": "binaryExpression",
              },
              Object {
                "condition": Object {
                  "left": Object {
                    "arguments": Array [
                      Object {
                        "arguments": Array [
                          Object {
                            "name": "filename",
                            "type": "identifier",
                          },
                        ],
                        "name": Object {
                          "name": "FileNameGetBase",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      Object {
                        "string": "header.cap",
                        "type": "string",
                      },
                    ],
                    "name": Object {
                      "name": "Stricmp",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  "operator": "==",
                  "right": Object {
                    "type": "number",
                    "value": 0,
                  },
                  "type": "binaryExpression",
                },
                "falseStatement": Object {
                  "condition": Object {
                    "left": Object {
                      "arguments": Array [
                        Object {
                          "arguments": Array [
                            Object {
                              "name": "filename",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "FileNameGetBase",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                        Object {
                          "string": "directory.cap",
                          "type": "string",
                        },
                      ],
                      "name": Object {
                        "name": "Stricmp",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    "operator": "==",
                    "right": Object {
                      "type": "number",
                      "value": 0,
                    },
                    "type": "binaryExpression",
                  },
                  "falseStatement": Object {
                    "condition": Object {
                      "left": Object {
                        "arguments": Array [
                          Object {
                            "arguments": Array [
                              Object {
                                "name": "filename",
                                "type": "identifier",
                              },
                            ],
                            "name": Object {
                              "name": "FileNameGetBase",
                              "type": "identifier",
                            },
                            "type": "functionCallExpression",
                          },
                          Object {
                            "string": "applet.cap",
                            "type": "string",
                          },
                        ],
                        "name": Object {
                          "name": "Stricmp",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      "operator": "==",
                      "right": Object {
                        "type": "number",
                        "value": 0,
                      },
                      "type": "binaryExpression",
                    },
                    "falseStatement": Object {
                      "condition": Object {
                        "left": Object {
                          "arguments": Array [
                            Object {
                              "arguments": Array [
                                Object {
                                  "name": "filename",
                                  "type": "identifier",
                                },
                              ],
                              "name": Object {
                                "name": "FileNameGetBase",
                                "type": "identifier",
                              },
                              "type": "functionCallExpression",
                            },
                            Object {
                              "string": "class.cap",
                              "type": "string",
                            },
                          ],
                          "name": Object {
                            "name": "Stricmp",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                        "operator": "==",
                        "right": Object {
                          "type": "number",
                          "value": 0,
                        },
                        "type": "binaryExpression",
                      },
                      "falseStatement": Object {
                        "condition": Object {
                          "left": Object {
                            "arguments": Array [
                              Object {
                                "arguments": Array [
                                  Object {
                                    "name": "filename",
                                    "type": "identifier",
                                  },
                                ],
                                "name": Object {
                                  "name": "FileNameGetBase",
                                  "type": "identifier",
                                },
                                "type": "functionCallExpression",
                              },
                              Object {
                                "string": "import.cap",
                                "type": "string",
                              },
                            ],
                            "name": Object {
                              "name": "Stricmp",
                              "type": "identifier",
                            },
                            "type": "functionCallExpression",
                          },
                          "operator": "==",
                          "right": Object {
                            "type": "number",
                            "value": 0,
                          },
                          "type": "binaryExpression",
                        },
                        "falseStatement": Object {
                          "condition": Object {
                            "left": Object {
                              "arguments": Array [
                                Object {
                                  "arguments": Array [
                                    Object {
                                      "name": "filename",
                                      "type": "identifier",
                                    },
                                  ],
                                  "name": Object {
                                    "name": "FileNameGetBase",
                                    "type": "identifier",
                                  },
                                  "type": "functionCallExpression",
                                },
                                Object {
                                  "string": "constantpool.cap",
                                  "type": "string",
                                },
                              ],
                              "name": Object {
                                "name": "Stricmp",
                                "type": "identifier",
                              },
                              "type": "functionCallExpression",
                            },
                            "operator": "==",
                            "right": Object {
                              "type": "number",
                              "value": 0,
                            },
                            "type": "binaryExpression",
                          },
                          "falseStatement": Object {
                            "condition": Object {
                              "left": Object {
                                "arguments": Array [
                                  Object {
                                    "arguments": Array [
                                      Object {
                                        "name": "filename",
                                        "type": "identifier",
                                      },
                                    ],
                                    "name": Object {
                                      "name": "FileNameGetBase",
                                      "type": "identifier",
                                    },
                                    "type": "functionCallExpression",
                                  },
                                  Object {
                                    "string": "method.cap",
                                    "type": "string",
                                  },
                                ],
                                "name": Object {
                                  "name": "Stricmp",
                                  "type": "identifier",
                                },
                                "type": "functionCallExpression",
                              },
                              "operator": "==",
                              "right": Object {
                                "type": "number",
                                "value": 0,
                              },
                              "type": "binaryExpression",
                            },
                            "falseStatement": Object {
                              "condition": Object {
                                "left": Object {
                                  "arguments": Array [
                                    Object {
                                      "arguments": Array [
                                        Object {
                                          "name": "filename",
                                          "type": "identifier",
                                        },
                                      ],
                                      "name": Object {
                                        "name": "FileNameGetBase",
                                        "type": "identifier",
                                      },
                                      "type": "functionCallExpression",
                                    },
                                    Object {
                                      "string": "staticfield.cap",
                                      "type": "string",
                                    },
                                  ],
                                  "name": Object {
                                    "name": "Stricmp",
                                    "type": "identifier",
                                  },
                                  "type": "functionCallExpression",
                                },
                                "operator": "==",
                                "right": Object {
                                  "type": "number",
                                  "value": 0,
                                },
                                "type": "binaryExpression",
                              },
                              "falseStatement": Object {
                                "condition": Object {
                                  "left": Object {
                                    "arguments": Array [
                                      Object {
                                        "arguments": Array [
                                          Object {
                                            "name": "filename",
                                            "type": "identifier",
                                          },
                                        ],
                                        "name": Object {
                                          "name": "FileNameGetBase",
                                          "type": "identifier",
                                        },
                                        "type": "functionCallExpression",
                                      },
                                      Object {
                                        "string": "reflocation.cap",
                                        "type": "string",
                                      },
                                    ],
                                    "name": Object {
                                      "name": "Stricmp",
                                      "type": "identifier",
                                    },
                                    "type": "functionCallExpression",
                                  },
                                  "operator": "==",
                                  "right": Object {
                                    "type": "number",
                                    "value": 0,
                                  },
                                  "type": "binaryExpression",
                                },
                                "falseStatement": Object {
                                  "condition": Object {
                                    "left": Object {
                                      "arguments": Array [
                                        Object {
                                          "arguments": Array [
                                            Object {
                                              "name": "filename",
                                              "type": "identifier",
                                            },
                                          ],
                                          "name": Object {
                                            "name": "FileNameGetBase",
                                            "type": "identifier",
                                          },
                                          "type": "functionCallExpression",
                                        },
                                        Object {
                                          "string": "export.cap",
                                          "type": "string",
                                        },
                                      ],
                                      "name": Object {
                                        "name": "Stricmp",
                                        "type": "identifier",
                                      },
                                      "type": "functionCallExpression",
                                    },
                                    "operator": "==",
                                    "right": Object {
                                      "type": "number",
                                      "value": 0,
                                    },
                                    "type": "binaryExpression",
                                  },
                                  "falseStatement": Object {
                                    "condition": Object {
                                      "left": Object {
                                        "arguments": Array [
                                          Object {
                                            "arguments": Array [
                                              Object {
                                                "name": "filename",
                                                "type": "identifier",
                                              },
                                            ],
                                            "name": Object {
                                              "name": "FileNameGetBase",
                                              "type": "identifier",
                                            },
                                            "type": "functionCallExpression",
                                          },
                                          Object {
                                            "string": "descriptor.cap",
                                            "type": "string",
                                          },
                                        ],
                                        "name": Object {
                                          "name": "Stricmp",
                                          "type": "identifier",
                                        },
                                        "type": "functionCallExpression",
                                      },
                                      "operator": "==",
                                      "right": Object {
                                        "type": "number",
                                        "value": 0,
                                      },
                                      "type": "binaryExpression",
                                    },
                                    "falseStatement": Object {
                                      "condition": Object {
                                        "left": Object {
                                          "arguments": Array [
                                            Object {
                                              "arguments": Array [
                                                Object {
                                                  "name": "filename",
                                                  "type": "identifier",
                                                },
                                              ],
                                              "name": Object {
                                                "name": "FileNameGetBase",
                                                "type": "identifier",
                                              },
                                              "type": "functionCallExpression",
                                            },
                                            Object {
                                              "string": "debug.cap",
                                              "type": "string",
                                            },
                                          ],
                                          "name": Object {
                                            "name": "Stricmp",
                                            "type": "identifier",
                                          },
                                          "type": "functionCallExpression",
                                        },
                                        "operator": "==",
                                        "right": Object {
                                          "type": "number",
                                          "value": 0,
                                        },
                                        "type": "binaryExpression",
                                      },
                                      "falseStatement": Object {
                                        "statements": Array [
                                          Object {
                                            "annotations": Array [],
                                            "declarations": Array [
                                              Object {
                                                "annotations": Array [],
                                                "name": "record",
                                              },
                                            ],
                                            "type": "variableDeclaration",
                                            "variableType": Object {
                                              "array": false,
                                              "name": "CAPFILERECORD",
                                            },
                                          },
                                        ],
                                        "type": "statementList",
                                      },
                                      "trueStatement": Object {
                                        "statements": Array [
                                          Object {
                                            "annotations": Array [],
                                            "declarations": Array [
                                              Object {
                                                "annotations": Array [],
                                                "name": "record",
                                              },
                                            ],
                                            "type": "variableDeclaration",
                                            "variableType": Object {
                                              "array": false,
                                              "name": "CAPFILERECORD",
                                            },
                                          },
                                        ],
                                        "type": "statementList",
                                      },
                                      "type": "ifStatement",
                                    },
                                    "trueStatement": Object {
                                      "statements": Array [
                                        Object {
                                          "left": Object {
                                            "name": "head_index",
                                            "type": "identifier",
                                          },
                                          "operator": "=",
                                          "right": Object {
                                            "type": "number",
                                            "value": 0,
                                          },
                                          "type": "binaryExpression",
                                        },
                                        Object {
                                          "left": Object {
                                            "name": "tail_index",
                                            "type": "identifier",
                                          },
                                          "operator": "=",
                                          "right": Object {
                                            "type": "number",
                                            "value": 0,
                                          },
                                          "type": "binaryExpression",
                                        },
                                        Object {
                                          "annotations": Array [],
                                          "declarations": Array [
                                            Object {
                                              "annotations": Array [],
                                              "name": "record",
                                            },
                                          ],
                                          "type": "variableDeclaration",
                                          "variableType": Object {
                                            "array": false,
                                            "name": "CAPFILERECORD",
                                          },
                                        },
                                        Object {
                                          "left": Object {
                                            "name": "next_file_rec_offset",
                                            "type": "identifier",
                                          },
                                          "operator": "=",
                                          "right": Object {
                                            "arguments": Array [],
                                            "name": Object {
                                              "name": "FTell",
                                              "type": "identifier",
                                            },
                                            "type": "functionCallExpression",
                                          },
                                          "type": "binaryExpression",
                                        },
                                        Object {
                                          "condition": Object {
                                            "left": Object {
                                              "name": "method_comp_decoded",
                                              "type": "identifier",
                                            },
                                            "operator": "==",
                                            "right": Object {
                                              "type": "boolean",
                                              "value": false,
                                            },
                                            "type": "binaryExpression",
                                          },
                                          "trueStatement": Object {
                                            "statements": Array [
                                              Object {
                                                "arguments": Array [
                                                  Object {
                                                    "name": "method_comp_offset",
                                                    "type": "identifier",
                                                  },
                                                ],
                                                "name": Object {
                                                  "name": "FSeek",
                                                  "type": "identifier",
                                                },
                                                "type": "functionCallExpression",
                                              },
                                              Object {
                                                "annotations": Array [],
                                                "declarations": Array [
                                                  Object {
                                                    "annotations": Array [],
                                                    "name": "record",
                                                  },
                                                ],
                                                "type": "variableDeclaration",
                                                "variableType": Object {
                                                  "array": false,
                                                  "name": "CAPFILERECORD",
                                                },
                                              },
                                              Object {
                                                "arguments": Array [
                                                  Object {
                                                    "name": "next_file_rec_offset",
                                                    "type": "identifier",
                                                  },
                                                ],
                                                "name": Object {
                                                  "name": "FSeek",
                                                  "type": "identifier",
                                                },
                                                "type": "functionCallExpression",
                                              },
                                            ],
                                            "type": "statementList",
                                          },
                                          "type": "ifStatement",
                                        },
                                      ],
                                      "type": "statementList",
                                    },
                                    "type": "ifStatement",
                                  },
                                  "trueStatement": Object {
                                    "statements": Array [
                                      Object {
                                        "annotations": Array [],
                                        "declarations": Array [
                                          Object {
                                            "annotations": Array [],
                                            "name": "record",
                                          },
                                        ],
                                        "type": "variableDeclaration",
                                        "variableType": Object {
                                          "array": false,
                                          "name": "CAPFILERECORD",
                                        },
                                      },
                                    ],
                                    "type": "statementList",
                                  },
                                  "type": "ifStatement",
                                },
                                "trueStatement": Object {
                                  "statements": Array [
                                    Object {
                                      "annotations": Array [],
                                      "declarations": Array [
                                        Object {
                                          "annotations": Array [],
                                          "name": "record",
                                        },
                                      ],
                                      "type": "variableDeclaration",
                                      "variableType": Object {
                                        "array": false,
                                        "name": "CAPFILERECORD",
                                      },
                                    },
                                  ],
                                  "type": "statementList",
                                },
                                "type": "ifStatement",
                              },
                              "trueStatement": Object {
                                "statements": Array [
                                  Object {
                                    "annotations": Array [],
                                    "declarations": Array [
                                      Object {
                                        "annotations": Array [],
                                        "name": "record",
                                      },
                                    ],
                                    "type": "variableDeclaration",
                                    "variableType": Object {
                                      "array": false,
                                      "name": "CAPFILERECORD",
                                    },
                                  },
                                ],
                                "type": "statementList",
                              },
                              "type": "ifStatement",
                            },
                            "trueStatement": Object {
                              "statements": Array [
                                Object {
                                  "left": Object {
                                    "name": "method_comp_offset",
                                    "type": "identifier",
                                  },
                                  "operator": "=",
                                  "right": Object {
                                    "name": "current_file_rec_offset",
                                    "type": "identifier",
                                  },
                                  "type": "binaryExpression",
                                },
                                Object {
                                  "condition": Object {
                                    "left": Object {
                                      "name": "descriptor_comp_decoded",
                                      "type": "identifier",
                                    },
                                    "operator": "==",
                                    "right": Object {
                                      "type": "boolean",
                                      "value": true,
                                    },
                                    "type": "binaryExpression",
                                  },
                                  "falseStatement": Object {
                                    "statements": Array [
                                      Object {
                                        "left": Object {
                                          "name": "method_comp_decoded",
                                          "type": "identifier",
                                        },
                                        "operator": "=",
                                        "right": Object {
                                          "type": "boolean",
                                          "value": false,
                                        },
                                        "type": "binaryExpression",
                                      },
                                      Object {
                                        "annotations": Array [],
                                        "declarations": Array [
                                          Object {
                                            "annotations": Array [],
                                            "initializer": Object {
                                              "left": Object {
                                                "left": Object {
                                                  "left": Object {
                                                    "type": "number",
                                                    "value": 30,
                                                  },
                                                  "operator": "+",
                                                  "right": Object {
                                                    "arguments": Array [
                                                      Object {
                                                        "left": Object {
                                                          "arguments": Array [],
                                                          "name": Object {
                                                            "name": "FTell",
                                                            "type": "identifier",
                                                          },
                                                          "type": "functionCallExpression",
                                                        },
                                                        "operator": "+",
                                                        "right": Object {
                                                          "type": "number",
                                                          "value": 18,
                                                        },
                                                        "type": "binaryExpression",
                                                      },
                                                    ],
                                                    "name": Object {
                                                      "name": "ReadUInt",
                                                      "type": "identifier",
                                                    },
                                                    "type": "functionCallExpression",
                                                  },
                                                  "type": "binaryExpression",
                                                },
                                                "operator": "+",
                                                "right": Object {
                                                  "arguments": Array [
                                                    Object {
                                                      "left": Object {
                                                        "arguments": Array [],
                                                        "name": Object {
                                                          "name": "FTell",
                                                          "type": "identifier",
                                                        },
                                                        "type": "functionCallExpression",
                                                      },
                                                      "operator": "+",
                                                      "right": Object {
                                                        "type": "number",
                                                        "value": 26,
                                                      },
                                                      "type": "binaryExpression",
                                                    },
                                                  ],
                                                  "name": Object {
                                                    "name": "ReadUShort",
                                                    "type": "identifier",
                                                  },
                                                  "type": "functionCallExpression",
                                                },
                                                "type": "binaryExpression",
                                              },
                                              "operator": "+",
                                              "right": Object {
                                                "arguments": Array [
                                                  Object {
                                                    "left": Object {
                                                      "arguments": Array [],
                                                      "name": Object {
                                                        "name": "FTell",
                                                        "type": "identifier",
                                                      },
                                                      "type": "functionCallExpression",
                                                    },
                                                    "operator": "+",
                                                    "right": Object {
                                                      "type": "number",
                                                      "value": 28,
                                                    },
                                                    "type": "binaryExpression",
                                                  },
                                                ],
                                                "name": Object {
                                                  "name": "ReadUShort",
                                                  "type": "identifier",
                                                },
                                                "type": "functionCallExpression",
                                              },
                                              "type": "binaryExpression",
                                            },
                                            "name": "pk_header_size",
                                          },
                                        ],
                                        "local": true,
                                        "type": "variableDeclaration",
                                        "variableType": Object {
                                          "array": false,
                                          "name": "uint64",
                                        },
                                      },
                                      Object {
                                        "arguments": Array [
                                          Object {
                                            "left": Object {
                                              "arguments": Array [],
                                              "name": Object {
                                                "name": "FTell",
                                                "type": "identifier",
                                              },
                                              "type": "functionCallExpression",
                                            },
                                            "operator": "+",
                                            "right": Object {
                                              "name": "pk_header_size",
                                              "type": "identifier",
                                            },
                                            "type": "binaryExpression",
                                          },
                                        ],
                                        "name": Object {
                                          "name": "FSeek",
                                          "type": "identifier",
                                        },
                                        "type": "functionCallExpression",
                                      },
                                    ],
                                    "type": "statementList",
                                  },
                                  "trueStatement": Object {
                                    "statements": Array [
                                      Object {
                                        "annotations": Array [],
                                        "declarations": Array [
                                          Object {
                                            "annotations": Array [],
                                            "name": "record",
                                          },
                                        ],
                                        "type": "variableDeclaration",
                                        "variableType": Object {
                                          "array": false,
                                          "name": "CAPFILERECORD",
                                        },
                                      },
                                    ],
                                    "type": "statementList",
                                  },
                                  "type": "ifStatement",
                                },
                              ],
                              "type": "statementList",
                            },
                            "type": "ifStatement",
                          },
                          "trueStatement": Object {
                            "statements": Array [
                              Object {
                                "annotations": Array [],
                                "declarations": Array [
                                  Object {
                                    "annotations": Array [],
                                    "name": "record",
                                  },
                                ],
                                "type": "variableDeclaration",
                                "variableType": Object {
                                  "array": false,
                                  "name": "CAPFILERECORD",
                                },
                              },
                            ],
                            "type": "statementList",
                          },
                          "type": "ifStatement",
                        },
                        "trueStatement": Object {
                          "statements": Array [
                            Object {
                              "annotations": Array [],
                              "declarations": Array [
                                Object {
                                  "annotations": Array [],
                                  "name": "record",
                                },
                              ],
                              "type": "variableDeclaration",
                              "variableType": Object {
                                "array": false,
                                "name": "CAPFILERECORD",
                              },
                            },
                          ],
                          "type": "statementList",
                        },
                        "type": "ifStatement",
                      },
                      "trueStatement": Object {
                        "statements": Array [
                          Object {
                            "annotations": Array [],
                            "declarations": Array [
                              Object {
                                "annotations": Array [],
                                "name": "record",
                              },
                            ],
                            "type": "variableDeclaration",
                            "variableType": Object {
                              "array": false,
                              "name": "CAPFILERECORD",
                            },
                          },
                        ],
                        "type": "statementList",
                      },
                      "type": "ifStatement",
                    },
                    "trueStatement": Object {
                      "statements": Array [
                        Object {
                          "annotations": Array [],
                          "declarations": Array [
                            Object {
                              "annotations": Array [],
                              "name": "record",
                            },
                          ],
                          "type": "variableDeclaration",
                          "variableType": Object {
                            "array": false,
                            "name": "CAPFILERECORD",
                          },
                        },
                      ],
                      "type": "statementList",
                    },
                    "type": "ifStatement",
                  },
                  "trueStatement": Object {
                    "statements": Array [
                      Object {
                        "annotations": Array [],
                        "declarations": Array [
                          Object {
                            "annotations": Array [],
                            "name": "record",
                          },
                        ],
                        "type": "variableDeclaration",
                        "variableType": Object {
                          "array": false,
                          "name": "CAPFILERECORD",
                        },
                      },
                    ],
                    "type": "statementList",
                  },
                  "type": "ifStatement",
                },
                "trueStatement": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [],
                          "name": "record",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "CAPFILERECORD",
                      },
                    },
                  ],
                  "type": "statementList",
                },
                "type": "ifStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
      ],
      "type": "statementList",
    },
    "condition": Object {
      "expression": Object {
        "arguments": Array [],
        "name": Object {
          "name": "FEof",
          "type": "identifier",
        },
        "type": "functionCallExpression",
      },
      "operator": "!",
      "type": "unaryExpression",
    },
    "type": "whileStatement",
  },
]
`;

exports[`Sweetscape Importer creates DDS definition 1`] = `
Array [
  Object {
    "alias": "DDS_PIXELFORMAT",
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "binary",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "read",
                    "value": Object {
                      "name": "ReadDDSPixelFormatFlags",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "flags",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "arraySelector": Object {
                  "type": "number",
                  "value": 4,
                },
                "name": "fourCC",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "char",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "RGBBitCount",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "binary",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "RBitMask",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "binary",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "GBitMask",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "binary",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "BBitMask",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "binary",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "ABitMask",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "type": "structDeclaration",
  },
  Object {
    "alias": "DXGI_FORMAT",
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "ReadDXGIFormat",
          "type": "identifier",
        },
      },
    ],
    "name": Object {
      "array": false,
      "name": "uint",
    },
    "type": "typeAlias",
  },
  Object {
    "alias": "D3D10_RESOURCE_DIMENSION",
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "ReadD3D10ResourceDimension",
          "type": "identifier",
        },
      },
    ],
    "name": Object {
      "array": false,
      "name": "uint",
    },
    "type": "typeAlias",
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [],
        "arraySelector": Object {
          "type": "number",
          "value": 4,
        },
        "name": "magic",
      },
    ],
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "char",
    },
  },
  Object {
    "alias": "DDS_HEADER",
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "binary",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "read",
                    "value": Object {
                      "name": "ReadHeaderFlags",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "flags",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "height",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "width",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "pitchOrLinearSize",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "depth",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "mipMapCount",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "arraySelector": Object {
                  "type": "number",
                  "value": 11,
                },
                "name": "reserved1",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "ddspf",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DDS_PIXELFORMAT",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "binary",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "read",
                    "value": Object {
                      "name": "ReadHeaderCaps",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "caps",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "binary",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "read",
                    "value": Object {
                      "name": "ReadHeaderCaps2",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "caps2",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "caps3",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "caps4",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "reserved2",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "dds_header",
    "type": "structDeclaration",
  },
  Object {
    "condition": Object {
      "left": Object {
        "expression": Object {
          "expression": Object {
            "name": "dds_header",
            "type": "identifier",
          },
          "name": "ddspf",
          "type": "propertyAccessExpression",
        },
        "name": "fourCC",
        "type": "propertyAccessExpression",
      },
      "operator": "==",
      "right": Object {
        "string": "DX10",
        "type": "string",
      },
      "type": "binaryExpression",
    },
    "trueStatement": Object {
      "statements": Array [
        Object {
          "alias": "DDS_HEADER_DXT10",
          "annotations": Array [],
          "declaration": Object {
            "body": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "name": "dxgiFormat",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "DXGI_FORMAT",
                  },
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "name": "resourceDimension",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "D3D10_RESOURCE_DIMENSION",
                  },
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "format",
                          "value": Object {
                            "name": "binary",
                            "type": "identifier",
                          },
                        },
                        Object {
                          "key": "read",
                          "value": Object {
                            "name": "ReadHeader10MiscFlag",
                            "type": "identifier",
                          },
                        },
                      ],
                      "name": "miscFlag",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "uint",
                  },
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "name": "arraySize",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "uint",
                  },
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "format",
                          "value": Object {
                            "name": "binary",
                            "type": "identifier",
                          },
                        },
                        Object {
                          "key": "read",
                          "value": Object {
                            "name": "ReadHeader10MiscFlags2",
                            "type": "identifier",
                          },
                        },
                      ],
                      "name": "miscFlags2",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "uint",
                  },
                },
              ],
              "type": "statementList",
            },
          },
          "name": "ds_header_dxt10",
          "type": "structDeclaration",
        },
      ],
      "type": "statementList",
    },
    "type": "ifStatement",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "statements": Array [
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_UNKNOWN",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 0,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R32G32B32A32_TYPELESS",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 1,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R32G32B32A32_FLOAT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 2,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R32G32B32A32_UINT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 3,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R32G32B32A32_SINT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 4,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R32G32B32_TYPELESS",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 5,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R32G32B32_FLOAT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 6,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R32G32B32_UINT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 7,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R32G32B32_SINT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 8,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R16G16B16A16_TYPELESS",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 9,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R16G16B16A16_FLOAT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 10,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R16G16B16A16_UNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 11,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R16G16B16A16_UINT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 12,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R16G16B16A16_SNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 13,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R16G16B16A16_SINT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 14,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R32G32_TYPELESS",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 15,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R32G32_FLOAT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 16,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R32G32_UINT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 17,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R32G32_SINT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 18,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R32G8X24_TYPELESS",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 19,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_D32_FLOAT_S8X24_UINT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 20,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 21,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_X32_TYPELESS_G8X24_UINT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 22,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R10G10B10A2_TYPELESS",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 23,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R10G10B10A2_UNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 24,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R10G10B10A2_UINT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 25,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R11G11B10_FLOAT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 26,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R8G8B8A8_TYPELESS",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 27,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R8G8B8A8_UNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 28,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R8G8B8A8_UNORM_SRGB",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 29,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R8G8B8A8_UINT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 30,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R8G8B8A8_SNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 31,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R8G8B8A8_SINT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 32,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R16G16_TYPELESS",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 33,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R16G16_FLOAT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 34,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R16G16_UNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 35,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R16G16_UINT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 36,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R16G16_SNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 37,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R16G16_SINT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 38,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R32_TYPELESS",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 39,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_D32_FLOAT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 40,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R32_FLOAT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 41,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R32_UINT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 42,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R32_SINT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 43,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R24G8_TYPELESS",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 44,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_D24_UNORM_S8_UINT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 45,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R24_UNORM_X8_TYPELESS",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 46,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_X24_TYPELESS_G8_UINT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 47,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R8G8_TYPELESS",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 48,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R8G8_UNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 49,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R8G8_UINT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 50,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R8G8_SNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 51,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R8G8_SINT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 52,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R16_TYPELESS",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 53,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R16_FLOAT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 54,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_D16_UNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 55,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R16_UNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 56,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R16_UINT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 57,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R16_SNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 58,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R16_SINT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 59,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R8_TYPELESS",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 60,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R8_UNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 61,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R8_UINT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 62,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R8_SNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 63,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R8_SINT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 64,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_A8_UNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 65,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R1_UNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 66,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R9G9B9E5_SHAREDEXP",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 67,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R8G8_B8G8_UNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 68,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_G8R8_G8B8_UNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 69,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_BC1_TYPELESS",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 70,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_BC1_UNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 71,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_BC1_UNORM_SRGB",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 72,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_BC2_TYPELESS",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 73,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_BC2_UNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 74,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_BC2_UNORM_SRGB",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 75,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_BC3_TYPELESS",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 76,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_BC3_UNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 77,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_BC3_UNORM_SRGB",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 78,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_BC4_TYPELESS",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 79,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_BC4_UNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 80,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_BC4_SNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 81,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_BC5_TYPELESS",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 82,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_BC5_UNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 83,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_BC5_SNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 84,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_B5G6R5_UNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 85,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_B5G5R5A1_UNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 86,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_B8G8R8A8_UNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 87,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_B8G8R8X8_UNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 88,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 89,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_B8G8R8A8_TYPELESS",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 90,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_B8G8R8A8_UNORM_SRGB",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 91,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_B8G8R8X8_TYPELESS",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 92,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_B8G8R8X8_UNORM_SRGB",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 93,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_BC6H_TYPELESS",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 94,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_BC6H_UF16",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 95,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_BC6H_SF16",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 96,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_BC7_TYPELESS",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 97,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_BC7_UNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 98,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_BC7_UNORM_SRGB",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 99,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_AYUV",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 100,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_Y410",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 101,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_Y416",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 102,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_NV12",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 103,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_P010",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 104,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_P016",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 105,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_420_OPAQUE",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 106,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_YUY2",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 107,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_Y210",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 108,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_Y216",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 109,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_NV11",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 110,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_AI44",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 111,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_IA44",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 112,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_P8",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 113,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_A8P8",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 114,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_B4G4R4A4_UNORM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 115,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_P208",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 130,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_V208",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 131,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_V408",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 132,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DXGI_FORMAT_FORCE_UINT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 4294967295,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [],
                "type": "statementList",
              },
              "labels": Array [],
            },
          ],
          "type": "switchStatement",
        },
        Object {
          "assignmentExpression": Object {
            "string": "",
            "type": "string",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ReadDXGIFormat",
    "parameters": Array [
      Object {
        "name": "dxgiFormat",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "DXGI_FORMAT",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "statements": Array [
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "D3D10_RESOURCE_DIMENSION_UNKNOWN",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 0,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "D3D10_RESOURCE_DIMENSION_BUFFER",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 1,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "D3D10_RESOURCE_DIMENSION_TEXTURE1D",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 2,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "D3D10_RESOURCE_DIMENSION_TEXTURE2D",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 3,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "D3D10_RESOURCE_DIMENSION_TEXTURE3D",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 4,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [],
                "type": "statementList",
              },
              "labels": Array [],
            },
          ],
          "type": "switchStatement",
        },
        Object {
          "assignmentExpression": Object {
            "string": "",
            "type": "string",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ReadD3D10ResourceDimension",
    "parameters": Array [
      Object {
        "name": "resourceDimension",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "D3D10_RESOURCE_DIMENSION",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "",
                "type": "string",
              },
              "name": "value",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "condition": Object {
            "left": Object {
              "name": "flags",
              "type": "identifier",
            },
            "operator": "==",
            "right": Object {
              "type": "number",
              "value": 0,
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "assignmentExpression": Object {
                  "string": "",
                  "type": "string",
                },
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 0,
              },
              "name": "i",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 0,
              },
              "name": "flag",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 0,
              },
              "name": "flagsFound",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "body": Object {
            "statements": Array [
              Object {
                "left": Object {
                  "name": "flag",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "left": Object {
                    "name": "flags",
                    "type": "identifier",
                  },
                  "operator": "&",
                  "right": Object {
                    "left": Object {
                      "type": "number",
                      "value": 1,
                    },
                    "operator": "<<",
                    "right": Object {
                      "name": "i",
                      "type": "identifier",
                    },
                    "type": "binaryExpression",
                  },
                  "type": "binaryExpression",
                },
                "type": "binaryExpression",
              },
              Object {
                "condition": Object {
                  "left": Object {
                    "name": "flag",
                    "type": "identifier",
                  },
                  "operator": "!=",
                  "right": Object {
                    "type": "number",
                    "value": 0,
                  },
                  "type": "binaryExpression",
                },
                "trueStatement": Object {
                  "statements": Array [
                    Object {
                      "expression": Object {
                        "name": "flagsFound",
                        "type": "identifier",
                      },
                      "operator": "++",
                      "type": "postfixExpression",
                    },
                  ],
                  "type": "statementList",
                },
                "type": "ifStatement",
              },
            ],
            "type": "statementList",
          },
          "condition": Object {
            "left": Object {
              "name": "i",
              "type": "identifier",
            },
            "operator": "<",
            "right": Object {
              "type": "number",
              "value": 32,
            },
            "type": "binaryExpression",
          },
          "increment": Object {
            "expressions": Array [
              Object {
                "expression": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "++",
                "type": "postfixExpression",
              },
            ],
            "type": "commaExpression",
          },
          "initialization": Object {
            "expressions": Array [
              Object {
                "left": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "type": "number",
                  "value": 0,
                },
                "type": "binaryExpression",
              },
            ],
            "type": "commaExpression",
          },
          "type": "forStatement",
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 0,
              },
              "name": "flagCounter",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "body": Object {
            "statements": Array [
              Object {
                "left": Object {
                  "name": "flag",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "left": Object {
                    "name": "flags",
                    "type": "identifier",
                  },
                  "operator": "&",
                  "right": Object {
                    "left": Object {
                      "type": "number",
                      "value": 1,
                    },
                    "operator": "<<",
                    "right": Object {
                      "name": "i",
                      "type": "identifier",
                    },
                    "type": "binaryExpression",
                  },
                  "type": "binaryExpression",
                },
                "type": "binaryExpression",
              },
              Object {
                "statements": Array [
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "value",
                            "type": "identifier",
                          },
                          "operator": "+=",
                          "right": Object {
                            "string": "DDSD_CAPS",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "type": "number",
                        "value": 1,
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "value",
                            "type": "identifier",
                          },
                          "operator": "+=",
                          "right": Object {
                            "string": "DDSD_HEIGHT",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "type": "number",
                        "value": 2,
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "value",
                            "type": "identifier",
                          },
                          "operator": "+=",
                          "right": Object {
                            "string": "DDSD_WIDTH",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "type": "number",
                        "value": 4,
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "value",
                            "type": "identifier",
                          },
                          "operator": "+=",
                          "right": Object {
                            "string": "DDSD_PITCH",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "type": "number",
                        "value": 8,
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "value",
                            "type": "identifier",
                          },
                          "operator": "+=",
                          "right": Object {
                            "string": "DDSD_PIXELFORMAT",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "type": "number",
                        "value": 4096,
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "value",
                            "type": "identifier",
                          },
                          "operator": "+=",
                          "right": Object {
                            "string": "DDSD_MIPMAPCOUNT",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "type": "number",
                        "value": 131072,
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "value",
                            "type": "identifier",
                          },
                          "operator": "+=",
                          "right": Object {
                            "string": "DDSD_LINEARSIZE",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "type": "number",
                        "value": 524288,
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "value",
                            "type": "identifier",
                          },
                          "operator": "+=",
                          "right": Object {
                            "string": "DDSD_DEPTH",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "type": "number",
                        "value": 8388608,
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [],
                      "type": "statementList",
                    },
                    "labels": Array [],
                  },
                ],
                "type": "switchStatement",
              },
              Object {
                "condition": Object {
                  "left": Object {
                    "name": "flag",
                    "type": "identifier",
                  },
                  "operator": "!=",
                  "right": Object {
                    "type": "number",
                    "value": 0,
                  },
                  "type": "binaryExpression",
                },
                "trueStatement": Object {
                  "statements": Array [
                    Object {
                      "expression": Object {
                        "name": "flagCounter",
                        "type": "identifier",
                      },
                      "operator": "++",
                      "type": "postfixExpression",
                    },
                    Object {
                      "condition": Object {
                        "left": Object {
                          "name": "flagCounter",
                          "type": "identifier",
                        },
                        "operator": "<",
                        "right": Object {
                          "name": "flagsFound",
                          "type": "identifier",
                        },
                        "type": "binaryExpression",
                      },
                      "trueStatement": Object {
                        "statements": Array [
                          Object {
                            "left": Object {
                              "name": "value",
                              "type": "identifier",
                            },
                            "operator": "+=",
                            "right": Object {
                              "string": " | ",
                              "type": "string",
                            },
                            "type": "binaryExpression",
                          },
                        ],
                        "type": "statementList",
                      },
                      "type": "ifStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "type": "ifStatement",
              },
            ],
            "type": "statementList",
          },
          "condition": Object {
            "left": Object {
              "name": "i",
              "type": "identifier",
            },
            "operator": "<",
            "right": Object {
              "type": "number",
              "value": 32,
            },
            "type": "binaryExpression",
          },
          "increment": Object {
            "expressions": Array [
              Object {
                "expression": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "++",
                "type": "postfixExpression",
              },
            ],
            "type": "commaExpression",
          },
          "initialization": Object {
            "expressions": Array [
              Object {
                "left": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "type": "number",
                  "value": 0,
                },
                "type": "binaryExpression",
              },
            ],
            "type": "commaExpression",
          },
          "type": "forStatement",
        },
        Object {
          "assignmentExpression": Object {
            "name": "value",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ReadHeaderFlags",
    "parameters": Array [
      Object {
        "name": "flags",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "uint",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "",
                "type": "string",
              },
              "name": "value",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "condition": Object {
            "left": Object {
              "name": "flags",
              "type": "identifier",
            },
            "operator": "==",
            "right": Object {
              "type": "number",
              "value": 0,
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "assignmentExpression": Object {
                  "string": "",
                  "type": "string",
                },
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 0,
              },
              "name": "i",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 0,
              },
              "name": "flag",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 0,
              },
              "name": "flagsFound",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "body": Object {
            "statements": Array [
              Object {
                "left": Object {
                  "name": "flag",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "left": Object {
                    "name": "flags",
                    "type": "identifier",
                  },
                  "operator": "&",
                  "right": Object {
                    "left": Object {
                      "type": "number",
                      "value": 1,
                    },
                    "operator": "<<",
                    "right": Object {
                      "name": "i",
                      "type": "identifier",
                    },
                    "type": "binaryExpression",
                  },
                  "type": "binaryExpression",
                },
                "type": "binaryExpression",
              },
              Object {
                "condition": Object {
                  "left": Object {
                    "name": "flag",
                    "type": "identifier",
                  },
                  "operator": "!=",
                  "right": Object {
                    "type": "number",
                    "value": 0,
                  },
                  "type": "binaryExpression",
                },
                "trueStatement": Object {
                  "statements": Array [
                    Object {
                      "expression": Object {
                        "name": "flagsFound",
                        "type": "identifier",
                      },
                      "operator": "++",
                      "type": "postfixExpression",
                    },
                  ],
                  "type": "statementList",
                },
                "type": "ifStatement",
              },
            ],
            "type": "statementList",
          },
          "condition": Object {
            "left": Object {
              "name": "i",
              "type": "identifier",
            },
            "operator": "<",
            "right": Object {
              "type": "number",
              "value": 32,
            },
            "type": "binaryExpression",
          },
          "increment": Object {
            "expressions": Array [
              Object {
                "expression": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "++",
                "type": "postfixExpression",
              },
            ],
            "type": "commaExpression",
          },
          "initialization": Object {
            "expressions": Array [
              Object {
                "left": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "type": "number",
                  "value": 0,
                },
                "type": "binaryExpression",
              },
            ],
            "type": "commaExpression",
          },
          "type": "forStatement",
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 0,
              },
              "name": "flagCounter",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "body": Object {
            "statements": Array [
              Object {
                "left": Object {
                  "name": "flag",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "left": Object {
                    "name": "flags",
                    "type": "identifier",
                  },
                  "operator": "&",
                  "right": Object {
                    "left": Object {
                      "type": "number",
                      "value": 1,
                    },
                    "operator": "<<",
                    "right": Object {
                      "name": "i",
                      "type": "identifier",
                    },
                    "type": "binaryExpression",
                  },
                  "type": "binaryExpression",
                },
                "type": "binaryExpression",
              },
              Object {
                "statements": Array [
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "value",
                            "type": "identifier",
                          },
                          "operator": "+=",
                          "right": Object {
                            "string": "DDPF_ALPHAPIXELS",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "type": "number",
                        "value": 1,
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "value",
                            "type": "identifier",
                          },
                          "operator": "+=",
                          "right": Object {
                            "string": "DDPF_ALPHA",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "type": "number",
                        "value": 2,
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "value",
                            "type": "identifier",
                          },
                          "operator": "+=",
                          "right": Object {
                            "string": "DDPF_FOURCC",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "type": "number",
                        "value": 4,
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "value",
                            "type": "identifier",
                          },
                          "operator": "+=",
                          "right": Object {
                            "string": "DDPF_RGB",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "type": "number",
                        "value": 64,
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "value",
                            "type": "identifier",
                          },
                          "operator": "+=",
                          "right": Object {
                            "string": "DDPF_YUV",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "type": "number",
                        "value": 512,
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "value",
                            "type": "identifier",
                          },
                          "operator": "+=",
                          "right": Object {
                            "string": "DDPF_LUMINANCE",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "type": "number",
                        "value": 131072,
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [],
                      "type": "statementList",
                    },
                    "labels": Array [],
                  },
                ],
                "type": "switchStatement",
              },
              Object {
                "condition": Object {
                  "left": Object {
                    "name": "flag",
                    "type": "identifier",
                  },
                  "operator": "!=",
                  "right": Object {
                    "type": "number",
                    "value": 0,
                  },
                  "type": "binaryExpression",
                },
                "trueStatement": Object {
                  "statements": Array [
                    Object {
                      "expression": Object {
                        "name": "flagCounter",
                        "type": "identifier",
                      },
                      "operator": "++",
                      "type": "postfixExpression",
                    },
                    Object {
                      "condition": Object {
                        "left": Object {
                          "name": "flagCounter",
                          "type": "identifier",
                        },
                        "operator": "<",
                        "right": Object {
                          "name": "flagsFound",
                          "type": "identifier",
                        },
                        "type": "binaryExpression",
                      },
                      "trueStatement": Object {
                        "statements": Array [
                          Object {
                            "left": Object {
                              "name": "value",
                              "type": "identifier",
                            },
                            "operator": "+=",
                            "right": Object {
                              "string": " | ",
                              "type": "string",
                            },
                            "type": "binaryExpression",
                          },
                        ],
                        "type": "statementList",
                      },
                      "type": "ifStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "type": "ifStatement",
              },
            ],
            "type": "statementList",
          },
          "condition": Object {
            "left": Object {
              "name": "i",
              "type": "identifier",
            },
            "operator": "<",
            "right": Object {
              "type": "number",
              "value": 32,
            },
            "type": "binaryExpression",
          },
          "increment": Object {
            "expressions": Array [
              Object {
                "expression": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "++",
                "type": "postfixExpression",
              },
            ],
            "type": "commaExpression",
          },
          "initialization": Object {
            "expressions": Array [
              Object {
                "left": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "type": "number",
                  "value": 0,
                },
                "type": "binaryExpression",
              },
            ],
            "type": "commaExpression",
          },
          "type": "forStatement",
        },
        Object {
          "assignmentExpression": Object {
            "name": "value",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ReadDDSPixelFormatFlags",
    "parameters": Array [
      Object {
        "name": "flags",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "uint",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "",
                "type": "string",
              },
              "name": "value",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "condition": Object {
            "left": Object {
              "name": "caps",
              "type": "identifier",
            },
            "operator": "==",
            "right": Object {
              "type": "number",
              "value": 0,
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "assignmentExpression": Object {
                  "string": "",
                  "type": "string",
                },
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 0,
              },
              "name": "i",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 0,
              },
              "name": "flag",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 0,
              },
              "name": "flagsFound",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "body": Object {
            "statements": Array [
              Object {
                "left": Object {
                  "name": "flag",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "left": Object {
                    "name": "caps",
                    "type": "identifier",
                  },
                  "operator": "&",
                  "right": Object {
                    "left": Object {
                      "type": "number",
                      "value": 1,
                    },
                    "operator": "<<",
                    "right": Object {
                      "name": "i",
                      "type": "identifier",
                    },
                    "type": "binaryExpression",
                  },
                  "type": "binaryExpression",
                },
                "type": "binaryExpression",
              },
              Object {
                "condition": Object {
                  "left": Object {
                    "name": "flag",
                    "type": "identifier",
                  },
                  "operator": "!=",
                  "right": Object {
                    "type": "number",
                    "value": 0,
                  },
                  "type": "binaryExpression",
                },
                "trueStatement": Object {
                  "statements": Array [
                    Object {
                      "expression": Object {
                        "name": "flagsFound",
                        "type": "identifier",
                      },
                      "operator": "++",
                      "type": "postfixExpression",
                    },
                  ],
                  "type": "statementList",
                },
                "type": "ifStatement",
              },
            ],
            "type": "statementList",
          },
          "condition": Object {
            "left": Object {
              "name": "i",
              "type": "identifier",
            },
            "operator": "<",
            "right": Object {
              "type": "number",
              "value": 32,
            },
            "type": "binaryExpression",
          },
          "increment": Object {
            "expressions": Array [
              Object {
                "expression": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "++",
                "type": "postfixExpression",
              },
            ],
            "type": "commaExpression",
          },
          "initialization": Object {
            "expressions": Array [
              Object {
                "left": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "type": "number",
                  "value": 0,
                },
                "type": "binaryExpression",
              },
            ],
            "type": "commaExpression",
          },
          "type": "forStatement",
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 0,
              },
              "name": "flagCounter",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "body": Object {
            "statements": Array [
              Object {
                "left": Object {
                  "name": "flag",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "left": Object {
                    "name": "caps",
                    "type": "identifier",
                  },
                  "operator": "&",
                  "right": Object {
                    "left": Object {
                      "type": "number",
                      "value": 1,
                    },
                    "operator": "<<",
                    "right": Object {
                      "name": "i",
                      "type": "identifier",
                    },
                    "type": "binaryExpression",
                  },
                  "type": "binaryExpression",
                },
                "type": "binaryExpression",
              },
              Object {
                "statements": Array [
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "value",
                            "type": "identifier",
                          },
                          "operator": "+=",
                          "right": Object {
                            "string": "DDSCAPS_COMPLEX",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "type": "number",
                        "value": 8,
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "value",
                            "type": "identifier",
                          },
                          "operator": "+=",
                          "right": Object {
                            "string": "DDSCAPS_MIPMAP",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "type": "number",
                        "value": 4194304,
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "value",
                            "type": "identifier",
                          },
                          "operator": "+=",
                          "right": Object {
                            "string": "DDSCAPS_TEXTURE",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "type": "number",
                        "value": 4096,
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [],
                      "type": "statementList",
                    },
                    "labels": Array [],
                  },
                ],
                "type": "switchStatement",
              },
              Object {
                "condition": Object {
                  "left": Object {
                    "name": "flag",
                    "type": "identifier",
                  },
                  "operator": "!=",
                  "right": Object {
                    "type": "number",
                    "value": 0,
                  },
                  "type": "binaryExpression",
                },
                "trueStatement": Object {
                  "statements": Array [
                    Object {
                      "expression": Object {
                        "name": "flagCounter",
                        "type": "identifier",
                      },
                      "operator": "++",
                      "type": "postfixExpression",
                    },
                    Object {
                      "condition": Object {
                        "left": Object {
                          "name": "flagCounter",
                          "type": "identifier",
                        },
                        "operator": "<",
                        "right": Object {
                          "name": "flagsFound",
                          "type": "identifier",
                        },
                        "type": "binaryExpression",
                      },
                      "trueStatement": Object {
                        "statements": Array [
                          Object {
                            "left": Object {
                              "name": "value",
                              "type": "identifier",
                            },
                            "operator": "+=",
                            "right": Object {
                              "string": " | ",
                              "type": "string",
                            },
                            "type": "binaryExpression",
                          },
                        ],
                        "type": "statementList",
                      },
                      "type": "ifStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "type": "ifStatement",
              },
            ],
            "type": "statementList",
          },
          "condition": Object {
            "left": Object {
              "name": "i",
              "type": "identifier",
            },
            "operator": "<",
            "right": Object {
              "type": "number",
              "value": 32,
            },
            "type": "binaryExpression",
          },
          "increment": Object {
            "expressions": Array [
              Object {
                "expression": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "++",
                "type": "postfixExpression",
              },
            ],
            "type": "commaExpression",
          },
          "initialization": Object {
            "expressions": Array [
              Object {
                "left": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "type": "number",
                  "value": 0,
                },
                "type": "binaryExpression",
              },
            ],
            "type": "commaExpression",
          },
          "type": "forStatement",
        },
        Object {
          "assignmentExpression": Object {
            "name": "value",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ReadHeaderCaps",
    "parameters": Array [
      Object {
        "name": "caps",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "uint",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "",
                "type": "string",
              },
              "name": "value",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "condition": Object {
            "left": Object {
              "name": "caps",
              "type": "identifier",
            },
            "operator": "==",
            "right": Object {
              "type": "number",
              "value": 0,
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "assignmentExpression": Object {
                  "string": "",
                  "type": "string",
                },
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 0,
              },
              "name": "i",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 0,
              },
              "name": "flag",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 0,
              },
              "name": "flagsFound",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "body": Object {
            "statements": Array [
              Object {
                "left": Object {
                  "name": "flag",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "left": Object {
                    "name": "caps",
                    "type": "identifier",
                  },
                  "operator": "&",
                  "right": Object {
                    "left": Object {
                      "type": "number",
                      "value": 1,
                    },
                    "operator": "<<",
                    "right": Object {
                      "name": "i",
                      "type": "identifier",
                    },
                    "type": "binaryExpression",
                  },
                  "type": "binaryExpression",
                },
                "type": "binaryExpression",
              },
              Object {
                "condition": Object {
                  "left": Object {
                    "name": "flag",
                    "type": "identifier",
                  },
                  "operator": "!=",
                  "right": Object {
                    "type": "number",
                    "value": 0,
                  },
                  "type": "binaryExpression",
                },
                "trueStatement": Object {
                  "statements": Array [
                    Object {
                      "expression": Object {
                        "name": "flagsFound",
                        "type": "identifier",
                      },
                      "operator": "++",
                      "type": "postfixExpression",
                    },
                  ],
                  "type": "statementList",
                },
                "type": "ifStatement",
              },
            ],
            "type": "statementList",
          },
          "condition": Object {
            "left": Object {
              "name": "i",
              "type": "identifier",
            },
            "operator": "<",
            "right": Object {
              "type": "number",
              "value": 32,
            },
            "type": "binaryExpression",
          },
          "increment": Object {
            "expressions": Array [
              Object {
                "expression": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "++",
                "type": "postfixExpression",
              },
            ],
            "type": "commaExpression",
          },
          "initialization": Object {
            "expressions": Array [
              Object {
                "left": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "type": "number",
                  "value": 0,
                },
                "type": "binaryExpression",
              },
            ],
            "type": "commaExpression",
          },
          "type": "forStatement",
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 0,
              },
              "name": "flagCounter",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "body": Object {
            "statements": Array [
              Object {
                "left": Object {
                  "name": "flag",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "left": Object {
                    "name": "caps",
                    "type": "identifier",
                  },
                  "operator": "&",
                  "right": Object {
                    "left": Object {
                      "type": "number",
                      "value": 1,
                    },
                    "operator": "<<",
                    "right": Object {
                      "name": "i",
                      "type": "identifier",
                    },
                    "type": "binaryExpression",
                  },
                  "type": "binaryExpression",
                },
                "type": "binaryExpression",
              },
              Object {
                "statements": Array [
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "value",
                            "type": "identifier",
                          },
                          "operator": "+=",
                          "right": Object {
                            "string": "DDSCAPS2_CUBEMAP",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "type": "number",
                        "value": 512,
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "value",
                            "type": "identifier",
                          },
                          "operator": "+=",
                          "right": Object {
                            "string": "DDSCAPS2_CUBEMAP_POSITIVEX",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "type": "number",
                        "value": 1024,
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "value",
                            "type": "identifier",
                          },
                          "operator": "+=",
                          "right": Object {
                            "string": "DDSCAPS2_CUBEMAP_NEGATIVEX",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "type": "number",
                        "value": 2048,
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "value",
                            "type": "identifier",
                          },
                          "operator": "+=",
                          "right": Object {
                            "string": "DDSCAPS2_CUBEMAP_POSITIVEY",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "type": "number",
                        "value": 4096,
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "value",
                            "type": "identifier",
                          },
                          "operator": "+=",
                          "right": Object {
                            "string": "DDSCAPS2_CUBEMAP_NEGATIVEY",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "type": "number",
                        "value": 8192,
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "value",
                            "type": "identifier",
                          },
                          "operator": "+=",
                          "right": Object {
                            "string": "DDSCAPS2_CUBEMAP_POSITIVEZ",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "type": "number",
                        "value": 16384,
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "value",
                            "type": "identifier",
                          },
                          "operator": "+=",
                          "right": Object {
                            "string": "DDSCAPS2_CUBEMAP_NEGATIVEZ",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "type": "number",
                        "value": 32768,
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "value",
                            "type": "identifier",
                          },
                          "operator": "+=",
                          "right": Object {
                            "string": "DDSCAPS2_VOLUME",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "type": "number",
                        "value": 2097152,
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [],
                      "type": "statementList",
                    },
                    "labels": Array [],
                  },
                ],
                "type": "switchStatement",
              },
              Object {
                "condition": Object {
                  "left": Object {
                    "name": "flag",
                    "type": "identifier",
                  },
                  "operator": "!=",
                  "right": Object {
                    "type": "number",
                    "value": 0,
                  },
                  "type": "binaryExpression",
                },
                "trueStatement": Object {
                  "statements": Array [
                    Object {
                      "expression": Object {
                        "name": "flagCounter",
                        "type": "identifier",
                      },
                      "operator": "++",
                      "type": "postfixExpression",
                    },
                    Object {
                      "condition": Object {
                        "left": Object {
                          "name": "flagCounter",
                          "type": "identifier",
                        },
                        "operator": "<",
                        "right": Object {
                          "name": "flagsFound",
                          "type": "identifier",
                        },
                        "type": "binaryExpression",
                      },
                      "trueStatement": Object {
                        "statements": Array [
                          Object {
                            "left": Object {
                              "name": "value",
                              "type": "identifier",
                            },
                            "operator": "+=",
                            "right": Object {
                              "string": " | ",
                              "type": "string",
                            },
                            "type": "binaryExpression",
                          },
                        ],
                        "type": "statementList",
                      },
                      "type": "ifStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "type": "ifStatement",
              },
            ],
            "type": "statementList",
          },
          "condition": Object {
            "left": Object {
              "name": "i",
              "type": "identifier",
            },
            "operator": "<",
            "right": Object {
              "type": "number",
              "value": 32,
            },
            "type": "binaryExpression",
          },
          "increment": Object {
            "expressions": Array [
              Object {
                "expression": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "++",
                "type": "postfixExpression",
              },
            ],
            "type": "commaExpression",
          },
          "initialization": Object {
            "expressions": Array [
              Object {
                "left": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "type": "number",
                  "value": 0,
                },
                "type": "binaryExpression",
              },
            ],
            "type": "commaExpression",
          },
          "type": "forStatement",
        },
        Object {
          "assignmentExpression": Object {
            "name": "value",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ReadHeaderCaps2",
    "parameters": Array [
      Object {
        "name": "caps",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "uint",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "",
                "type": "string",
              },
              "name": "value",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "condition": Object {
            "left": Object {
              "name": "flags",
              "type": "identifier",
            },
            "operator": "==",
            "right": Object {
              "type": "number",
              "value": 0,
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "assignmentExpression": Object {
                  "string": "",
                  "type": "string",
                },
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 0,
              },
              "name": "i",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 0,
              },
              "name": "flag",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 0,
              },
              "name": "flagsFound",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "body": Object {
            "statements": Array [
              Object {
                "left": Object {
                  "name": "flag",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "left": Object {
                    "name": "caps",
                    "type": "identifier",
                  },
                  "operator": "&",
                  "right": Object {
                    "left": Object {
                      "type": "number",
                      "value": 1,
                    },
                    "operator": "<<",
                    "right": Object {
                      "name": "i",
                      "type": "identifier",
                    },
                    "type": "binaryExpression",
                  },
                  "type": "binaryExpression",
                },
                "type": "binaryExpression",
              },
              Object {
                "condition": Object {
                  "left": Object {
                    "name": "flag",
                    "type": "identifier",
                  },
                  "operator": "!=",
                  "right": Object {
                    "type": "number",
                    "value": 0,
                  },
                  "type": "binaryExpression",
                },
                "trueStatement": Object {
                  "statements": Array [
                    Object {
                      "expression": Object {
                        "name": "flagsFound",
                        "type": "identifier",
                      },
                      "operator": "++",
                      "type": "postfixExpression",
                    },
                  ],
                  "type": "statementList",
                },
                "type": "ifStatement",
              },
            ],
            "type": "statementList",
          },
          "condition": Object {
            "left": Object {
              "name": "i",
              "type": "identifier",
            },
            "operator": "<",
            "right": Object {
              "type": "number",
              "value": 32,
            },
            "type": "binaryExpression",
          },
          "increment": Object {
            "expressions": Array [
              Object {
                "expression": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "++",
                "type": "postfixExpression",
              },
            ],
            "type": "commaExpression",
          },
          "initialization": Object {
            "expressions": Array [
              Object {
                "left": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "type": "number",
                  "value": 0,
                },
                "type": "binaryExpression",
              },
            ],
            "type": "commaExpression",
          },
          "type": "forStatement",
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 0,
              },
              "name": "flagCounter",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "body": Object {
            "statements": Array [
              Object {
                "left": Object {
                  "name": "flag",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "left": Object {
                    "name": "flags",
                    "type": "identifier",
                  },
                  "operator": "&",
                  "right": Object {
                    "left": Object {
                      "type": "number",
                      "value": 1,
                    },
                    "operator": "<<",
                    "right": Object {
                      "name": "i",
                      "type": "identifier",
                    },
                    "type": "binaryExpression",
                  },
                  "type": "binaryExpression",
                },
                "type": "binaryExpression",
              },
              Object {
                "statements": Array [
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "value",
                            "type": "identifier",
                          },
                          "operator": "+=",
                          "right": Object {
                            "string": "DDS_RESOURCE_MISC_TEXTURECUBE",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "type": "number",
                        "value": 4,
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [],
                      "type": "statementList",
                    },
                    "labels": Array [],
                  },
                ],
                "type": "switchStatement",
              },
              Object {
                "condition": Object {
                  "left": Object {
                    "name": "flag",
                    "type": "identifier",
                  },
                  "operator": "!=",
                  "right": Object {
                    "type": "number",
                    "value": 0,
                  },
                  "type": "binaryExpression",
                },
                "trueStatement": Object {
                  "statements": Array [
                    Object {
                      "expression": Object {
                        "name": "flagCounter",
                        "type": "identifier",
                      },
                      "operator": "++",
                      "type": "postfixExpression",
                    },
                    Object {
                      "condition": Object {
                        "left": Object {
                          "name": "flagCounter",
                          "type": "identifier",
                        },
                        "operator": "<",
                        "right": Object {
                          "name": "flagsFound",
                          "type": "identifier",
                        },
                        "type": "binaryExpression",
                      },
                      "trueStatement": Object {
                        "statements": Array [
                          Object {
                            "left": Object {
                              "name": "value",
                              "type": "identifier",
                            },
                            "operator": "+=",
                            "right": Object {
                              "string": " | ",
                              "type": "string",
                            },
                            "type": "binaryExpression",
                          },
                        ],
                        "type": "statementList",
                      },
                      "type": "ifStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "type": "ifStatement",
              },
            ],
            "type": "statementList",
          },
          "condition": Object {
            "left": Object {
              "name": "i",
              "type": "identifier",
            },
            "operator": "<",
            "right": Object {
              "type": "number",
              "value": 32,
            },
            "type": "binaryExpression",
          },
          "increment": Object {
            "expressions": Array [
              Object {
                "expression": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "++",
                "type": "postfixExpression",
              },
            ],
            "type": "commaExpression",
          },
          "initialization": Object {
            "expressions": Array [
              Object {
                "left": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "type": "number",
                  "value": 0,
                },
                "type": "binaryExpression",
              },
            ],
            "type": "commaExpression",
          },
          "type": "forStatement",
        },
        Object {
          "assignmentExpression": Object {
            "name": "value",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ReadHeader10MiscFlag",
    "parameters": Array [
      Object {
        "name": "flags",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "uint",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "statements": Array [
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DDS_ALPHA_MODE_UNKNOWN",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 0,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DDS_ALPHA_MODE_STRAIGHT",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 1,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DDS_ALPHA_MODE_PREMULTIPLIED",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 2,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DDS_ALPHA_MODE_OPAQUE",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 3,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "DDS_ALPHA_MODE_CUSTOM",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 4,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [],
                "type": "statementList",
              },
              "labels": Array [],
            },
          ],
          "type": "switchStatement",
        },
        Object {
          "assignmentExpression": Object {
            "string": "",
            "type": "string",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ReadHeader10MiscFlags2",
    "parameters": Array [
      Object {
        "name": "flags",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "uint",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
]
`;

exports[`Sweetscape Importer creates DEX definition 1`] = `
Array [
  Object {
    "arguments": Array [],
    "name": Object {
      "name": "LittleEndian",
      "type": "identifier",
    },
    "type": "functionCallExpression",
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [],
        "initializer": Object {
          "type": "number",
          "value": 0,
        },
        "name": "odexpad",
      },
    ],
    "local": true,
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "int",
    },
  },
  Object {
    "alias": "SHA1",
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "SHA1Read",
          "type": "identifier",
        },
      },
      Object {
        "key": "format",
        "value": Object {
          "name": "hex",
          "type": "identifier",
        },
      },
    ],
    "arraySelector": Object {
      "type": "number",
      "value": 20,
    },
    "name": Object {
      "array": false,
      "name": "ubyte",
    },
    "type": "typeAlias",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "ret",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "tmp",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "i",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "body": Object {
            "statements": Array [
              Object {
                "arguments": Array [
                  Object {
                    "name": "tmp",
                    "type": "identifier",
                  },
                  Object {
                    "string": "%.2X",
                    "type": "string",
                  },
                  Object {
                    "expression": Object {
                      "name": "sig",
                      "type": "identifier",
                    },
                    "index": Object {
                      "name": "i",
                      "type": "identifier",
                    },
                    "type": "arrayIndexExpression",
                  },
                ],
                "name": Object {
                  "name": "SPrintf",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              Object {
                "left": Object {
                  "name": "ret",
                  "type": "identifier",
                },
                "operator": "+=",
                "right": Object {
                  "name": "tmp",
                  "type": "identifier",
                },
                "type": "binaryExpression",
              },
            ],
            "type": "statementList",
          },
          "condition": Object {
            "left": Object {
              "name": "i",
              "type": "identifier",
            },
            "operator": "<",
            "right": Object {
              "type": "number",
              "value": 20,
            },
            "type": "binaryExpression",
          },
          "increment": Object {
            "expressions": Array [
              Object {
                "expression": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "++",
                "type": "postfixExpression",
              },
            ],
            "type": "commaExpression",
          },
          "initialization": Object {
            "expressions": Array [
              Object {
                "left": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "type": "number",
                  "value": 0,
                },
                "type": "binaryExpression",
              },
            ],
            "type": "commaExpression",
          },
          "type": "forStatement",
        },
        Object {
          "assignmentExpression": Object {
            "name": "ret",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "SHA1Read",
    "parameters": Array [
      Object {
        "name": "sig",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "SHA1",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "DexMagicRead",
          "type": "identifier",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "arraySelector": Object {
                  "type": "number",
                  "value": 3,
                },
                "name": "dex",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "char",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "newline",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "char",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "arraySelector": Object {
                  "type": "number",
                  "value": 3,
                },
                "name": "ver",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "char",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "zero",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "char",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "left": Object {
                  "left": Object {
                    "arguments": Array [
                      Object {
                        "name": "dex",
                        "type": "identifier",
                      },
                      Object {
                        "string": "dex",
                        "type": "string",
                      },
                    ],
                    "name": Object {
                      "name": "Strcmp",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  "operator": "&&",
                  "right": Object {
                    "arguments": Array [
                      Object {
                        "name": "dex",
                        "type": "identifier",
                      },
                      Object {
                        "string": "dey",
                        "type": "string",
                      },
                    ],
                    "name": Object {
                      "name": "Strcmp",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  "type": "binaryExpression",
                },
                "operator": "||",
                "right": Object {
                  "left": Object {
                    "name": "newline",
                    "type": "identifier",
                  },
                  "operator": "!=",
                  "right": Object {
                    "string": "\\\\n",
                    "type": "string",
                  },
                  "type": "binaryExpression",
                },
                "type": "binaryExpression",
              },
              "operator": "||",
              "right": Object {
                "left": Object {
                  "name": "zero",
                  "type": "identifier",
                },
                "operator": "!=",
                "right": Object {
                  "type": "number",
                  "value": 0,
                },
                "type": "binaryExpression",
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "arguments": Array [
                    Object {
                      "string": "Invalid DEX file",
                      "type": "string",
                    },
                  ],
                  "name": Object {
                    "name": "Warning",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                Object {
                  "assignmentExpression": Object {
                    "expression": Object {
                      "type": "number",
                      "value": 1,
                    },
                    "operator": "-",
                    "type": "unaryExpression",
                  },
                  "type": "returnStatement",
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "dex_magic",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "s",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "arguments": Array [
            Object {
              "name": "s",
              "type": "identifier",
            },
            Object {
              "string": "%s %s",
              "type": "string",
            },
            Object {
              "expression": Object {
                "name": "m",
                "type": "identifier",
              },
              "name": "dex",
              "type": "propertyAccessExpression",
            },
            Object {
              "expression": Object {
                "name": "m",
                "type": "identifier",
              },
              "name": "ver",
              "type": "propertyAccessExpression",
            },
          ],
          "name": Object {
            "name": "SPrintf",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "DexMagicRead",
    "parameters": Array [
      Object {
        "name": "m",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "dex_magic",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "ULeb128Read",
          "type": "identifier",
        },
      },
      Object {
        "key": "comment",
        "value": Object {
          "string": "Unsigned little-endian base 128 value",
          "type": "string",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "uleb128 element",
                      "type": "string",
                    },
                  },
                ],
                "name": "val",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ubyte",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "val",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 127,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "uleb128 element",
                            "type": "string",
                          },
                        },
                      ],
                      "name": "val",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "ubyte",
                  },
                },
                Object {
                  "condition": Object {
                    "left": Object {
                      "name": "val",
                      "type": "identifier",
                    },
                    "operator": ">",
                    "right": Object {
                      "type": "number",
                      "value": 127,
                    },
                    "type": "binaryExpression",
                  },
                  "trueStatement": Object {
                    "statements": Array [
                      Object {
                        "annotations": Array [],
                        "declarations": Array [
                          Object {
                            "annotations": Array [
                              Object {
                                "key": "comment",
                                "value": Object {
                                  "string": "uleb128 element",
                                  "type": "string",
                                },
                              },
                            ],
                            "name": "val",
                          },
                        ],
                        "type": "variableDeclaration",
                        "variableType": Object {
                          "array": false,
                          "name": "ubyte",
                        },
                      },
                      Object {
                        "condition": Object {
                          "left": Object {
                            "name": "val",
                            "type": "identifier",
                          },
                          "operator": ">",
                          "right": Object {
                            "type": "number",
                            "value": 127,
                          },
                          "type": "binaryExpression",
                        },
                        "trueStatement": Object {
                          "statements": Array [
                            Object {
                              "annotations": Array [],
                              "declarations": Array [
                                Object {
                                  "annotations": Array [
                                    Object {
                                      "key": "comment",
                                      "value": Object {
                                        "string": "uleb128 element",
                                        "type": "string",
                                      },
                                    },
                                  ],
                                  "name": "val",
                                },
                              ],
                              "type": "variableDeclaration",
                              "variableType": Object {
                                "array": false,
                                "name": "ubyte",
                              },
                            },
                            Object {
                              "condition": Object {
                                "left": Object {
                                  "name": "val",
                                  "type": "identifier",
                                },
                                "operator": ">",
                                "right": Object {
                                  "type": "number",
                                  "value": 127,
                                },
                                "type": "binaryExpression",
                              },
                              "trueStatement": Object {
                                "statements": Array [
                                  Object {
                                    "annotations": Array [],
                                    "declarations": Array [
                                      Object {
                                        "annotations": Array [
                                          Object {
                                            "key": "comment",
                                            "value": Object {
                                              "string": "uleb128 element",
                                              "type": "string",
                                            },
                                          },
                                        ],
                                        "name": "val",
                                      },
                                    ],
                                    "type": "variableDeclaration",
                                    "variableType": Object {
                                      "array": false,
                                      "name": "ubyte",
                                    },
                                  },
                                ],
                                "type": "statementList",
                              },
                              "type": "ifStatement",
                            },
                          ],
                          "type": "statementList",
                        },
                        "type": "ifStatement",
                      },
                    ],
                    "type": "statementList",
                  },
                  "type": "ifStatement",
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "uleb128",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "result",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "uint",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "cur",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "ubyte",
          },
        },
        Object {
          "left": Object {
            "name": "result",
            "type": "identifier",
          },
          "operator": "=",
          "right": Object {
            "expression": Object {
              "expression": Object {
                "name": "u",
                "type": "identifier",
              },
              "name": "val",
              "type": "propertyAccessExpression",
            },
            "index": Object {
              "type": "number",
              "value": 0,
            },
            "type": "arrayIndexExpression",
          },
          "type": "binaryExpression",
        },
        Object {
          "condition": Object {
            "left": Object {
              "name": "result",
              "type": "identifier",
            },
            "operator": ">",
            "right": Object {
              "type": "number",
              "value": 127,
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "left": Object {
                  "name": "cur",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "expression": Object {
                    "expression": Object {
                      "name": "u",
                      "type": "identifier",
                    },
                    "name": "val",
                    "type": "propertyAccessExpression",
                  },
                  "index": Object {
                    "type": "number",
                    "value": 1,
                  },
                  "type": "arrayIndexExpression",
                },
                "type": "binaryExpression",
              },
              Object {
                "left": Object {
                  "name": "result",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "left": Object {
                    "left": Object {
                      "name": "result",
                      "type": "identifier",
                    },
                    "operator": "&",
                    "right": Object {
                      "type": "number",
                      "value": 127,
                    },
                    "type": "binaryExpression",
                  },
                  "operator": "|",
                  "right": Object {
                    "expression": Object {
                      "left": Object {
                        "left": Object {
                          "name": "cur",
                          "type": "identifier",
                        },
                        "operator": "&",
                        "right": Object {
                          "type": "number",
                          "value": 127,
                        },
                        "type": "binaryExpression",
                      },
                      "operator": "<<",
                      "right": Object {
                        "type": "number",
                        "value": 7,
                      },
                      "type": "binaryExpression",
                    },
                    "type": "castExpression",
                    "typeName": Object {
                      "array": false,
                      "name": "uint",
                    },
                  },
                  "type": "binaryExpression",
                },
                "type": "binaryExpression",
              },
              Object {
                "condition": Object {
                  "left": Object {
                    "name": "cur",
                    "type": "identifier",
                  },
                  "operator": ">",
                  "right": Object {
                    "type": "number",
                    "value": 127,
                  },
                  "type": "binaryExpression",
                },
                "trueStatement": Object {
                  "statements": Array [
                    Object {
                      "left": Object {
                        "name": "cur",
                        "type": "identifier",
                      },
                      "operator": "=",
                      "right": Object {
                        "expression": Object {
                          "expression": Object {
                            "name": "u",
                            "type": "identifier",
                          },
                          "name": "val",
                          "type": "propertyAccessExpression",
                        },
                        "index": Object {
                          "type": "number",
                          "value": 2,
                        },
                        "type": "arrayIndexExpression",
                      },
                      "type": "binaryExpression",
                    },
                    Object {
                      "left": Object {
                        "name": "result",
                        "type": "identifier",
                      },
                      "operator": "|=",
                      "right": Object {
                        "left": Object {
                          "expression": Object {
                            "left": Object {
                              "name": "cur",
                              "type": "identifier",
                            },
                            "operator": "&",
                            "right": Object {
                              "type": "number",
                              "value": 127,
                            },
                            "type": "binaryExpression",
                          },
                          "type": "castExpression",
                          "typeName": Object {
                            "array": false,
                            "name": "uint",
                          },
                        },
                        "operator": "<<",
                        "right": Object {
                          "type": "number",
                          "value": 14,
                        },
                        "type": "binaryExpression",
                      },
                      "type": "binaryExpression",
                    },
                    Object {
                      "condition": Object {
                        "left": Object {
                          "name": "cur",
                          "type": "identifier",
                        },
                        "operator": ">",
                        "right": Object {
                          "type": "number",
                          "value": 127,
                        },
                        "type": "binaryExpression",
                      },
                      "trueStatement": Object {
                        "statements": Array [
                          Object {
                            "left": Object {
                              "name": "cur",
                              "type": "identifier",
                            },
                            "operator": "=",
                            "right": Object {
                              "expression": Object {
                                "expression": Object {
                                  "name": "u",
                                  "type": "identifier",
                                },
                                "name": "val",
                                "type": "propertyAccessExpression",
                              },
                              "index": Object {
                                "type": "number",
                                "value": 3,
                              },
                              "type": "arrayIndexExpression",
                            },
                            "type": "binaryExpression",
                          },
                          Object {
                            "left": Object {
                              "name": "result",
                              "type": "identifier",
                            },
                            "operator": "|=",
                            "right": Object {
                              "left": Object {
                                "expression": Object {
                                  "left": Object {
                                    "name": "cur",
                                    "type": "identifier",
                                  },
                                  "operator": "&",
                                  "right": Object {
                                    "type": "number",
                                    "value": 127,
                                  },
                                  "type": "binaryExpression",
                                },
                                "type": "castExpression",
                                "typeName": Object {
                                  "array": false,
                                  "name": "uint",
                                },
                              },
                              "operator": "<<",
                              "right": Object {
                                "type": "number",
                                "value": 21,
                              },
                              "type": "binaryExpression",
                            },
                            "type": "binaryExpression",
                          },
                          Object {
                            "condition": Object {
                              "left": Object {
                                "name": "cur",
                                "type": "identifier",
                              },
                              "operator": ">",
                              "right": Object {
                                "type": "number",
                                "value": 127,
                              },
                              "type": "binaryExpression",
                            },
                            "trueStatement": Object {
                              "statements": Array [
                                Object {
                                  "left": Object {
                                    "name": "cur",
                                    "type": "identifier",
                                  },
                                  "operator": "=",
                                  "right": Object {
                                    "expression": Object {
                                      "expression": Object {
                                        "name": "u",
                                        "type": "identifier",
                                      },
                                      "name": "val",
                                      "type": "propertyAccessExpression",
                                    },
                                    "index": Object {
                                      "type": "number",
                                      "value": 4,
                                    },
                                    "type": "arrayIndexExpression",
                                  },
                                  "type": "binaryExpression",
                                },
                                Object {
                                  "left": Object {
                                    "name": "result",
                                    "type": "identifier",
                                  },
                                  "operator": "|=",
                                  "right": Object {
                                    "left": Object {
                                      "expression": Object {
                                        "name": "cur",
                                        "type": "identifier",
                                      },
                                      "type": "castExpression",
                                      "typeName": Object {
                                        "array": false,
                                        "name": "uint",
                                      },
                                    },
                                    "operator": "<<",
                                    "right": Object {
                                      "type": "number",
                                      "value": 28,
                                    },
                                    "type": "binaryExpression",
                                  },
                                  "type": "binaryExpression",
                                },
                              ],
                              "type": "statementList",
                            },
                            "type": "ifStatement",
                          },
                        ],
                        "type": "statementList",
                      },
                      "type": "ifStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "type": "ifStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "assignmentExpression": Object {
            "name": "result",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "uleb128_value",
    "parameters": Array [
      Object {
        "name": "u",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "uleb128",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "uint",
    },
    "type": "functionDeclaration",
  },
  Object {
    "alias": "uleb128p1",
    "annotations": Array [],
    "name": Object {
      "array": false,
      "name": "uleb128",
    },
    "type": "typeAlias",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "left": Object {
              "expression": Object {
                "arguments": Array [
                  Object {
                    "name": "u",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "uleb128_value",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "type": "castExpression",
              "typeName": Object {
                "array": false,
                "name": "int",
              },
            },
            "operator": "-",
            "right": Object {
              "type": "number",
              "value": 1,
            },
            "type": "binaryExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "uleb128p1_value",
    "parameters": Array [
      Object {
        "name": "u",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "uleb128",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "int",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "s",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "left": Object {
            "name": "s",
            "type": "identifier",
          },
          "operator": "=",
          "right": Object {
            "arguments": Array [
              Object {
                "name": "s",
                "type": "identifier",
              },
              Object {
                "string": "0x%X",
                "type": "string",
              },
              Object {
                "arguments": Array [
                  Object {
                    "name": "u",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "uleb128_value",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
            ],
            "name": Object {
              "name": "SPrintf",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "binaryExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ULeb128Read",
    "parameters": Array [
      Object {
        "name": "u",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "uleb128",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "SLeb128Read",
          "type": "identifier",
        },
      },
      Object {
        "key": "comment",
        "value": Object {
          "string": "Signed little-endian base 128 value",
          "type": "string",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "sleb128 element",
                      "type": "string",
                    },
                  },
                ],
                "name": "val",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ubyte",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "val",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 127,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "sleb128 element",
                            "type": "string",
                          },
                        },
                      ],
                      "name": "val",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "ubyte",
                  },
                },
                Object {
                  "condition": Object {
                    "left": Object {
                      "name": "val",
                      "type": "identifier",
                    },
                    "operator": ">",
                    "right": Object {
                      "type": "number",
                      "value": 127,
                    },
                    "type": "binaryExpression",
                  },
                  "trueStatement": Object {
                    "statements": Array [
                      Object {
                        "annotations": Array [],
                        "declarations": Array [
                          Object {
                            "annotations": Array [
                              Object {
                                "key": "comment",
                                "value": Object {
                                  "string": "sleb128 element",
                                  "type": "string",
                                },
                              },
                            ],
                            "name": "val",
                          },
                        ],
                        "type": "variableDeclaration",
                        "variableType": Object {
                          "array": false,
                          "name": "ubyte",
                        },
                      },
                      Object {
                        "condition": Object {
                          "left": Object {
                            "name": "val",
                            "type": "identifier",
                          },
                          "operator": ">",
                          "right": Object {
                            "type": "number",
                            "value": 127,
                          },
                          "type": "binaryExpression",
                        },
                        "trueStatement": Object {
                          "statements": Array [
                            Object {
                              "annotations": Array [],
                              "declarations": Array [
                                Object {
                                  "annotations": Array [
                                    Object {
                                      "key": "comment",
                                      "value": Object {
                                        "string": "sleb128 element",
                                        "type": "string",
                                      },
                                    },
                                  ],
                                  "name": "val",
                                },
                              ],
                              "type": "variableDeclaration",
                              "variableType": Object {
                                "array": false,
                                "name": "ubyte",
                              },
                            },
                            Object {
                              "condition": Object {
                                "left": Object {
                                  "name": "val",
                                  "type": "identifier",
                                },
                                "operator": ">",
                                "right": Object {
                                  "type": "number",
                                  "value": 127,
                                },
                                "type": "binaryExpression",
                              },
                              "trueStatement": Object {
                                "statements": Array [
                                  Object {
                                    "annotations": Array [],
                                    "declarations": Array [
                                      Object {
                                        "annotations": Array [
                                          Object {
                                            "key": "comment",
                                            "value": Object {
                                              "string": "sleb128 element",
                                              "type": "string",
                                            },
                                          },
                                        ],
                                        "name": "val",
                                      },
                                    ],
                                    "type": "variableDeclaration",
                                    "variableType": Object {
                                      "array": false,
                                      "name": "ubyte",
                                    },
                                  },
                                ],
                                "type": "statementList",
                              },
                              "type": "ifStatement",
                            },
                          ],
                          "type": "statementList",
                        },
                        "type": "ifStatement",
                      },
                    ],
                    "type": "statementList",
                  },
                  "type": "ifStatement",
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "sleb128",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "result",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "cur",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "ubyte",
          },
        },
        Object {
          "left": Object {
            "name": "result",
            "type": "identifier",
          },
          "operator": "=",
          "right": Object {
            "expression": Object {
              "expression": Object {
                "name": "u",
                "type": "identifier",
              },
              "name": "val",
              "type": "propertyAccessExpression",
            },
            "index": Object {
              "type": "number",
              "value": 0,
            },
            "type": "arrayIndexExpression",
          },
          "type": "binaryExpression",
        },
        Object {
          "condition": Object {
            "left": Object {
              "name": "result",
              "type": "identifier",
            },
            "operator": "<=",
            "right": Object {
              "type": "number",
              "value": 127,
            },
            "type": "binaryExpression",
          },
          "falseStatement": Object {
            "statements": Array [
              Object {
                "left": Object {
                  "name": "cur",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "expression": Object {
                    "expression": Object {
                      "name": "u",
                      "type": "identifier",
                    },
                    "name": "val",
                    "type": "propertyAccessExpression",
                  },
                  "index": Object {
                    "type": "number",
                    "value": 1,
                  },
                  "type": "arrayIndexExpression",
                },
                "type": "binaryExpression",
              },
              Object {
                "left": Object {
                  "name": "result",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "left": Object {
                    "left": Object {
                      "name": "result",
                      "type": "identifier",
                    },
                    "operator": "&",
                    "right": Object {
                      "type": "number",
                      "value": 127,
                    },
                    "type": "binaryExpression",
                  },
                  "operator": "|",
                  "right": Object {
                    "left": Object {
                      "expression": Object {
                        "left": Object {
                          "name": "cur",
                          "type": "identifier",
                        },
                        "operator": "&",
                        "right": Object {
                          "type": "number",
                          "value": 127,
                        },
                        "type": "binaryExpression",
                      },
                      "type": "castExpression",
                      "typeName": Object {
                        "array": false,
                        "name": "uint",
                      },
                    },
                    "operator": "<<",
                    "right": Object {
                      "type": "number",
                      "value": 7,
                    },
                    "type": "binaryExpression",
                  },
                  "type": "binaryExpression",
                },
                "type": "binaryExpression",
              },
              Object {
                "condition": Object {
                  "left": Object {
                    "name": "cur",
                    "type": "identifier",
                  },
                  "operator": "<=",
                  "right": Object {
                    "type": "number",
                    "value": 127,
                  },
                  "type": "binaryExpression",
                },
                "falseStatement": Object {
                  "statements": Array [
                    Object {
                      "left": Object {
                        "name": "cur",
                        "type": "identifier",
                      },
                      "operator": "=",
                      "right": Object {
                        "expression": Object {
                          "expression": Object {
                            "name": "u",
                            "type": "identifier",
                          },
                          "name": "val",
                          "type": "propertyAccessExpression",
                        },
                        "index": Object {
                          "type": "number",
                          "value": 2,
                        },
                        "type": "arrayIndexExpression",
                      },
                      "type": "binaryExpression",
                    },
                    Object {
                      "left": Object {
                        "name": "result",
                        "type": "identifier",
                      },
                      "operator": "|=",
                      "right": Object {
                        "left": Object {
                          "expression": Object {
                            "left": Object {
                              "name": "cur",
                              "type": "identifier",
                            },
                            "operator": "&",
                            "right": Object {
                              "type": "number",
                              "value": 127,
                            },
                            "type": "binaryExpression",
                          },
                          "type": "castExpression",
                          "typeName": Object {
                            "array": false,
                            "name": "uint",
                          },
                        },
                        "operator": "<<",
                        "right": Object {
                          "type": "number",
                          "value": 14,
                        },
                        "type": "binaryExpression",
                      },
                      "type": "binaryExpression",
                    },
                    Object {
                      "condition": Object {
                        "left": Object {
                          "name": "cur",
                          "type": "identifier",
                        },
                        "operator": "<=",
                        "right": Object {
                          "type": "number",
                          "value": 127,
                        },
                        "type": "binaryExpression",
                      },
                      "falseStatement": Object {
                        "statements": Array [
                          Object {
                            "left": Object {
                              "name": "cur",
                              "type": "identifier",
                            },
                            "operator": "=",
                            "right": Object {
                              "expression": Object {
                                "expression": Object {
                                  "name": "u",
                                  "type": "identifier",
                                },
                                "name": "val",
                                "type": "propertyAccessExpression",
                              },
                              "index": Object {
                                "type": "number",
                                "value": 3,
                              },
                              "type": "arrayIndexExpression",
                            },
                            "type": "binaryExpression",
                          },
                          Object {
                            "left": Object {
                              "name": "result",
                              "type": "identifier",
                            },
                            "operator": "|=",
                            "right": Object {
                              "left": Object {
                                "expression": Object {
                                  "left": Object {
                                    "name": "cur",
                                    "type": "identifier",
                                  },
                                  "operator": "&",
                                  "right": Object {
                                    "type": "number",
                                    "value": 127,
                                  },
                                  "type": "binaryExpression",
                                },
                                "type": "castExpression",
                                "typeName": Object {
                                  "array": false,
                                  "name": "uint",
                                },
                              },
                              "operator": "<<",
                              "right": Object {
                                "type": "number",
                                "value": 21,
                              },
                              "type": "binaryExpression",
                            },
                            "type": "binaryExpression",
                          },
                          Object {
                            "condition": Object {
                              "left": Object {
                                "name": "cur",
                                "type": "identifier",
                              },
                              "operator": "<=",
                              "right": Object {
                                "type": "number",
                                "value": 127,
                              },
                              "type": "binaryExpression",
                            },
                            "falseStatement": Object {
                              "statements": Array [
                                Object {
                                  "left": Object {
                                    "name": "cur",
                                    "type": "identifier",
                                  },
                                  "operator": "=",
                                  "right": Object {
                                    "expression": Object {
                                      "expression": Object {
                                        "name": "u",
                                        "type": "identifier",
                                      },
                                      "name": "val",
                                      "type": "propertyAccessExpression",
                                    },
                                    "index": Object {
                                      "type": "number",
                                      "value": 4,
                                    },
                                    "type": "arrayIndexExpression",
                                  },
                                  "type": "binaryExpression",
                                },
                                Object {
                                  "left": Object {
                                    "name": "result",
                                    "type": "identifier",
                                  },
                                  "operator": "|=",
                                  "right": Object {
                                    "left": Object {
                                      "expression": Object {
                                        "name": "cur",
                                        "type": "identifier",
                                      },
                                      "type": "castExpression",
                                      "typeName": Object {
                                        "array": false,
                                        "name": "uint",
                                      },
                                    },
                                    "operator": "<<",
                                    "right": Object {
                                      "type": "number",
                                      "value": 28,
                                    },
                                    "type": "binaryExpression",
                                  },
                                  "type": "binaryExpression",
                                },
                              ],
                              "type": "statementList",
                            },
                            "trueStatement": Object {
                              "statements": Array [
                                Object {
                                  "left": Object {
                                    "name": "result",
                                    "type": "identifier",
                                  },
                                  "operator": "=",
                                  "right": Object {
                                    "left": Object {
                                      "left": Object {
                                        "name": "result",
                                        "type": "identifier",
                                      },
                                      "operator": "<<",
                                      "right": Object {
                                        "type": "number",
                                        "value": 4,
                                      },
                                      "type": "binaryExpression",
                                    },
                                    "operator": ">>",
                                    "right": Object {
                                      "type": "number",
                                      "value": 4,
                                    },
                                    "type": "binaryExpression",
                                  },
                                  "type": "binaryExpression",
                                },
                              ],
                              "type": "statementList",
                            },
                            "type": "ifStatement",
                          },
                        ],
                        "type": "statementList",
                      },
                      "trueStatement": Object {
                        "statements": Array [
                          Object {
                            "left": Object {
                              "name": "result",
                              "type": "identifier",
                            },
                            "operator": "=",
                            "right": Object {
                              "left": Object {
                                "left": Object {
                                  "name": "result",
                                  "type": "identifier",
                                },
                                "operator": "<<",
                                "right": Object {
                                  "type": "number",
                                  "value": 11,
                                },
                                "type": "binaryExpression",
                              },
                              "operator": ">>",
                              "right": Object {
                                "type": "number",
                                "value": 11,
                              },
                              "type": "binaryExpression",
                            },
                            "type": "binaryExpression",
                          },
                        ],
                        "type": "statementList",
                      },
                      "type": "ifStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "trueStatement": Object {
                  "statements": Array [
                    Object {
                      "left": Object {
                        "name": "result",
                        "type": "identifier",
                      },
                      "operator": "=",
                      "right": Object {
                        "left": Object {
                          "left": Object {
                            "name": "result",
                            "type": "identifier",
                          },
                          "operator": "<<",
                          "right": Object {
                            "type": "number",
                            "value": 18,
                          },
                          "type": "binaryExpression",
                        },
                        "operator": ">>",
                        "right": Object {
                          "type": "number",
                          "value": 18,
                        },
                        "type": "binaryExpression",
                      },
                      "type": "binaryExpression",
                    },
                  ],
                  "type": "statementList",
                },
                "type": "ifStatement",
              },
            ],
            "type": "statementList",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "left": Object {
                  "name": "result",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "left": Object {
                    "left": Object {
                      "name": "result",
                      "type": "identifier",
                    },
                    "operator": "<<",
                    "right": Object {
                      "type": "number",
                      "value": 25,
                    },
                    "type": "binaryExpression",
                  },
                  "operator": ">>",
                  "right": Object {
                    "type": "number",
                    "value": 25,
                  },
                  "type": "binaryExpression",
                },
                "type": "binaryExpression",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "assignmentExpression": Object {
            "name": "result",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "sleb128_value",
    "parameters": Array [
      Object {
        "name": "u",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "sleb128",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "int",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "s",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "left": Object {
            "name": "s",
            "type": "identifier",
          },
          "operator": "=",
          "right": Object {
            "arguments": Array [
              Object {
                "name": "s",
                "type": "identifier",
              },
              Object {
                "string": "%i",
                "type": "string",
              },
              Object {
                "arguments": Array [
                  Object {
                    "name": "u",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "sleb128_value",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
            ],
            "name": Object {
              "name": "SPrintf",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "binaryExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "SLeb128Read",
    "parameters": Array [
      Object {
        "name": "u",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "sleb128",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "baseType": Object {
      "array": false,
      "name": "ubyte",
    },
    "declarations": Array [
      Object {
        "name": "VALUE_BYTE",
        "value": Object {
          "type": "number",
          "value": 0,
        },
      },
      Object {
        "name": "VALUE_SHORT",
        "value": Object {
          "type": "number",
          "value": 2,
        },
      },
      Object {
        "name": "VALUE_CHAR",
        "value": Object {
          "type": "number",
          "value": 3,
        },
      },
      Object {
        "name": "VALUE_INT",
        "value": Object {
          "type": "number",
          "value": 4,
        },
      },
      Object {
        "name": "VALUE_LONG",
        "value": Object {
          "type": "number",
          "value": 6,
        },
      },
      Object {
        "name": "VALUE_FLOAT",
        "value": Object {
          "type": "number",
          "value": 16,
        },
      },
      Object {
        "name": "VALUE_DOUBLE",
        "value": Object {
          "type": "number",
          "value": 17,
        },
      },
      Object {
        "name": "VALUE_STRING",
        "value": Object {
          "type": "number",
          "value": 23,
        },
      },
      Object {
        "name": "VALUE_TYPE",
        "value": Object {
          "type": "number",
          "value": 24,
        },
      },
      Object {
        "name": "VALUE_FIELD",
        "value": Object {
          "type": "number",
          "value": 25,
        },
      },
      Object {
        "name": "VALUE_METHOD",
        "value": Object {
          "type": "number",
          "value": 26,
        },
      },
      Object {
        "name": "VALUE_ENUM",
        "value": Object {
          "type": "number",
          "value": 27,
        },
      },
      Object {
        "name": "VALUE_ARRAY",
        "value": Object {
          "type": "number",
          "value": 28,
        },
      },
      Object {
        "name": "VALUE_ANNOTATION",
        "value": Object {
          "type": "number",
          "value": 29,
        },
      },
      Object {
        "name": "VALUE_NULL",
        "value": Object {
          "type": "number",
          "value": 30,
        },
      },
      Object {
        "name": "VALUE_BOOLEAN",
        "value": Object {
          "type": "number",
          "value": 31,
        },
      },
    ],
    "type": "enumDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "EncodedValueRead",
          "type": "identifier",
        },
      },
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "left": Object {
                    "name": "size",
                    "type": "identifier",
                  },
                  "operator": "+",
                  "right": Object {
                    "type": "number",
                    "value": 1,
                  },
                  "type": "binaryExpression",
                },
                "name": "s",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "name": "type",
                  "type": "identifier",
                },
                "name": "t",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "VALUE",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "i",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "body": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "Encoded value element",
                            "type": "string",
                          },
                        },
                      ],
                      "name": "val",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "ubyte",
                  },
                },
              ],
              "type": "statementList",
            },
            "condition": Object {
              "left": Object {
                "name": "i",
                "type": "identifier",
              },
              "operator": "<",
              "right": Object {
                "name": "s",
                "type": "identifier",
              },
              "type": "binaryExpression",
            },
            "increment": Object {
              "expressions": Array [
                Object {
                  "expression": Object {
                    "name": "i",
                    "type": "identifier",
                  },
                  "operator": "++",
                  "type": "postfixExpression",
                },
              ],
              "type": "commaExpression",
            },
            "initialization": Object {
              "expressions": Array [
                Object {
                  "left": Object {
                    "name": "i",
                    "type": "identifier",
                  },
                  "operator": "=",
                  "right": Object {
                    "type": "number",
                    "value": 0,
                  },
                  "type": "binaryExpression",
                },
              ],
              "type": "commaExpression",
            },
            "type": "forStatement",
          },
        ],
        "type": "statementList",
      },
      "parameters": Array [
        Object {
          "name": "size",
          "reference": false,
          "type": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "name": "type",
          "reference": false,
          "type": Object {
            "array": false,
            "name": "VALUE",
          },
        },
      ],
    },
    "name": "EncodedValue",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "",
                "type": "string",
              },
              "name": "s",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "statements": Array [
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "arguments": Array [
                      Object {
                        "name": "s",
                        "type": "identifier",
                      },
                      Object {
                        "string": "0x%X",
                        "type": "string",
                      },
                      Object {
                        "arguments": Array [
                          Object {
                            "name": "v",
                            "type": "identifier",
                          },
                        ],
                        "name": Object {
                          "name": "EncodedValueValue",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                    ],
                    "name": Object {
                      "name": "SPrintf",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  Object {
                    "type": "breakStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "name": "VALUE_BYTE",
                  "type": "identifier",
                },
                Object {
                  "name": "VALUE_SHORT",
                  "type": "identifier",
                },
                Object {
                  "name": "VALUE_INT",
                  "type": "identifier",
                },
                Object {
                  "name": "VALUE_LONG",
                  "type": "identifier",
                },
                Object {
                  "name": "VALUE_FLOAT",
                  "type": "identifier",
                },
                Object {
                  "name": "VALUE_DOUBLE",
                  "type": "identifier",
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "left": Object {
                      "name": "s",
                      "type": "identifier",
                    },
                    "operator": "=",
                    "right": Object {
                      "arguments": Array [
                        Object {
                          "arguments": Array [
                            Object {
                              "name": "v",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "EncodedValueValue",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                      ],
                      "name": Object {
                        "name": "StringIdRead",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    "type": "binaryExpression",
                  },
                  Object {
                    "type": "breakStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "name": "VALUE_STRING",
                  "type": "identifier",
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "left": Object {
                      "name": "s",
                      "type": "identifier",
                    },
                    "operator": "=",
                    "right": Object {
                      "arguments": Array [
                        Object {
                          "arguments": Array [
                            Object {
                              "name": "v",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "EncodedValueValue",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                      ],
                      "name": Object {
                        "name": "LongTypeIdRead",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    "type": "binaryExpression",
                  },
                  Object {
                    "type": "breakStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "name": "VALUE_TYPE",
                  "type": "identifier",
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "left": Object {
                      "name": "s",
                      "type": "identifier",
                    },
                    "operator": "=",
                    "right": Object {
                      "arguments": Array [
                        Object {
                          "arguments": Array [
                            Object {
                              "name": "v",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "EncodedValueValue",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                      ],
                      "name": Object {
                        "name": "FieldIdRead",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    "type": "binaryExpression",
                  },
                  Object {
                    "type": "breakStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "name": "VALUE_FIELD",
                  "type": "identifier",
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "left": Object {
                      "name": "s",
                      "type": "identifier",
                    },
                    "operator": "=",
                    "right": Object {
                      "arguments": Array [
                        Object {
                          "arguments": Array [
                            Object {
                              "name": "v",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "EncodedValueValue",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                      ],
                      "name": Object {
                        "name": "FieldIdRead",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    "type": "binaryExpression",
                  },
                  Object {
                    "type": "breakStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "name": "VALUE_ENUM",
                  "type": "identifier",
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "left": Object {
                      "name": "s",
                      "type": "identifier",
                    },
                    "operator": "=",
                    "right": Object {
                      "string": "NULL",
                      "type": "string",
                    },
                    "type": "binaryExpression",
                  },
                  Object {
                    "type": "breakStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "name": "VALUE_ARRAY",
                  "type": "identifier",
                },
                Object {
                  "name": "VALUE_ANNOTATION",
                  "type": "identifier",
                },
                Object {
                  "name": "VALUE_BOOLEAN",
                  "type": "identifier",
                },
                Object {
                  "name": "VALUE_NULL",
                  "type": "identifier",
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [],
                "type": "statementList",
              },
              "labels": Array [],
            },
          ],
          "type": "switchStatement",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "EncodedValueRead",
    "parameters": Array [
      Object {
        "name": "v",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "EncodedValue",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 0,
              },
              "name": "shift",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "i",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "ret",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int64",
          },
        },
        Object {
          "condition": Object {
            "left": Object {
              "expression": Object {
                "name": "v",
                "type": "identifier",
              },
              "name": "s",
              "type": "propertyAccessExpression",
            },
            "operator": "==",
            "right": Object {
              "type": "number",
              "value": 1,
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "assignmentExpression": Object {
                  "expression": Object {
                    "name": "v",
                    "type": "identifier",
                  },
                  "name": "val",
                  "type": "propertyAccessExpression",
                },
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "body": Object {
            "statements": Array [
              Object {
                "left": Object {
                  "name": "ret",
                  "type": "identifier",
                },
                "operator": "|=",
                "right": Object {
                  "left": Object {
                    "expression": Object {
                      "expression": Object {
                        "expression": Object {
                          "name": "v",
                          "type": "identifier",
                        },
                        "name": "val",
                        "type": "propertyAccessExpression",
                      },
                      "index": Object {
                        "name": "i",
                        "type": "identifier",
                      },
                      "type": "arrayIndexExpression",
                    },
                    "type": "castExpression",
                    "typeName": Object {
                      "array": false,
                      "name": "uint64",
                    },
                  },
                  "operator": "<<",
                  "right": Object {
                    "name": "shift",
                    "type": "identifier",
                  },
                  "type": "binaryExpression",
                },
                "type": "binaryExpression",
              },
              Object {
                "left": Object {
                  "name": "shift",
                  "type": "identifier",
                },
                "operator": "+=",
                "right": Object {
                  "type": "number",
                  "value": 8,
                },
                "type": "binaryExpression",
              },
            ],
            "type": "statementList",
          },
          "condition": Object {
            "left": Object {
              "name": "i",
              "type": "identifier",
            },
            "operator": "<",
            "right": Object {
              "expression": Object {
                "name": "v",
                "type": "identifier",
              },
              "name": "s",
              "type": "propertyAccessExpression",
            },
            "type": "binaryExpression",
          },
          "increment": Object {
            "expressions": Array [
              Object {
                "expression": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "++",
                "type": "postfixExpression",
              },
            ],
            "type": "commaExpression",
          },
          "initialization": Object {
            "expressions": Array [
              Object {
                "left": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "type": "number",
                  "value": 0,
                },
                "type": "binaryExpression",
              },
            ],
            "type": "commaExpression",
          },
          "type": "forStatement",
        },
        Object {
          "assignmentExpression": Object {
            "name": "ret",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "EncodedValueValue",
    "parameters": Array [
      Object {
        "name": "v",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "EncodedValue",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "int64",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "EncodedValueStructRead",
          "type": "identifier",
        },
      },
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Value type",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 5,
                },
                "name": "value_type",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "VALUE",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Value clarifying argument",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 3,
                },
                "name": "value_arg",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ubyte",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "string": "",
                  "type": "string",
                },
                "name": "valstr",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "string",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "string": "",
                  "type": "string",
                },
                "name": "typestr",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "string",
            },
          },
          Object {
            "statements": Array [
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [
                            Object {
                              "key": "comment",
                              "value": Object {
                                "string": "Byte value",
                                "type": "string",
                              },
                            },
                          ],
                          "name": "value",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "ubyte",
                      },
                    },
                    Object {
                      "arguments": Array [
                        Object {
                          "name": "valstr",
                          "type": "identifier",
                        },
                        Object {
                          "string": "0x%.2X",
                          "type": "string",
                        },
                        Object {
                          "name": "value",
                          "type": "identifier",
                        },
                      ],
                      "name": Object {
                        "name": "SPrintf",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    Object {
                      "left": Object {
                        "name": "typestr",
                        "type": "identifier",
                      },
                      "operator": "=",
                      "right": Object {
                        "string": "byte",
                        "type": "string",
                      },
                      "type": "binaryExpression",
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "VALUE_BYTE",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [
                            Object {
                              "key": "comment",
                              "value": Object {
                                "string": "Short value",
                                "type": "string",
                              },
                            },
                          ],
                          "arguments": Array [
                            Object {
                              "name": "value_arg",
                              "type": "identifier",
                            },
                            Object {
                              "name": "value_type",
                              "type": "identifier",
                            },
                          ],
                          "name": "value",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "EncodedValue",
                      },
                    },
                    Object {
                      "arguments": Array [
                        Object {
                          "name": "valstr",
                          "type": "identifier",
                        },
                        Object {
                          "string": "%i",
                          "type": "string",
                        },
                        Object {
                          "arguments": Array [
                            Object {
                              "name": "value",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "EncodedValueValue",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                      ],
                      "name": Object {
                        "name": "SPrintf",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    Object {
                      "left": Object {
                        "name": "typestr",
                        "type": "identifier",
                      },
                      "operator": "=",
                      "right": Object {
                        "string": "short",
                        "type": "string",
                      },
                      "type": "binaryExpression",
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "VALUE_SHORT",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [
                            Object {
                              "key": "comment",
                              "value": Object {
                                "string": "Char value",
                                "type": "string",
                              },
                            },
                          ],
                          "arguments": Array [
                            Object {
                              "name": "value_arg",
                              "type": "identifier",
                            },
                            Object {
                              "name": "value_type",
                              "type": "identifier",
                            },
                          ],
                          "name": "value",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "EncodedValue",
                      },
                    },
                    Object {
                      "arguments": Array [
                        Object {
                          "name": "valstr",
                          "type": "identifier",
                        },
                        Object {
                          "string": "'%c'",
                          "type": "string",
                        },
                        Object {
                          "arguments": Array [
                            Object {
                              "name": "value",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "EncodedValueValue",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                      ],
                      "name": Object {
                        "name": "SPrintf",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    Object {
                      "left": Object {
                        "name": "typestr",
                        "type": "identifier",
                      },
                      "operator": "=",
                      "right": Object {
                        "string": "char",
                        "type": "string",
                      },
                      "type": "binaryExpression",
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "VALUE_CHAR",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [
                            Object {
                              "key": "comment",
                              "value": Object {
                                "string": "Int value",
                                "type": "string",
                              },
                            },
                          ],
                          "arguments": Array [
                            Object {
                              "name": "value_arg",
                              "type": "identifier",
                            },
                            Object {
                              "name": "value_type",
                              "type": "identifier",
                            },
                          ],
                          "name": "value",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "EncodedValue",
                      },
                    },
                    Object {
                      "arguments": Array [
                        Object {
                          "name": "valstr",
                          "type": "identifier",
                        },
                        Object {
                          "string": "%i",
                          "type": "string",
                        },
                        Object {
                          "arguments": Array [
                            Object {
                              "name": "value",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "EncodedValueValue",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                      ],
                      "name": Object {
                        "name": "SPrintf",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    Object {
                      "left": Object {
                        "name": "typestr",
                        "type": "identifier",
                      },
                      "operator": "=",
                      "right": Object {
                        "string": "int",
                        "type": "string",
                      },
                      "type": "binaryExpression",
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "VALUE_INT",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [
                            Object {
                              "key": "comment",
                              "value": Object {
                                "string": "Long value",
                                "type": "string",
                              },
                            },
                          ],
                          "arguments": Array [
                            Object {
                              "name": "value_arg",
                              "type": "identifier",
                            },
                            Object {
                              "name": "value_type",
                              "type": "identifier",
                            },
                          ],
                          "name": "value",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "EncodedValue",
                      },
                    },
                    Object {
                      "arguments": Array [
                        Object {
                          "name": "valstr",
                          "type": "identifier",
                        },
                        Object {
                          "string": "%li",
                          "type": "string",
                        },
                        Object {
                          "arguments": Array [
                            Object {
                              "name": "value",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "EncodedValueValue",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                      ],
                      "name": Object {
                        "name": "SPrintf",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    Object {
                      "left": Object {
                        "name": "typestr",
                        "type": "identifier",
                      },
                      "operator": "=",
                      "right": Object {
                        "string": "long",
                        "type": "string",
                      },
                      "type": "binaryExpression",
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "VALUE_LONG",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [
                            Object {
                              "key": "comment",
                              "value": Object {
                                "string": "Float value",
                                "type": "string",
                              },
                            },
                          ],
                          "arguments": Array [
                            Object {
                              "name": "value_arg",
                              "type": "identifier",
                            },
                            Object {
                              "name": "value_type",
                              "type": "identifier",
                            },
                          ],
                          "name": "value",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "EncodedValue",
                      },
                    },
                    Object {
                      "arguments": Array [
                        Object {
                          "name": "valstr",
                          "type": "identifier",
                        },
                        Object {
                          "string": "%f",
                          "type": "string",
                        },
                        Object {
                          "arguments": Array [
                            Object {
                              "name": "value",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "EncodedValueValue",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                      ],
                      "name": Object {
                        "name": "SPrintf",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    Object {
                      "left": Object {
                        "name": "typestr",
                        "type": "identifier",
                      },
                      "operator": "=",
                      "right": Object {
                        "string": "float",
                        "type": "string",
                      },
                      "type": "binaryExpression",
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "VALUE_FLOAT",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [
                            Object {
                              "key": "comment",
                              "value": Object {
                                "string": "Double value",
                                "type": "string",
                              },
                            },
                          ],
                          "arguments": Array [
                            Object {
                              "name": "value_arg",
                              "type": "identifier",
                            },
                            Object {
                              "name": "value_type",
                              "type": "identifier",
                            },
                          ],
                          "name": "value",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "EncodedValue",
                      },
                    },
                    Object {
                      "arguments": Array [
                        Object {
                          "name": "valstr",
                          "type": "identifier",
                        },
                        Object {
                          "string": "%li",
                          "type": "string",
                        },
                        Object {
                          "arguments": Array [
                            Object {
                              "name": "value",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "EncodedValueValue",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                      ],
                      "name": Object {
                        "name": "SPrintf",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    Object {
                      "left": Object {
                        "name": "typestr",
                        "type": "identifier",
                      },
                      "operator": "=",
                      "right": Object {
                        "string": "double",
                        "type": "string",
                      },
                      "type": "binaryExpression",
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "VALUE_DOUBLE",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [
                            Object {
                              "key": "comment",
                              "value": Object {
                                "string": "String value",
                                "type": "string",
                              },
                            },
                          ],
                          "arguments": Array [
                            Object {
                              "name": "value_arg",
                              "type": "identifier",
                            },
                            Object {
                              "name": "value_type",
                              "type": "identifier",
                            },
                          ],
                          "name": "value",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "EncodedValue",
                      },
                    },
                    Object {
                      "left": Object {
                        "name": "valstr",
                        "type": "identifier",
                      },
                      "operator": "=",
                      "right": Object {
                        "left": Object {
                          "left": Object {
                            "string": "\\\\\\"",
                            "type": "string",
                          },
                          "operator": "+",
                          "right": Object {
                            "arguments": Array [
                              Object {
                                "arguments": Array [
                                  Object {
                                    "name": "value",
                                    "type": "identifier",
                                  },
                                ],
                                "name": Object {
                                  "name": "EncodedValueValue",
                                  "type": "identifier",
                                },
                                "type": "functionCallExpression",
                              },
                            ],
                            "name": Object {
                              "name": "GetStringById",
                              "type": "identifier",
                            },
                            "type": "functionCallExpression",
                          },
                          "type": "binaryExpression",
                        },
                        "operator": "+",
                        "right": Object {
                          "string": "\\\\\\"",
                          "type": "string",
                        },
                        "type": "binaryExpression",
                      },
                      "type": "binaryExpression",
                    },
                    Object {
                      "left": Object {
                        "name": "typestr",
                        "type": "identifier",
                      },
                      "operator": "=",
                      "right": Object {
                        "string": "string",
                        "type": "string",
                      },
                      "type": "binaryExpression",
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "VALUE_STRING",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [
                            Object {
                              "key": "comment",
                              "value": Object {
                                "string": "Type value",
                                "type": "string",
                              },
                            },
                          ],
                          "arguments": Array [
                            Object {
                              "name": "value_arg",
                              "type": "identifier",
                            },
                            Object {
                              "name": "value_type",
                              "type": "identifier",
                            },
                          ],
                          "name": "value",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "EncodedValue",
                      },
                    },
                    Object {
                      "left": Object {
                        "name": "valstr",
                        "type": "identifier",
                      },
                      "operator": "=",
                      "right": Object {
                        "arguments": Array [
                          Object {
                            "arguments": Array [
                              Object {
                                "name": "value",
                                "type": "identifier",
                              },
                            ],
                            "name": Object {
                              "name": "EncodedValueValue",
                              "type": "identifier",
                            },
                            "type": "functionCallExpression",
                          },
                        ],
                        "name": Object {
                          "name": "GetLongTypeById",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      "type": "binaryExpression",
                    },
                    Object {
                      "left": Object {
                        "name": "typestr",
                        "type": "identifier",
                      },
                      "operator": "=",
                      "right": Object {
                        "string": "type",
                        "type": "string",
                      },
                      "type": "binaryExpression",
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "VALUE_TYPE",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [
                            Object {
                              "key": "comment",
                              "value": Object {
                                "string": "Field value",
                                "type": "string",
                              },
                            },
                          ],
                          "arguments": Array [
                            Object {
                              "name": "value_arg",
                              "type": "identifier",
                            },
                            Object {
                              "name": "value_type",
                              "type": "identifier",
                            },
                          ],
                          "name": "value",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "EncodedValue",
                      },
                    },
                    Object {
                      "left": Object {
                        "name": "valstr",
                        "type": "identifier",
                      },
                      "operator": "=",
                      "right": Object {
                        "arguments": Array [
                          Object {
                            "arguments": Array [
                              Object {
                                "name": "value",
                                "type": "identifier",
                              },
                            ],
                            "name": Object {
                              "name": "EncodedValueValue",
                              "type": "identifier",
                            },
                            "type": "functionCallExpression",
                          },
                        ],
                        "name": Object {
                          "name": "GetFieldById",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      "type": "binaryExpression",
                    },
                    Object {
                      "left": Object {
                        "name": "typestr",
                        "type": "identifier",
                      },
                      "operator": "=",
                      "right": Object {
                        "string": "field",
                        "type": "string",
                      },
                      "type": "binaryExpression",
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "VALUE_FIELD",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [
                            Object {
                              "key": "comment",
                              "value": Object {
                                "string": "Method value",
                                "type": "string",
                              },
                            },
                          ],
                          "arguments": Array [
                            Object {
                              "name": "value_arg",
                              "type": "identifier",
                            },
                            Object {
                              "name": "value_type",
                              "type": "identifier",
                            },
                          ],
                          "name": "value",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "EncodedValue",
                      },
                    },
                    Object {
                      "left": Object {
                        "name": "valstr",
                        "type": "identifier",
                      },
                      "operator": "=",
                      "right": Object {
                        "arguments": Array [
                          Object {
                            "arguments": Array [
                              Object {
                                "name": "value",
                                "type": "identifier",
                              },
                            ],
                            "name": Object {
                              "name": "EncodedValueValue",
                              "type": "identifier",
                            },
                            "type": "functionCallExpression",
                          },
                        ],
                        "name": Object {
                          "name": "GetMethodById",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      "type": "binaryExpression",
                    },
                    Object {
                      "left": Object {
                        "name": "typestr",
                        "type": "identifier",
                      },
                      "operator": "=",
                      "right": Object {
                        "string": "method",
                        "type": "string",
                      },
                      "type": "binaryExpression",
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "VALUE_METHOD",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [
                            Object {
                              "key": "comment",
                              "value": Object {
                                "string": "Enum value",
                                "type": "string",
                              },
                            },
                          ],
                          "arguments": Array [
                            Object {
                              "name": "value_arg",
                              "type": "identifier",
                            },
                            Object {
                              "name": "value_type",
                              "type": "identifier",
                            },
                          ],
                          "name": "value",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "EncodedValue",
                      },
                    },
                    Object {
                      "left": Object {
                        "name": "valstr",
                        "type": "identifier",
                      },
                      "operator": "=",
                      "right": Object {
                        "arguments": Array [
                          Object {
                            "arguments": Array [
                              Object {
                                "name": "value",
                                "type": "identifier",
                              },
                            ],
                            "name": Object {
                              "name": "EncodedValueValue",
                              "type": "identifier",
                            },
                            "type": "functionCallExpression",
                          },
                        ],
                        "name": Object {
                          "name": "GetFieldById",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      "type": "binaryExpression",
                    },
                    Object {
                      "left": Object {
                        "name": "typestr",
                        "type": "identifier",
                      },
                      "operator": "=",
                      "right": Object {
                        "string": "enum",
                        "type": "string",
                      },
                      "type": "binaryExpression",
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "VALUE_ENUM",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [
                            Object {
                              "key": "comment",
                              "value": Object {
                                "string": "Encoded array",
                                "type": "string",
                              },
                            },
                          ],
                          "name": "array",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "encoded_array",
                      },
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "VALUE_ARRAY",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [
                            Object {
                              "key": "comment",
                              "value": Object {
                                "string": "Encoded annotation",
                                "type": "string",
                              },
                            },
                          ],
                          "name": "annotation",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "encoded_annotation",
                      },
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "VALUE_ANNOTATION",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "left": Object {
                        "left": Object {
                          "name": "typestr",
                          "type": "identifier",
                        },
                        "operator": "=",
                        "right": Object {
                          "name": "valstr",
                          "type": "identifier",
                        },
                        "type": "binaryExpression",
                      },
                      "operator": "=",
                      "right": Object {
                        "string": "NULL",
                        "type": "string",
                      },
                      "type": "binaryExpression",
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "VALUE_NULL",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "left": Object {
                        "name": "typestr",
                        "type": "identifier",
                      },
                      "operator": "=",
                      "right": Object {
                        "string": "boolean",
                        "type": "string",
                      },
                      "type": "binaryExpression",
                    },
                    Object {
                      "condition": Object {
                        "left": Object {
                          "name": "value_arg",
                          "type": "identifier",
                        },
                        "operator": "==",
                        "right": Object {
                          "type": "number",
                          "value": 0,
                        },
                        "type": "binaryExpression",
                      },
                      "falseStatement": Object {
                        "statements": Array [
                          Object {
                            "left": Object {
                              "name": "valstr",
                              "type": "identifier",
                            },
                            "operator": "=",
                            "right": Object {
                              "string": "true",
                              "type": "string",
                            },
                            "type": "binaryExpression",
                          },
                        ],
                        "type": "statementList",
                      },
                      "trueStatement": Object {
                        "statements": Array [
                          Object {
                            "left": Object {
                              "name": "valstr",
                              "type": "identifier",
                            },
                            "operator": "=",
                            "right": Object {
                              "string": "false",
                              "type": "string",
                            },
                            "type": "binaryExpression",
                          },
                        ],
                        "type": "statementList",
                      },
                      "type": "ifStatement",
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "VALUE_BOOLEAN",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "arguments": Array [
                        Object {
                          "string": "Unknown type for encoded value 0x%X",
                          "type": "string",
                        },
                        Object {
                          "name": "value_type",
                          "type": "identifier",
                        },
                      ],
                      "name": Object {
                        "name": "Warning",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "type": "defaultStatement",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [],
                  "type": "statementList",
                },
                "labels": Array [],
              },
            ],
            "type": "switchStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "encoded_value",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "left": Object {
              "left": Object {
                "expression": Object {
                  "name": "v",
                  "type": "identifier",
                },
                "name": "typestr",
                "type": "propertyAccessExpression",
              },
              "operator": "+",
              "right": Object {
                "string": ": ",
                "type": "string",
              },
              "type": "binaryExpression",
            },
            "operator": "+",
            "right": Object {
              "expression": Object {
                "name": "v",
                "type": "identifier",
              },
              "name": "valstr",
              "type": "propertyAccessExpression",
            },
            "type": "binaryExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "EncodedValueStructRead",
    "parameters": Array [
      Object {
        "name": "v",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "encoded_value",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "EncodedArrayRead",
          "type": "identifier",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Number of elements in array",
                      "type": "string",
                    },
                  },
                ],
                "name": "size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uleb128",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Encoded value element",
                      "type": "string",
                    },
                  },
                ],
                "arraySelector": Object {
                  "arguments": Array [
                    Object {
                      "name": "size",
                      "type": "identifier",
                    },
                  ],
                  "name": Object {
                    "name": "uleb128_value",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "name": "values",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "encoded_value",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "encoded_array",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 5,
              },
              "name": "count",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 1,
              },
              "name": "dots",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "i",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "condition": Object {
            "left": Object {
              "arguments": Array [
                Object {
                  "expression": Object {
                    "name": "a",
                    "type": "identifier",
                  },
                  "name": "size",
                  "type": "propertyAccessExpression",
                },
              ],
              "name": Object {
                "name": "uleb128_value",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
            "operator": "<",
            "right": Object {
              "type": "number",
              "value": 5,
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "left": Object {
                  "name": "count",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "arguments": Array [
                    Object {
                      "expression": Object {
                        "name": "a",
                        "type": "identifier",
                      },
                      "name": "size",
                      "type": "propertyAccessExpression",
                    },
                  ],
                  "name": Object {
                    "name": "uleb128_value",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "type": "binaryExpression",
              },
              Object {
                "left": Object {
                  "name": "dots",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "type": "number",
                  "value": 0,
                },
                "type": "binaryExpression",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "[",
                "type": "string",
              },
              "name": "val",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "body": Object {
            "statements": Array [
              Object {
                "left": Object {
                  "name": "val",
                  "type": "identifier",
                },
                "operator": "+=",
                "right": Object {
                  "arguments": Array [
                    Object {
                      "expression": Object {
                        "expression": Object {
                          "name": "a",
                          "type": "identifier",
                        },
                        "name": "values",
                        "type": "propertyAccessExpression",
                      },
                      "index": Object {
                        "name": "i",
                        "type": "identifier",
                      },
                      "type": "arrayIndexExpression",
                    },
                  ],
                  "name": Object {
                    "name": "EncodedValueStructRead",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "type": "binaryExpression",
              },
              Object {
                "condition": Object {
                  "left": Object {
                    "left": Object {
                      "name": "i",
                      "type": "identifier",
                    },
                    "operator": "<",
                    "right": Object {
                      "left": Object {
                        "name": "count",
                        "type": "identifier",
                      },
                      "operator": "-",
                      "right": Object {
                        "type": "number",
                        "value": 1,
                      },
                      "type": "binaryExpression",
                    },
                    "type": "binaryExpression",
                  },
                  "operator": "||",
                  "right": Object {
                    "name": "dots",
                    "type": "identifier",
                  },
                  "type": "binaryExpression",
                },
                "trueStatement": Object {
                  "statements": Array [
                    Object {
                      "left": Object {
                        "name": "val",
                        "type": "identifier",
                      },
                      "operator": "+=",
                      "right": Object {
                        "string": ", ",
                        "type": "string",
                      },
                      "type": "binaryExpression",
                    },
                  ],
                  "type": "statementList",
                },
                "type": "ifStatement",
              },
            ],
            "type": "statementList",
          },
          "condition": Object {
            "left": Object {
              "name": "i",
              "type": "identifier",
            },
            "operator": "<",
            "right": Object {
              "name": "count",
              "type": "identifier",
            },
            "type": "binaryExpression",
          },
          "increment": Object {
            "expressions": Array [
              Object {
                "expression": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "++",
                "type": "postfixExpression",
              },
            ],
            "type": "commaExpression",
          },
          "initialization": Object {
            "expressions": Array [
              Object {
                "left": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "type": "number",
                  "value": 0,
                },
                "type": "binaryExpression",
              },
            ],
            "type": "commaExpression",
          },
          "type": "forStatement",
        },
        Object {
          "condition": Object {
            "name": "dots",
            "type": "identifier",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "left": Object {
                  "name": "val",
                  "type": "identifier",
                },
                "operator": "+=",
                "right": Object {
                  "string": "...",
                  "type": "string",
                },
                "type": "binaryExpression",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "left": Object {
            "name": "val",
            "type": "identifier",
          },
          "operator": "+=",
          "right": Object {
            "string": "]",
            "type": "string",
          },
          "type": "binaryExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "val",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "EncodedArrayRead",
    "parameters": Array [
      Object {
        "name": "a",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "encoded_array",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "AnnotationElementRead",
          "type": "identifier",
        },
      },
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "read",
                    "value": Object {
                      "name": "StringIdReadUleb",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "String ID of annotation element name",
                      "type": "string",
                    },
                  },
                ],
                "name": "name_idx",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uleb128",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Encoded value",
                      "type": "string",
                    },
                  },
                ],
                "name": "value",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "encoded_value",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "annotation_element",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "arguments": Array [
                  Object {
                    "arguments": Array [
                      Object {
                        "expression": Object {
                          "name": "e",
                          "type": "identifier",
                        },
                        "name": "name_idx",
                        "type": "propertyAccessExpression",
                      },
                    ],
                    "name": Object {
                      "name": "uleb128_value",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                ],
                "name": Object {
                  "name": "GetStringById",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "name": "name",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "assignmentExpression": Object {
            "left": Object {
              "left": Object {
                "name": "name",
                "type": "identifier",
              },
              "operator": "+",
              "right": Object {
                "string": " = ",
                "type": "string",
              },
              "type": "binaryExpression",
            },
            "operator": "+",
            "right": Object {
              "expression": Object {
                "expression": Object {
                  "name": "e",
                  "type": "identifier",
                },
                "name": "value",
                "type": "propertyAccessExpression",
              },
              "name": "valstr",
              "type": "propertyAccessExpression",
            },
            "type": "binaryExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "AnnotationElementRead",
    "parameters": Array [
      Object {
        "name": "e",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "annotation_element",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "EncodedAnnotationRead",
          "type": "identifier",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "read",
                    "value": Object {
                      "name": "LongTypeIdReadUleb",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Annotation type",
                      "type": "string",
                    },
                  },
                ],
                "name": "type_idx",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uleb128",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Number of name-value mappings in annotation",
                      "type": "string",
                    },
                  },
                ],
                "name": "size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uleb128",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "arguments": Array [
                  Object {
                    "name": "size",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "uleb128_value",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "Encoded annotation contents",
                            "type": "string",
                          },
                        },
                      ],
                      "arraySelector": Object {
                        "arguments": Array [
                          Object {
                            "name": "size",
                            "type": "identifier",
                          },
                        ],
                        "name": Object {
                          "name": "uleb128_value",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      "name": "elements",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "annotation_element",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "encoded_annotation",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "s",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "arguments": Array [
            Object {
              "name": "s",
              "type": "identifier",
            },
            Object {
              "string": "%i annotations for %s",
              "type": "string",
            },
            Object {
              "arguments": Array [
                Object {
                  "expression": Object {
                    "name": "a",
                    "type": "identifier",
                  },
                  "name": "size",
                  "type": "propertyAccessExpression",
                },
              ],
              "name": Object {
                "name": "uleb128_value",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
            Object {
              "arguments": Array [
                Object {
                  "arguments": Array [
                    Object {
                      "expression": Object {
                        "name": "a",
                        "type": "identifier",
                      },
                      "name": "type_idx",
                      "type": "propertyAccessExpression",
                    },
                  ],
                  "name": Object {
                    "name": "uleb128_value",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
              ],
              "name": Object {
                "name": "GetLongTypeById",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
          ],
          "name": Object {
            "name": "SPrintf",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "EncodedAnnotationRead",
    "parameters": Array [
      Object {
        "name": "a",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "encoded_annotation",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Magic value",
                      "type": "string",
                    },
                  },
                ],
                "name": "magic",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "dex_magic",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Alder32 checksum of rest of file",
                      "type": "string",
                    },
                  },
                ],
                "name": "checksum",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "SHA-1 signature of rest of file",
                      "type": "string",
                    },
                  },
                ],
                "name": "signature",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "SHA1",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "File size in bytes",
                      "type": "string",
                    },
                  },
                ],
                "name": "file_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Header size in bytes",
                      "type": "string",
                    },
                  },
                ],
                "name": "header_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Endianness tag",
                      "type": "string",
                    },
                  },
                ],
                "name": "endian_tag",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "endian_tag",
                "type": "identifier",
              },
              "operator": "!=",
              "right": Object {
                "type": "number",
                "value": 305419896,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "arguments": Array [
                    Object {
                      "string": "Invalid endian_tag %.8X, should be %.8X",
                      "type": "string",
                    },
                    Object {
                      "name": "endian_tag",
                      "type": "identifier",
                    },
                    Object {
                      "type": "number",
                      "value": 305419896,
                    },
                  ],
                  "name": Object {
                    "name": "Warning",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Size of link section",
                      "type": "string",
                    },
                  },
                ],
                "name": "link_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "File offset of link section",
                      "type": "string",
                    },
                  },
                ],
                "name": "link_off",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "File offset of map list",
                      "type": "string",
                    },
                  },
                ],
                "name": "map_off",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Count of strings in the string ID list",
                      "type": "string",
                    },
                  },
                ],
                "name": "string_ids_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "File offset of string ID list",
                      "type": "string",
                    },
                  },
                ],
                "name": "string_ids_off",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Count of types in the type ID list",
                      "type": "string",
                    },
                  },
                ],
                "name": "type_ids_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "File offset of type ID list",
                      "type": "string",
                    },
                  },
                ],
                "name": "type_ids_off",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Count of items in the method prototype ID list",
                      "type": "string",
                    },
                  },
                ],
                "name": "proto_ids_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "File offset of method prototype ID list",
                      "type": "string",
                    },
                  },
                ],
                "name": "proto_ids_off",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Count of items in the field ID list",
                      "type": "string",
                    },
                  },
                ],
                "name": "field_ids_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "File offset of field ID list",
                      "type": "string",
                    },
                  },
                ],
                "name": "field_ids_off",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Count of items in the method ID list",
                      "type": "string",
                    },
                  },
                ],
                "name": "method_ids_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "File offset of method ID list",
                      "type": "string",
                    },
                  },
                ],
                "name": "method_ids_off",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Count of items in the class definitions list",
                      "type": "string",
                    },
                  },
                ],
                "name": "class_defs_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "File offset of class definitions list",
                      "type": "string",
                    },
                  },
                ],
                "name": "class_defs_off",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Size of data section in bytes",
                      "type": "string",
                    },
                  },
                ],
                "name": "data_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "File offset of data section",
                      "type": "string",
                    },
                  },
                ],
                "name": "data_off",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "header_item",
    "type": "structDeclaration",
  },
  Object {
    "baseType": Object {
      "array": false,
      "name": "uint",
    },
    "declarations": Array [
      Object {
        "name": "DEX_FLAG_VERIFIED",
        "value": Object {
          "type": "number",
          "value": 1,
        },
      },
      Object {
        "name": "DEX_OPT_FLAG_BIG",
        "value": Object {
          "type": "number",
          "value": 2,
        },
      },
      Object {
        "name": "DEX_OPT_FLAG_FIELDS",
        "value": Object {
          "type": "number",
          "value": 4,
        },
      },
      Object {
        "name": "DEX_OPT_FLAG_INVOCATIONS",
        "value": Object {
          "type": "number",
          "value": 8,
        },
      },
    ],
    "type": "enumDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Magic value",
                      "type": "string",
                    },
                  },
                ],
                "name": "magic",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "dex_magic",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "File offset of DEX header",
                      "type": "string",
                    },
                  },
                ],
                "name": "dex_offset",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Size of DEX file",
                      "type": "string",
                    },
                  },
                ],
                "name": "dex_length",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "File offset of optimized DEX dependency table",
                      "type": "string",
                    },
                  },
                ],
                "name": "deps_offset",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Size of DEX dependency table",
                      "type": "string",
                    },
                  },
                ],
                "name": "deps_length",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "File offset of optimized data tables",
                      "type": "string",
                    },
                  },
                ],
                "name": "opt_offset",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Size of optimized data tables",
                      "type": "string",
                    },
                  },
                ],
                "name": "opt_length",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "read",
                    "value": Object {
                      "name": "DexOptFlagsRead",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Flags",
                      "type": "string",
                    },
                  },
                ],
                "name": "flags",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DEX_OPT_FLAGS",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Alder32 checksum of dependency table and optimization table",
                      "type": "string",
                    },
                  },
                ],
                "name": "checksum",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "dexopt_header_item",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "",
                "type": "string",
              },
              "name": "ret",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "",
                "type": "string",
              },
              "name": "flags",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 1,
              },
              "name": "i",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "DEX_OPT_FLAGS",
          },
        },
        Object {
          "body": Object {
            "statements": Array [
              Object {
                "condition": Object {
                  "left": Object {
                    "name": "f",
                    "type": "identifier",
                  },
                  "operator": "&",
                  "right": Object {
                    "name": "i",
                    "type": "identifier",
                  },
                  "type": "binaryExpression",
                },
                "trueStatement": Object {
                  "statements": Array [
                    Object {
                      "left": Object {
                        "name": "flags",
                        "type": "identifier",
                      },
                      "operator": "+=",
                      "right": Object {
                        "left": Object {
                          "arguments": Array [
                            Object {
                              "name": "i",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "EnumToString",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                        "operator": "+",
                        "right": Object {
                          "string": " ",
                          "type": "string",
                        },
                        "type": "binaryExpression",
                      },
                      "type": "binaryExpression",
                    },
                  ],
                  "type": "statementList",
                },
                "type": "ifStatement",
              },
              Object {
                "left": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "left": Object {
                    "name": "i",
                    "type": "identifier",
                  },
                  "operator": "<<",
                  "right": Object {
                    "type": "number",
                    "value": 1,
                  },
                  "type": "binaryExpression",
                },
                "type": "binaryExpression",
              },
            ],
            "type": "statementList",
          },
          "condition": Object {
            "left": Object {
              "name": "i",
              "type": "identifier",
            },
            "operator": "<=",
            "right": Object {
              "name": "DEX_OPT_FLAG_INVOCATIONS",
              "type": "identifier",
            },
            "type": "binaryExpression",
          },
          "type": "whileStatement",
        },
        Object {
          "arguments": Array [
            Object {
              "name": "ret",
              "type": "identifier",
            },
            Object {
              "string": "(0x%X) %s",
              "type": "string",
            },
            Object {
              "name": "f",
              "type": "identifier",
            },
            Object {
              "name": "flags",
              "type": "identifier",
            },
          ],
          "name": Object {
            "name": "SPrintf",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "ret",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "DexOptFlagsRead",
    "parameters": Array [
      Object {
        "name": "f",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "DEX_OPT_FLAGS",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Size of string in UTF-16 code units",
                      "type": "string",
                    },
                  },
                ],
                "name": "utf16_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uleb128",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "A string in MUTF-8 format",
                      "type": "string",
                    },
                  },
                ],
                "name": "data",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "string",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "string_item",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "StringDataReader",
          "type": "identifier",
        },
      },
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "File offset of string data",
                      "type": "string",
                    },
                  },
                ],
                "name": "string_data_off",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "arguments": Array [],
                  "name": Object {
                    "name": "FTell",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "name": "pos",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int64",
            },
          },
          Object {
            "arguments": Array [
              Object {
                "left": Object {
                  "name": "odexpad",
                  "type": "identifier",
                },
                "operator": "+",
                "right": Object {
                  "name": "string_data_off",
                  "type": "identifier",
                },
                "type": "binaryExpression",
              },
            ],
            "name": Object {
              "name": "FSeek",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "String item",
                      "type": "string",
                    },
                  },
                ],
                "name": "string_data",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "string_item",
            },
          },
          Object {
            "arguments": Array [
              Object {
                "name": "pos",
                "type": "identifier",
              },
            ],
            "name": Object {
              "name": "FSeek",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "string_id_item",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "expression": Object {
              "expression": Object {
                "name": "i",
                "type": "identifier",
              },
              "name": "string_data",
              "type": "propertyAccessExpression",
            },
            "name": "data",
            "type": "propertyAccessExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "StringDataReader",
    "parameters": Array [
      Object {
        "name": "i",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "string_id_item",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "StringIDListRead",
          "type": "identifier",
        },
      },
      Object {
        "key": "comment",
        "value": Object {
          "string": "String ID list",
          "type": "string",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "name": "size",
                  "type": "identifier",
                },
                "name": "s",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "String ID",
                      "type": "string",
                    },
                  },
                ],
                "arraySelector": Object {
                  "name": "size",
                  "type": "identifier",
                },
                "name": "string_id",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "string_id_item",
            },
          },
        ],
        "type": "statementList",
      },
      "parameters": Array [
        Object {
          "name": "size",
          "reference": false,
          "type": Object {
            "array": false,
            "name": "int",
          },
        },
      ],
    },
    "name": "string_id_list",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "s",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "left": Object {
            "name": "s",
            "type": "identifier",
          },
          "operator": "=",
          "right": Object {
            "arguments": Array [
              Object {
                "name": "s",
                "type": "identifier",
              },
              Object {
                "string": "%d strings",
                "type": "string",
              },
              Object {
                "expression": Object {
                  "name": "l",
                  "type": "identifier",
                },
                "name": "s",
                "type": "propertyAccessExpression",
              },
            ],
            "name": Object {
              "name": "SPrintf",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "binaryExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "StringIDListRead",
    "parameters": Array [
      Object {
        "name": "l",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "string_id_list",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "TypeIDRead",
          "type": "identifier",
        },
      },
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "read",
                    "value": Object {
                      "name": "StringIdRead",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "String ID for this type descriptor",
                      "type": "string",
                    },
                  },
                ],
                "name": "descriptor_idx",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "type_id_item",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "arguments": Array [
              Object {
                "arguments": Array [
                  Object {
                    "expression": Object {
                      "name": "i",
                      "type": "identifier",
                    },
                    "name": "descriptor_idx",
                    "type": "propertyAccessExpression",
                  },
                ],
                "name": Object {
                  "name": "GetStringById",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
            ],
            "name": Object {
              "name": "GetLongTypeDescriptor",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "TypeIDRead",
    "parameters": Array [
      Object {
        "name": "i",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "type_id_item",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "TypeIDListRead",
          "type": "identifier",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "name": "size",
                  "type": "identifier",
                },
                "name": "s",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Type ID",
                      "type": "string",
                    },
                  },
                ],
                "arraySelector": Object {
                  "name": "size",
                  "type": "identifier",
                },
                "name": "type_id",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "type_id_item",
            },
          },
        ],
        "type": "statementList",
      },
      "parameters": Array [
        Object {
          "name": "size",
          "reference": false,
          "type": Object {
            "array": false,
            "name": "int",
          },
        },
      ],
    },
    "name": "type_id_list",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "s",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "left": Object {
            "name": "s",
            "type": "identifier",
          },
          "operator": "=",
          "right": Object {
            "arguments": Array [
              Object {
                "name": "s",
                "type": "identifier",
              },
              Object {
                "string": "%d types",
                "type": "string",
              },
              Object {
                "expression": Object {
                  "name": "l",
                  "type": "identifier",
                },
                "name": "s",
                "type": "propertyAccessExpression",
              },
            ],
            "name": Object {
              "name": "SPrintf",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "binaryExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "TypeIDListRead",
    "parameters": Array [
      Object {
        "name": "l",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "type_id_list",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Index into type_ids list",
                      "type": "string",
                    },
                  },
                ],
                "name": "type_idx",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "type_item",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "TypeItemListRead",
          "type": "identifier",
        },
      },
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Number of entries in type list",
                      "type": "string",
                    },
                  },
                ],
                "name": "size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "read",
                    "value": Object {
                      "name": "TypeItemRead",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Type entry",
                      "type": "string",
                    },
                  },
                ],
                "arraySelector": Object {
                  "name": "size",
                  "type": "identifier",
                },
                "name": "list",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "type_item",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "type_item_list",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "arguments": Array [
              Object {
                "expression": Object {
                  "name": "t",
                  "type": "identifier",
                },
                "name": "type_idx",
                "type": "propertyAccessExpression",
              },
            ],
            "name": Object {
              "name": "GetTypeById",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "TypeItemRead",
    "parameters": Array [
      Object {
        "name": "t",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "type_item",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "",
                "type": "string",
              },
              "name": "s",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "tmp",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "i",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "body": Object {
            "statements": Array [
              Object {
                "left": Object {
                  "name": "s",
                  "type": "identifier",
                },
                "operator": "+=",
                "right": Object {
                  "arguments": Array [
                    Object {
                      "expression": Object {
                        "expression": Object {
                          "expression": Object {
                            "name": "l",
                            "type": "identifier",
                          },
                          "name": "list",
                          "type": "propertyAccessExpression",
                        },
                        "index": Object {
                          "name": "i",
                          "type": "identifier",
                        },
                        "type": "arrayIndexExpression",
                      },
                      "name": "type_idx",
                      "type": "propertyAccessExpression",
                    },
                  ],
                  "name": Object {
                    "name": "GetTypeById",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "type": "binaryExpression",
              },
              Object {
                "condition": Object {
                  "left": Object {
                    "left": Object {
                      "name": "i",
                      "type": "identifier",
                    },
                    "operator": "+",
                    "right": Object {
                      "type": "number",
                      "value": 1,
                    },
                    "type": "binaryExpression",
                  },
                  "operator": "<",
                  "right": Object {
                    "expression": Object {
                      "name": "l",
                      "type": "identifier",
                    },
                    "name": "size",
                    "type": "propertyAccessExpression",
                  },
                  "type": "binaryExpression",
                },
                "trueStatement": Object {
                  "statements": Array [
                    Object {
                      "left": Object {
                        "name": "s",
                        "type": "identifier",
                      },
                      "operator": "+=",
                      "right": Object {
                        "string": ", ",
                        "type": "string",
                      },
                      "type": "binaryExpression",
                    },
                  ],
                  "type": "statementList",
                },
                "type": "ifStatement",
              },
            ],
            "type": "statementList",
          },
          "condition": Object {
            "left": Object {
              "name": "i",
              "type": "identifier",
            },
            "operator": "<",
            "right": Object {
              "expression": Object {
                "name": "l",
                "type": "identifier",
              },
              "name": "size",
              "type": "propertyAccessExpression",
            },
            "type": "binaryExpression",
          },
          "increment": Object {
            "expressions": Array [
              Object {
                "expression": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "++",
                "type": "postfixExpression",
              },
            ],
            "type": "commaExpression",
          },
          "initialization": Object {
            "expressions": Array [
              Object {
                "left": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "type": "number",
                  "value": 0,
                },
                "type": "binaryExpression",
              },
            ],
            "type": "commaExpression",
          },
          "type": "forStatement",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "TypeItemListRead",
    "parameters": Array [
      Object {
        "name": "l",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "type_item_list",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "",
                "type": "string",
              },
              "name": "desc",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "",
                "type": "string",
              },
              "name": "post",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 0,
              },
              "name": "i",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "arguments": Array [
                  Object {
                    "name": "descriptor",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "Strlen",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "name": "len",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "body": Object {
            "statements": Array [
              Object {
                "left": Object {
                  "name": "post",
                  "type": "identifier",
                },
                "operator": "+=",
                "right": Object {
                  "string": "[]",
                  "type": "string",
                },
                "type": "binaryExpression",
              },
              Object {
                "expression": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "++",
                "type": "postfixExpression",
              },
              Object {
                "condition": Object {
                  "left": Object {
                    "name": "i",
                    "type": "identifier",
                  },
                  "operator": ">=",
                  "right": Object {
                    "name": "len",
                    "type": "identifier",
                  },
                  "type": "binaryExpression",
                },
                "trueStatement": Object {
                  "assignmentExpression": Object {
                    "string": "ERROR",
                    "type": "string",
                  },
                  "type": "returnStatement",
                },
                "type": "ifStatement",
              },
            ],
            "type": "statementList",
          },
          "condition": Object {
            "left": Object {
              "expression": Object {
                "name": "descriptor",
                "type": "identifier",
              },
              "index": Object {
                "name": "i",
                "type": "identifier",
              },
              "type": "arrayIndexExpression",
            },
            "operator": "==",
            "right": Object {
              "string": "[",
              "type": "string",
            },
            "type": "binaryExpression",
          },
          "type": "whileStatement",
        },
        Object {
          "condition": Object {
            "left": Object {
              "expression": Object {
                "name": "descriptor",
                "type": "identifier",
              },
              "index": Object {
                "name": "i",
                "type": "identifier",
              },
              "type": "arrayIndexExpression",
            },
            "operator": "==",
            "right": Object {
              "string": "L",
              "type": "string",
            },
            "type": "binaryExpression",
          },
          "falseStatement": Object {
            "statements": Array [
              Object {
                "statements": Array [
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "desc",
                            "type": "identifier",
                          },
                          "operator": "=",
                          "right": Object {
                            "string": "void",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "string": "V",
                        "type": "string",
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "desc",
                            "type": "identifier",
                          },
                          "operator": "=",
                          "right": Object {
                            "string": "boolean",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "string": "Z",
                        "type": "string",
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "desc",
                            "type": "identifier",
                          },
                          "operator": "=",
                          "right": Object {
                            "string": "byte",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "string": "B",
                        "type": "string",
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "desc",
                            "type": "identifier",
                          },
                          "operator": "=",
                          "right": Object {
                            "string": "short",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "string": "S",
                        "type": "string",
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "desc",
                            "type": "identifier",
                          },
                          "operator": "=",
                          "right": Object {
                            "string": "char",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "string": "C",
                        "type": "string",
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "desc",
                            "type": "identifier",
                          },
                          "operator": "=",
                          "right": Object {
                            "string": "int",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "string": "I",
                        "type": "string",
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "desc",
                            "type": "identifier",
                          },
                          "operator": "=",
                          "right": Object {
                            "string": "long",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "string": "J",
                        "type": "string",
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "desc",
                            "type": "identifier",
                          },
                          "operator": "=",
                          "right": Object {
                            "string": "float",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "string": "F",
                        "type": "string",
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [
                        Object {
                          "left": Object {
                            "name": "desc",
                            "type": "identifier",
                          },
                          "operator": "=",
                          "right": Object {
                            "string": "double",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        Object {
                          "type": "breakStatement",
                        },
                      ],
                      "type": "statementList",
                    },
                    "labels": Array [
                      Object {
                        "string": "D",
                        "type": "string",
                      },
                    ],
                  },
                  Object {
                    "body": Object {
                      "statements": Array [],
                      "type": "statementList",
                    },
                    "labels": Array [],
                  },
                ],
                "type": "switchStatement",
              },
            ],
            "type": "statementList",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "expression": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "++",
                "type": "postfixExpression",
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "condition": Object {
                        "left": Object {
                          "expression": Object {
                            "name": "descriptor",
                            "type": "identifier",
                          },
                          "index": Object {
                            "name": "i",
                            "type": "identifier",
                          },
                          "type": "arrayIndexExpression",
                        },
                        "operator": "==",
                        "right": Object {
                          "string": "/",
                          "type": "string",
                        },
                        "type": "binaryExpression",
                      },
                      "falseStatement": Object {
                        "condition": Object {
                          "left": Object {
                            "expression": Object {
                              "name": "descriptor",
                              "type": "identifier",
                            },
                            "index": Object {
                              "name": "i",
                              "type": "identifier",
                            },
                            "type": "arrayIndexExpression",
                          },
                          "operator": "==",
                          "right": Object {
                            "string": ";",
                            "type": "string",
                          },
                          "type": "binaryExpression",
                        },
                        "falseStatement": Object {
                          "left": Object {
                            "name": "desc",
                            "type": "identifier",
                          },
                          "operator": "+=",
                          "right": Object {
                            "expression": Object {
                              "name": "descriptor",
                              "type": "identifier",
                            },
                            "index": Object {
                              "name": "i",
                              "type": "identifier",
                            },
                            "type": "arrayIndexExpression",
                          },
                          "type": "binaryExpression",
                        },
                        "trueStatement": Object {
                          "type": "breakStatement",
                        },
                        "type": "ifStatement",
                      },
                      "trueStatement": Object {
                        "left": Object {
                          "name": "desc",
                          "type": "identifier",
                        },
                        "operator": "+=",
                        "right": Object {
                          "string": ".",
                          "type": "string",
                        },
                        "type": "binaryExpression",
                      },
                      "type": "ifStatement",
                    },
                    Object {
                      "expression": Object {
                        "name": "i",
                        "type": "identifier",
                      },
                      "operator": "++",
                      "type": "postfixExpression",
                    },
                  ],
                  "type": "statementList",
                },
                "condition": Object {
                  "left": Object {
                    "name": "i",
                    "type": "identifier",
                  },
                  "operator": "<",
                  "right": Object {
                    "name": "len",
                    "type": "identifier",
                  },
                  "type": "binaryExpression",
                },
                "type": "whileStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "assignmentExpression": Object {
            "left": Object {
              "name": "desc",
              "type": "identifier",
            },
            "operator": "+",
            "right": Object {
              "name": "post",
              "type": "identifier",
            },
            "type": "binaryExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "GetLongTypeDescriptor",
    "parameters": Array [
      Object {
        "name": "descriptor",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "string",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "ProtoIDItemRead",
          "type": "identifier",
        },
      },
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "read",
                    "value": Object {
                      "name": "StringIdRead",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "String ID of short-form descriptor",
                      "type": "string",
                    },
                  },
                ],
                "name": "shorty_idx",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "read",
                    "value": Object {
                      "name": "TypeIdRead",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Type ID of the return type",
                      "type": "string",
                    },
                  },
                ],
                "name": "return_type_idx",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "File offset of parameter type list",
                      "type": "string",
                    },
                  },
                ],
                "name": "parameters_off",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "parameters_off",
                "type": "identifier",
              },
              "operator": "!=",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "initializer": Object {
                        "arguments": Array [],
                        "name": Object {
                          "name": "FTell",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      "name": "pos",
                    },
                  ],
                  "local": true,
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "int64",
                  },
                },
                Object {
                  "arguments": Array [
                    Object {
                      "left": Object {
                        "name": "odexpad",
                        "type": "identifier",
                      },
                      "operator": "+",
                      "right": Object {
                        "name": "parameters_off",
                        "type": "identifier",
                      },
                      "type": "binaryExpression",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "Prototype parameter data",
                            "type": "string",
                          },
                        },
                      ],
                      "name": "parameters",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "type_item_list",
                  },
                },
                Object {
                  "arguments": Array [
                    Object {
                      "name": "pos",
                      "type": "identifier",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "proto_id_item",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "arguments": Array [
              Object {
                "name": "i",
                "type": "identifier",
              },
            ],
            "name": Object {
              "name": "GetPrototypeSignature",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ProtoIDItemRead",
    "parameters": Array [
      Object {
        "name": "i",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "proto_id_item",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "ProtoIDListRead",
          "type": "identifier",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "name": "size",
                  "type": "identifier",
                },
                "name": "s",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Prototype ID",
                      "type": "string",
                    },
                  },
                ],
                "arraySelector": Object {
                  "name": "size",
                  "type": "identifier",
                },
                "name": "proto_id",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "proto_id_item",
            },
          },
        ],
        "type": "statementList",
      },
      "parameters": Array [
        Object {
          "name": "size",
          "reference": false,
          "type": Object {
            "array": false,
            "name": "int",
          },
        },
      ],
    },
    "name": "proto_id_list",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "s",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "left": Object {
            "name": "s",
            "type": "identifier",
          },
          "operator": "=",
          "right": Object {
            "arguments": Array [
              Object {
                "name": "s",
                "type": "identifier",
              },
              Object {
                "string": "%d prototypes",
                "type": "string",
              },
              Object {
                "expression": Object {
                  "name": "l",
                  "type": "identifier",
                },
                "name": "s",
                "type": "propertyAccessExpression",
              },
            ],
            "name": Object {
              "name": "SPrintf",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "binaryExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ProtoIDListRead",
    "parameters": Array [
      Object {
        "name": "l",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "proto_id_list",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "(",
                "type": "string",
              },
              "name": "s",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "tmp",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "i",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "body": Object {
            "statements": Array [
              Object {
                "left": Object {
                  "name": "s",
                  "type": "identifier",
                },
                "operator": "+=",
                "right": Object {
                  "arguments": Array [
                    Object {
                      "arguments": Array [
                        Object {
                          "expression": Object {
                            "expression": Object {
                              "expression": Object {
                                "name": "l",
                                "type": "identifier",
                              },
                              "name": "list",
                              "type": "propertyAccessExpression",
                            },
                            "index": Object {
                              "name": "i",
                              "type": "identifier",
                            },
                            "type": "arrayIndexExpression",
                          },
                          "name": "type_idx",
                          "type": "propertyAccessExpression",
                        },
                      ],
                      "name": Object {
                        "name": "GetTypeById",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                  ],
                  "name": Object {
                    "name": "GetLongTypeDescriptor",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "type": "binaryExpression",
              },
              Object {
                "condition": Object {
                  "left": Object {
                    "left": Object {
                      "name": "i",
                      "type": "identifier",
                    },
                    "operator": "+",
                    "right": Object {
                      "type": "number",
                      "value": 1,
                    },
                    "type": "binaryExpression",
                  },
                  "operator": "<",
                  "right": Object {
                    "expression": Object {
                      "name": "l",
                      "type": "identifier",
                    },
                    "name": "size",
                    "type": "propertyAccessExpression",
                  },
                  "type": "binaryExpression",
                },
                "trueStatement": Object {
                  "statements": Array [
                    Object {
                      "left": Object {
                        "name": "s",
                        "type": "identifier",
                      },
                      "operator": "+=",
                      "right": Object {
                        "string": ", ",
                        "type": "string",
                      },
                      "type": "binaryExpression",
                    },
                  ],
                  "type": "statementList",
                },
                "type": "ifStatement",
              },
            ],
            "type": "statementList",
          },
          "condition": Object {
            "left": Object {
              "name": "i",
              "type": "identifier",
            },
            "operator": "<",
            "right": Object {
              "expression": Object {
                "name": "l",
                "type": "identifier",
              },
              "name": "size",
              "type": "propertyAccessExpression",
            },
            "type": "binaryExpression",
          },
          "increment": Object {
            "expressions": Array [
              Object {
                "expression": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "++",
                "type": "postfixExpression",
              },
            ],
            "type": "commaExpression",
          },
          "initialization": Object {
            "expressions": Array [
              Object {
                "left": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "type": "number",
                  "value": 0,
                },
                "type": "binaryExpression",
              },
            ],
            "type": "commaExpression",
          },
          "type": "forStatement",
        },
        Object {
          "assignmentExpression": Object {
            "left": Object {
              "name": "s",
              "type": "identifier",
            },
            "operator": "+",
            "right": Object {
              "string": ")",
              "type": "string",
            },
            "type": "binaryExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "GetParameterListString",
    "parameters": Array [
      Object {
        "name": "l",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "type_item_list",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "arguments": Array [
                  Object {
                    "arguments": Array [
                      Object {
                        "expression": Object {
                          "name": "item",
                          "type": "identifier",
                        },
                        "name": "return_type_idx",
                        "type": "propertyAccessExpression",
                      },
                    ],
                    "name": Object {
                      "name": "GetTypeById",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                ],
                "name": Object {
                  "name": "GetLongTypeDescriptor",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "name": "ret",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "()",
                "type": "string",
              },
              "name": "params",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "condition": Object {
            "arguments": Array [
              Object {
                "expression": Object {
                  "name": "item",
                  "type": "identifier",
                },
                "name": "parameters",
                "type": "propertyAccessExpression",
              },
            ],
            "name": Object {
              "name": "exists",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "left": Object {
                  "name": "params",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "arguments": Array [
                    Object {
                      "expression": Object {
                        "name": "item",
                        "type": "identifier",
                      },
                      "name": "parameters",
                      "type": "propertyAccessExpression",
                    },
                  ],
                  "name": Object {
                    "name": "GetParameterListString",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "type": "binaryExpression",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "assignmentExpression": Object {
            "left": Object {
              "left": Object {
                "name": "ret",
                "type": "identifier",
              },
              "operator": "+",
              "right": Object {
                "string": " ",
                "type": "string",
              },
              "type": "binaryExpression",
            },
            "operator": "+",
            "right": Object {
              "name": "params",
              "type": "identifier",
            },
            "type": "binaryExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "GetPrototypeSignature",
    "parameters": Array [
      Object {
        "name": "item",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "proto_id_item",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "FieldIdItemRead",
          "type": "identifier",
        },
      },
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "read",
                    "value": Object {
                      "name": "LongTypeIdRead",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Type ID of the class that defines this field",
                      "type": "string",
                    },
                  },
                ],
                "name": "class_idx",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "read",
                    "value": Object {
                      "name": "LongTypeIdRead",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Type ID for the type of this field",
                      "type": "string",
                    },
                  },
                ],
                "name": "type_idx",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "read",
                    "value": Object {
                      "name": "StringIdRead",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "String ID for the field's name",
                      "type": "string",
                    },
                  },
                ],
                "name": "name_idx",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "field_id_item",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "arguments": Array [
                  Object {
                    "arguments": Array [
                      Object {
                        "expression": Object {
                          "name": "i",
                          "type": "identifier",
                        },
                        "name": "type_idx",
                        "type": "propertyAccessExpression",
                      },
                    ],
                    "name": Object {
                      "name": "GetTypeById",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                ],
                "name": Object {
                  "name": "GetLongTypeDescriptor",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "name": "type",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "arguments": Array [
                  Object {
                    "arguments": Array [
                      Object {
                        "expression": Object {
                          "name": "i",
                          "type": "identifier",
                        },
                        "name": "class_idx",
                        "type": "propertyAccessExpression",
                      },
                    ],
                    "name": Object {
                      "name": "GetTypeById",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                ],
                "name": Object {
                  "name": "GetLongTypeDescriptor",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "name": "class",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "arguments": Array [
                  Object {
                    "expression": Object {
                      "name": "i",
                      "type": "identifier",
                    },
                    "name": "name_idx",
                    "type": "propertyAccessExpression",
                  },
                ],
                "name": Object {
                  "name": "GetStringById",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "name": "name",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "assignmentExpression": Object {
            "left": Object {
              "left": Object {
                "left": Object {
                  "left": Object {
                    "name": "type",
                    "type": "identifier",
                  },
                  "operator": "+",
                  "right": Object {
                    "string": " ",
                    "type": "string",
                  },
                  "type": "binaryExpression",
                },
                "operator": "+",
                "right": Object {
                  "name": "class",
                  "type": "identifier",
                },
                "type": "binaryExpression",
              },
              "operator": "+",
              "right": Object {
                "string": ".",
                "type": "string",
              },
              "type": "binaryExpression",
            },
            "operator": "+",
            "right": Object {
              "name": "name",
              "type": "identifier",
            },
            "type": "binaryExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "FieldIdItemRead",
    "parameters": Array [
      Object {
        "name": "i",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "field_id_item",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "FieldIDListRead",
          "type": "identifier",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "name": "size",
                  "type": "identifier",
                },
                "name": "s",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Field ID",
                      "type": "string",
                    },
                  },
                ],
                "arraySelector": Object {
                  "name": "size",
                  "type": "identifier",
                },
                "name": "field_id",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "field_id_item",
            },
          },
        ],
        "type": "statementList",
      },
      "parameters": Array [
        Object {
          "name": "size",
          "reference": false,
          "type": Object {
            "array": false,
            "name": "int",
          },
        },
      ],
    },
    "name": "field_id_list",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "s",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "left": Object {
            "name": "s",
            "type": "identifier",
          },
          "operator": "=",
          "right": Object {
            "arguments": Array [
              Object {
                "name": "s",
                "type": "identifier",
              },
              Object {
                "string": "%d fields",
                "type": "string",
              },
              Object {
                "expression": Object {
                  "name": "l",
                  "type": "identifier",
                },
                "name": "s",
                "type": "propertyAccessExpression",
              },
            ],
            "name": Object {
              "name": "SPrintf",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "binaryExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "FieldIDListRead",
    "parameters": Array [
      Object {
        "name": "l",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "field_id_list",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "MethodIdItemRead",
          "type": "identifier",
        },
      },
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "read",
                    "value": Object {
                      "name": "LongTypeIdRead",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Type ID of the class that defines this method",
                      "type": "string",
                    },
                  },
                ],
                "name": "class_idx",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "read",
                    "value": Object {
                      "name": "ProtoIdxRead",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Prototype ID for this method",
                      "type": "string",
                    },
                  },
                ],
                "name": "proto_idx",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "read",
                    "value": Object {
                      "name": "StringIdRead",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "String ID for the method's name",
                      "type": "string",
                    },
                  },
                ],
                "name": "name_idx",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "method_id_item",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "s",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "arguments": Array [
            Object {
              "name": "s",
              "type": "identifier",
            },
            Object {
              "string": "(0x%X) %s",
              "type": "string",
            },
            Object {
              "name": "p",
              "type": "identifier",
            },
            Object {
              "arguments": Array [
                Object {
                  "expression": Object {
                    "expression": Object {
                      "name": "dex_proto_ids",
                      "type": "identifier",
                    },
                    "name": "proto_id",
                    "type": "propertyAccessExpression",
                  },
                  "index": Object {
                    "name": "p",
                    "type": "identifier",
                  },
                  "type": "arrayIndexExpression",
                },
              ],
              "name": Object {
                "name": "GetPrototypeSignature",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
          ],
          "name": Object {
            "name": "SPrintf",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ProtoIdxRead",
    "parameters": Array [
      Object {
        "name": "p",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "ushort",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "arguments": Array [
                  Object {
                    "arguments": Array [
                      Object {
                        "expression": Object {
                          "expression": Object {
                            "expression": Object {
                              "name": "dex_proto_ids",
                              "type": "identifier",
                            },
                            "name": "proto_id",
                            "type": "propertyAccessExpression",
                          },
                          "index": Object {
                            "expression": Object {
                              "name": "m",
                              "type": "identifier",
                            },
                            "name": "proto_idx",
                            "type": "propertyAccessExpression",
                          },
                          "type": "arrayIndexExpression",
                        },
                        "name": "return_type_idx",
                        "type": "propertyAccessExpression",
                      },
                    ],
                    "name": Object {
                      "name": "GetTypeById",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                ],
                "name": Object {
                  "name": "GetLongTypeDescriptor",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "name": "retval",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "arguments": Array [
                  Object {
                    "arguments": Array [
                      Object {
                        "expression": Object {
                          "expression": Object {
                            "expression": Object {
                              "name": "dex_type_ids",
                              "type": "identifier",
                            },
                            "name": "type_id",
                            "type": "propertyAccessExpression",
                          },
                          "index": Object {
                            "expression": Object {
                              "name": "m",
                              "type": "identifier",
                            },
                            "name": "class_idx",
                            "type": "propertyAccessExpression",
                          },
                          "type": "arrayIndexExpression",
                        },
                        "name": "descriptor_idx",
                        "type": "propertyAccessExpression",
                      },
                    ],
                    "name": Object {
                      "name": "GetStringById",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                ],
                "name": Object {
                  "name": "GetLongTypeDescriptor",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "name": "classname",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "arguments": Array [
                  Object {
                    "expression": Object {
                      "name": "m",
                      "type": "identifier",
                    },
                    "name": "name_idx",
                    "type": "propertyAccessExpression",
                  },
                ],
                "name": Object {
                  "name": "GetStringById",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "name": "methodname",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "()",
                "type": "string",
              },
              "name": "params",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "condition": Object {
            "arguments": Array [
              Object {
                "expression": Object {
                  "expression": Object {
                    "expression": Object {
                      "name": "dex_proto_ids",
                      "type": "identifier",
                    },
                    "name": "proto_id",
                    "type": "propertyAccessExpression",
                  },
                  "index": Object {
                    "expression": Object {
                      "name": "m",
                      "type": "identifier",
                    },
                    "name": "proto_idx",
                    "type": "propertyAccessExpression",
                  },
                  "type": "arrayIndexExpression",
                },
                "name": "parameters",
                "type": "propertyAccessExpression",
              },
            ],
            "name": Object {
              "name": "exists",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "left": Object {
                  "name": "params",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "arguments": Array [
                    Object {
                      "expression": Object {
                        "expression": Object {
                          "expression": Object {
                            "name": "dex_proto_ids",
                            "type": "identifier",
                          },
                          "name": "proto_id",
                          "type": "propertyAccessExpression",
                        },
                        "index": Object {
                          "expression": Object {
                            "name": "m",
                            "type": "identifier",
                          },
                          "name": "proto_idx",
                          "type": "propertyAccessExpression",
                        },
                        "type": "arrayIndexExpression",
                      },
                      "name": "parameters",
                      "type": "propertyAccessExpression",
                    },
                  ],
                  "name": Object {
                    "name": "GetParameterListString",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "type": "binaryExpression",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "assignmentExpression": Object {
            "left": Object {
              "left": Object {
                "left": Object {
                  "left": Object {
                    "left": Object {
                      "name": "retval",
                      "type": "identifier",
                    },
                    "operator": "+",
                    "right": Object {
                      "string": " ",
                      "type": "string",
                    },
                    "type": "binaryExpression",
                  },
                  "operator": "+",
                  "right": Object {
                    "name": "classname",
                    "type": "identifier",
                  },
                  "type": "binaryExpression",
                },
                "operator": "+",
                "right": Object {
                  "string": ".",
                  "type": "string",
                },
                "type": "binaryExpression",
              },
              "operator": "+",
              "right": Object {
                "name": "methodname",
                "type": "identifier",
              },
              "type": "binaryExpression",
            },
            "operator": "+",
            "right": Object {
              "name": "params",
              "type": "identifier",
            },
            "type": "binaryExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "MethodIdItemRead",
    "parameters": Array [
      Object {
        "name": "m",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "method_id_item",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "MethodIDListRead",
          "type": "identifier",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "name": "size",
                  "type": "identifier",
                },
                "name": "s",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Method ID",
                      "type": "string",
                    },
                  },
                ],
                "arraySelector": Object {
                  "name": "size",
                  "type": "identifier",
                },
                "name": "method_id",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "method_id_item",
            },
          },
        ],
        "type": "statementList",
      },
      "parameters": Array [
        Object {
          "name": "size",
          "reference": false,
          "type": Object {
            "array": false,
            "name": "int",
          },
        },
      ],
    },
    "name": "method_id_list",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "s",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "left": Object {
            "name": "s",
            "type": "identifier",
          },
          "operator": "=",
          "right": Object {
            "arguments": Array [
              Object {
                "name": "s",
                "type": "identifier",
              },
              Object {
                "string": "%d methods",
                "type": "string",
              },
              Object {
                "expression": Object {
                  "name": "l",
                  "type": "identifier",
                },
                "name": "s",
                "type": "propertyAccessExpression",
              },
            ],
            "name": Object {
              "name": "SPrintf",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "binaryExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "MethodIDListRead",
    "parameters": Array [
      Object {
        "name": "l",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "method_id_list",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "FieldAnnotationRead",
          "type": "identifier",
        },
      },
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "read",
                    "value": Object {
                      "name": "FieldIdRead",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "field_idx",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "annotations_off",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "annotations_off",
                "type": "identifier",
              },
              "operator": "!=",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "initializer": Object {
                        "arguments": Array [],
                        "name": Object {
                          "name": "FTell",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      "name": "pos",
                    },
                  ],
                  "local": true,
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "int64",
                  },
                },
                Object {
                  "arguments": Array [
                    Object {
                      "left": Object {
                        "name": "odexpad",
                        "type": "identifier",
                      },
                      "operator": "+",
                      "right": Object {
                        "name": "annotations_off",
                        "type": "identifier",
                      },
                      "type": "binaryExpression",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "name": "field_annotations",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "annotation_set_item",
                  },
                },
                Object {
                  "arguments": Array [
                    Object {
                      "name": "pos",
                      "type": "identifier",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "field_annotation",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "arguments": Array [
              Object {
                "expression": Object {
                  "name": "f",
                  "type": "identifier",
                },
                "name": "field_idx",
                "type": "propertyAccessExpression",
              },
            ],
            "name": Object {
              "name": "GetFieldById",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "FieldAnnotationRead",
    "parameters": Array [
      Object {
        "name": "f",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "field_annotation",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "MethodAnnotationRead",
          "type": "identifier",
        },
      },
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "read",
                    "value": Object {
                      "name": "MethodIdRead",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "method_idx",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "annotations_off",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "annotations_off",
                "type": "identifier",
              },
              "operator": "!=",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "initializer": Object {
                        "arguments": Array [],
                        "name": Object {
                          "name": "FTell",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      "name": "pos",
                    },
                  ],
                  "local": true,
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "int64",
                  },
                },
                Object {
                  "arguments": Array [
                    Object {
                      "left": Object {
                        "name": "odexpad",
                        "type": "identifier",
                      },
                      "operator": "+",
                      "right": Object {
                        "name": "annotations_off",
                        "type": "identifier",
                      },
                      "type": "binaryExpression",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "name": "method_annotations",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "annotation_set_item",
                  },
                },
                Object {
                  "arguments": Array [
                    Object {
                      "name": "pos",
                      "type": "identifier",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "method_annotation",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "arguments": Array [
              Object {
                "expression": Object {
                  "name": "m",
                  "type": "identifier",
                },
                "name": "method_idx",
                "type": "propertyAccessExpression",
              },
            ],
            "name": Object {
              "name": "GetMethodById",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "MethodAnnotationRead",
    "parameters": Array [
      Object {
        "name": "m",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "method_annotation",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "ParameterAnnotationRead",
          "type": "identifier",
        },
      },
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "read",
                    "value": Object {
                      "name": "MethodIdRead",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "method_idx",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "annotations_off",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "annotations_off",
                "type": "identifier",
              },
              "operator": "!=",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "initializer": Object {
                        "arguments": Array [],
                        "name": Object {
                          "name": "FTell",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      "name": "pos",
                    },
                  ],
                  "local": true,
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "int64",
                  },
                },
                Object {
                  "arguments": Array [
                    Object {
                      "left": Object {
                        "name": "odexpad",
                        "type": "identifier",
                      },
                      "operator": "+",
                      "right": Object {
                        "name": "annotations_off",
                        "type": "identifier",
                      },
                      "type": "binaryExpression",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "name": "annotations_list",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "annotation_set_ref_list",
                  },
                },
                Object {
                  "arguments": Array [
                    Object {
                      "name": "pos",
                      "type": "identifier",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "parameter_annotation",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "arguments": Array [
              Object {
                "expression": Object {
                  "expression": Object {
                    "expression": Object {
                      "name": "dex_proto_ids",
                      "type": "identifier",
                    },
                    "name": "proto_id",
                    "type": "propertyAccessExpression",
                  },
                  "index": Object {
                    "expression": Object {
                      "expression": Object {
                        "expression": Object {
                          "name": "dex_method_ids",
                          "type": "identifier",
                        },
                        "name": "method_id",
                        "type": "propertyAccessExpression",
                      },
                      "index": Object {
                        "expression": Object {
                          "name": "p",
                          "type": "identifier",
                        },
                        "name": "method_idx",
                        "type": "propertyAccessExpression",
                      },
                      "type": "arrayIndexExpression",
                    },
                    "name": "proto_idx",
                    "type": "propertyAccessExpression",
                  },
                  "type": "arrayIndexExpression",
                },
                "name": "parameters",
                "type": "propertyAccessExpression",
              },
            ],
            "name": Object {
              "name": "GetParameterListString",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ParameterAnnotationRead",
    "parameters": Array [
      Object {
        "name": "p",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "parameter_annotation",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "baseType": Object {
      "array": false,
      "name": "ubyte",
    },
    "declarations": Array [
      Object {
        "name": "VISIBILITY_BUILD",
        "value": Object {
          "type": "number",
          "value": 0,
        },
      },
      Object {
        "name": "VISIBILITY_RUNTIME",
        "value": Object {
          "type": "number",
          "value": 1,
        },
      },
      Object {
        "name": "VISIBILITY_SYSTEM",
        "value": Object {
          "type": "number",
          "value": 2,
        },
      },
    ],
    "type": "enumDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "AnnotationItemRead",
          "type": "identifier",
        },
      },
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Visibility of item",
                      "type": "string",
                    },
                  },
                ],
                "name": "visibility",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "VISIBILITY",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Encoded annotation contents",
                      "type": "string",
                    },
                  },
                ],
                "name": "annotation",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "encoded_annotation",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "annotation_item",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "arguments": Array [
              Object {
                "expression": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "name": "annotation",
                "type": "propertyAccessExpression",
              },
            ],
            "name": Object {
              "name": "EncodedAnnotationRead",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "AnnotationItemRead",
    "parameters": Array [
      Object {
        "name": "i",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "annotation_item",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "AnnotationOffItemRead",
          "type": "identifier",
        },
      },
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "File offset of this annotation entry",
                      "type": "string",
                    },
                  },
                ],
                "name": "annotation_off",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "annotation_off",
                "type": "identifier",
              },
              "operator": "!=",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "initializer": Object {
                        "arguments": Array [],
                        "name": Object {
                          "name": "FTell",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      "name": "pos",
                    },
                  ],
                  "local": true,
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "int64",
                  },
                },
                Object {
                  "arguments": Array [
                    Object {
                      "left": Object {
                        "name": "odexpad",
                        "type": "identifier",
                      },
                      "operator": "+",
                      "right": Object {
                        "name": "annotation_off",
                        "type": "identifier",
                      },
                      "type": "binaryExpression",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "Annotation item",
                            "type": "string",
                          },
                        },
                      ],
                      "name": "item",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "annotation_item",
                  },
                },
                Object {
                  "arguments": Array [
                    Object {
                      "name": "pos",
                      "type": "identifier",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "annotation_off_item",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "condition": Object {
            "arguments": Array [
              Object {
                "expression": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "name": "item",
                "type": "propertyAccessExpression",
              },
            ],
            "name": Object {
              "name": "exists",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "assignmentExpression": Object {
                  "arguments": Array [
                    Object {
                      "expression": Object {
                        "name": "i",
                        "type": "identifier",
                      },
                      "name": "item",
                      "type": "propertyAccessExpression",
                    },
                  ],
                  "name": Object {
                    "name": "AnnotationItemRead",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "AnnotationOffItemRead",
    "parameters": Array [
      Object {
        "name": "i",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "annotation_off_item",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "AnnotationSetItemRead",
          "type": "identifier",
        },
      },
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Number of entries in set",
                      "type": "string",
                    },
                  },
                ],
                "name": "size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "size",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "Annotation entry elements",
                            "type": "string",
                          },
                        },
                      ],
                      "arraySelector": Object {
                        "name": "size",
                        "type": "identifier",
                      },
                      "name": "entries",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "annotation_off_item",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "annotation_set_item",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "s",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "arguments": Array [
            Object {
              "name": "s",
              "type": "identifier",
            },
            Object {
              "string": "%i annotation entries",
              "type": "string",
            },
            Object {
              "expression": Object {
                "name": "i",
                "type": "identifier",
              },
              "name": "size",
              "type": "propertyAccessExpression",
            },
          ],
          "name": Object {
            "name": "SPrintf",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "AnnotationSetItemRead",
    "parameters": Array [
      Object {
        "name": "i",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "annotation_set_item",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "AnnotationsDirectoryItemRead",
          "type": "identifier",
        },
      },
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "File offset to class annotations",
                      "type": "string",
                    },
                  },
                ],
                "name": "class_annotations_off",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "class_annotations_off",
                "type": "identifier",
              },
              "operator": "!=",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "initializer": Object {
                        "arguments": Array [],
                        "name": Object {
                          "name": "FTell",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      "name": "pos",
                    },
                  ],
                  "local": true,
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "int64",
                  },
                },
                Object {
                  "arguments": Array [
                    Object {
                      "left": Object {
                        "name": "odexpad",
                        "type": "identifier",
                      },
                      "operator": "+",
                      "right": Object {
                        "name": "class_annotations_off",
                        "type": "identifier",
                      },
                      "type": "binaryExpression",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "Class annotations",
                            "type": "string",
                          },
                        },
                      ],
                      "name": "class_annotations",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "annotation_set_item",
                  },
                },
                Object {
                  "arguments": Array [
                    Object {
                      "name": "pos",
                      "type": "identifier",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Number of fields annotated by this item",
                      "type": "string",
                    },
                  },
                ],
                "name": "fields_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Number of methods annotated by this item",
                      "type": "string",
                    },
                  },
                ],
                "name": "methods_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Number of method parameter lists annotated by this item",
                      "type": "string",
                    },
                  },
                ],
                "name": "parameters_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "fields_size",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "List of field annotations",
                            "type": "string",
                          },
                        },
                      ],
                      "arraySelector": Object {
                        "name": "fields_size",
                        "type": "identifier",
                      },
                      "name": "field_annotations",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "field_annotation",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "methods_size",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "List of method annotations",
                            "type": "string",
                          },
                        },
                      ],
                      "arraySelector": Object {
                        "name": "methods_size",
                        "type": "identifier",
                      },
                      "name": "method_annotations",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "method_annotation",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "parameters_size",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "List of method parameter annotations",
                            "type": "string",
                          },
                        },
                      ],
                      "arraySelector": Object {
                        "name": "parameters_size",
                        "type": "identifier",
                      },
                      "name": "parameter_annotations",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "parameter_annotation",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "annotations_directory_item",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "s",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 0,
              },
              "name": "classes",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "condition": Object {
            "arguments": Array [
              Object {
                "expression": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "name": "class_annotations",
                "type": "propertyAccessExpression",
              },
            ],
            "name": Object {
              "name": "exists",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "left": Object {
                  "name": "classes",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "expression": Object {
                    "expression": Object {
                      "name": "i",
                      "type": "identifier",
                    },
                    "name": "class_annotations",
                    "type": "propertyAccessExpression",
                  },
                  "name": "size",
                  "type": "propertyAccessExpression",
                },
                "type": "binaryExpression",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "arguments": Array [
            Object {
              "name": "s",
              "type": "identifier",
            },
            Object {
              "string": "%i class annotations, %i field annotations, %i method annotations, %i parameter annotations",
              "type": "string",
            },
            Object {
              "name": "classes",
              "type": "identifier",
            },
            Object {
              "expression": Object {
                "name": "i",
                "type": "identifier",
              },
              "name": "fields_size",
              "type": "propertyAccessExpression",
            },
            Object {
              "expression": Object {
                "name": "i",
                "type": "identifier",
              },
              "name": "methods_size",
              "type": "propertyAccessExpression",
            },
            Object {
              "expression": Object {
                "name": "i",
                "type": "identifier",
              },
              "name": "parameters_size",
              "type": "propertyAccessExpression",
            },
          ],
          "name": Object {
            "name": "SPrintf",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "AnnotationsDirectoryItemRead",
    "parameters": Array [
      Object {
        "name": "i",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "annotations_directory_item",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "File offset of annotation",
                      "type": "string",
                    },
                  },
                ],
                "name": "annotations_off",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "annotations_off",
                "type": "identifier",
              },
              "operator": "!=",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "initializer": Object {
                        "arguments": Array [],
                        "name": Object {
                          "name": "FTell",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      "name": "pos",
                    },
                  ],
                  "local": true,
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "int64",
                  },
                },
                Object {
                  "arguments": Array [
                    Object {
                      "left": Object {
                        "name": "odexpad",
                        "type": "identifier",
                      },
                      "operator": "+",
                      "right": Object {
                        "name": "annotations_off",
                        "type": "identifier",
                      },
                      "type": "binaryExpression",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "Annotation set item",
                            "type": "string",
                          },
                        },
                      ],
                      "name": "item",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "annotation_set_item",
                  },
                },
                Object {
                  "arguments": Array [
                    Object {
                      "name": "pos",
                      "type": "identifier",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "annotation_set_ref_item",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Number of entries in annotation list",
                      "type": "string",
                    },
                  },
                ],
                "name": "size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "size",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "Annotation set elements",
                            "type": "string",
                          },
                        },
                      ],
                      "arraySelector": Object {
                        "name": "size",
                        "type": "identifier",
                      },
                      "name": "list",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "annotation_set_ref_item",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "annotation_set_ref_list",
    "type": "structDeclaration",
  },
  Object {
    "baseType": Object {
      "array": false,
      "name": "uint",
    },
    "declarations": Array [
      Object {
        "name": "ACC_PUBLIC",
        "value": Object {
          "type": "number",
          "value": 1,
        },
      },
      Object {
        "name": "ACC_PRIVATE",
        "value": Object {
          "type": "number",
          "value": 2,
        },
      },
      Object {
        "name": "ACC_PROTECTED",
        "value": Object {
          "type": "number",
          "value": 4,
        },
      },
      Object {
        "name": "ACC_STATIC",
        "value": Object {
          "type": "number",
          "value": 8,
        },
      },
      Object {
        "name": "ACC_FINAL",
        "value": Object {
          "type": "number",
          "value": 16,
        },
      },
      Object {
        "name": "ACC_SYNCHRONIZED",
        "value": Object {
          "type": "number",
          "value": 32,
        },
      },
      Object {
        "name": "ACC_VOLATILE",
        "value": Object {
          "type": "number",
          "value": 64,
        },
      },
      Object {
        "name": "ACC_TRANSIENT",
        "value": Object {
          "type": "number",
          "value": 128,
        },
      },
      Object {
        "name": "ACC_NATIVE",
        "value": Object {
          "type": "number",
          "value": 256,
        },
      },
      Object {
        "name": "ACC_INTERFACE",
        "value": Object {
          "type": "number",
          "value": 512,
        },
      },
      Object {
        "name": "ACC_ABSTRACT",
        "value": Object {
          "type": "number",
          "value": 1024,
        },
      },
      Object {
        "name": "ACC_STRICT",
        "value": Object {
          "type": "number",
          "value": 2048,
        },
      },
      Object {
        "name": "ACC_SYNTHETIC",
        "value": Object {
          "type": "number",
          "value": 4096,
        },
      },
      Object {
        "name": "ACC_ANNOTATION",
        "value": Object {
          "type": "number",
          "value": 8192,
        },
      },
      Object {
        "name": "ACC_ENUM",
        "value": Object {
          "type": "number",
          "value": 16384,
        },
      },
      Object {
        "name": "ACC_CONSTRUCTOR",
        "value": Object {
          "type": "number",
          "value": 65536,
        },
      },
      Object {
        "name": "ACC_DECLARED_SYNCHRONIZED",
        "value": Object {
          "type": "number",
          "value": 131072,
        },
      },
    ],
    "type": "enumDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "",
                "type": "string",
              },
              "name": "ret",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "",
                "type": "string",
              },
              "name": "flags",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 1,
              },
              "name": "i",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "ACCESS_FLAGS",
          },
        },
        Object {
          "body": Object {
            "statements": Array [
              Object {
                "condition": Object {
                  "left": Object {
                    "name": "f",
                    "type": "identifier",
                  },
                  "operator": "&",
                  "right": Object {
                    "name": "i",
                    "type": "identifier",
                  },
                  "type": "binaryExpression",
                },
                "trueStatement": Object {
                  "statements": Array [
                    Object {
                      "left": Object {
                        "name": "flags",
                        "type": "identifier",
                      },
                      "operator": "+=",
                      "right": Object {
                        "left": Object {
                          "arguments": Array [
                            Object {
                              "name": "i",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "EnumToString",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                        "operator": "+",
                        "right": Object {
                          "string": " ",
                          "type": "string",
                        },
                        "type": "binaryExpression",
                      },
                      "type": "binaryExpression",
                    },
                  ],
                  "type": "statementList",
                },
                "type": "ifStatement",
              },
              Object {
                "left": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "left": Object {
                    "name": "i",
                    "type": "identifier",
                  },
                  "operator": "<<",
                  "right": Object {
                    "type": "number",
                    "value": 1,
                  },
                  "type": "binaryExpression",
                },
                "type": "binaryExpression",
              },
            ],
            "type": "statementList",
          },
          "condition": Object {
            "left": Object {
              "name": "i",
              "type": "identifier",
            },
            "operator": "<=",
            "right": Object {
              "name": "ACC_DECLARED_SYNCHRONIZED",
              "type": "identifier",
            },
            "type": "binaryExpression",
          },
          "type": "whileStatement",
        },
        Object {
          "arguments": Array [
            Object {
              "name": "ret",
              "type": "identifier",
            },
            Object {
              "string": "(0x%X) %s",
              "type": "string",
            },
            Object {
              "name": "f",
              "type": "identifier",
            },
            Object {
              "name": "flags",
              "type": "identifier",
            },
          ],
          "name": Object {
            "name": "SPrintf",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "ret",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "AccessFlagsRead",
    "parameters": Array [
      Object {
        "name": "f",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "ACCESS_FLAGS",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "arguments": Array [
              Object {
                "arguments": Array [
                  Object {
                    "name": "f",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "uleb128_value",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
            ],
            "name": Object {
              "name": "AccessFlagsRead",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "AccessFlagsReadUleb",
    "parameters": Array [
      Object {
        "name": "f",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "uleb128",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "declarations": Array [
      Object {
        "name": "AF_CLASS",
      },
      Object {
        "name": "AF_FIELD",
      },
      Object {
        "name": "AF_METHOD",
      },
    ],
    "type": "enumDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "statements": Array [
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "public",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "name": "ACC_PUBLIC",
                  "type": "identifier",
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "private",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "name": "ACC_PRIVATE",
                  "type": "identifier",
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "protected",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "name": "ACC_PROTECTED",
                  "type": "identifier",
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "static",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "name": "ACC_STATIC",
                  "type": "identifier",
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "final",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "name": "ACC_FINAL",
                  "type": "identifier",
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "synchronized",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "name": "ACC_SYNCHRONIZED",
                  "type": "identifier",
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "condition": Object {
                      "left": Object {
                        "name": "type",
                        "type": "identifier",
                      },
                      "operator": "==",
                      "right": Object {
                        "name": "AF_FIELD",
                        "type": "identifier",
                      },
                      "type": "binaryExpression",
                    },
                    "falseStatement": Object {
                      "assignmentExpression": Object {
                        "string": "bridge",
                        "type": "string",
                      },
                      "type": "returnStatement",
                    },
                    "trueStatement": Object {
                      "assignmentExpression": Object {
                        "string": "volatile",
                        "type": "string",
                      },
                      "type": "returnStatement",
                    },
                    "type": "ifStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "name": "ACC_VOLATILE",
                  "type": "identifier",
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "condition": Object {
                      "left": Object {
                        "name": "type",
                        "type": "identifier",
                      },
                      "operator": "==",
                      "right": Object {
                        "name": "AF_FIELD",
                        "type": "identifier",
                      },
                      "type": "binaryExpression",
                    },
                    "falseStatement": Object {
                      "assignmentExpression": Object {
                        "string": "varargs",
                        "type": "string",
                      },
                      "type": "returnStatement",
                    },
                    "trueStatement": Object {
                      "assignmentExpression": Object {
                        "string": "transient",
                        "type": "string",
                      },
                      "type": "returnStatement",
                    },
                    "type": "ifStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "name": "ACC_TRANSIENT",
                  "type": "identifier",
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "native",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "name": "ACC_NATIVE",
                  "type": "identifier",
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "interface",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "name": "ACC_INTERFACE",
                  "type": "identifier",
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "abstract",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "name": "ACC_ABSTRACT",
                  "type": "identifier",
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "strict",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "name": "ACC_STRICT",
                  "type": "identifier",
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "synthetic",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "name": "ACC_SYNTHETIC",
                  "type": "identifier",
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "annotation",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "name": "ACC_ANNOTATION",
                  "type": "identifier",
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "enum",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "name": "ACC_ENUM",
                  "type": "identifier",
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "constructor",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "name": "ACC_CONSTRUCTOR",
                  "type": "identifier",
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "assignmentExpression": Object {
                      "string": "declared-synchronized",
                      "type": "string",
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "name": "ACC_DECLARED_SYNCHRONIZED",
                  "type": "identifier",
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [],
                "type": "statementList",
              },
              "labels": Array [],
            },
          ],
          "type": "switchStatement",
        },
        Object {
          "assignmentExpression": Object {
            "string": "ERROR",
            "type": "string",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "GetFriendlyAccessFlag",
    "parameters": Array [
      Object {
        "name": "flag",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "int",
        },
      },
      Object {
        "name": "type",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "AF_TYPE",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "",
                "type": "string",
              },
              "name": "flags",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 1,
              },
              "name": "i",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "ACCESS_FLAGS",
          },
        },
        Object {
          "body": Object {
            "statements": Array [
              Object {
                "condition": Object {
                  "left": Object {
                    "name": "f",
                    "type": "identifier",
                  },
                  "operator": "&",
                  "right": Object {
                    "name": "i",
                    "type": "identifier",
                  },
                  "type": "binaryExpression",
                },
                "trueStatement": Object {
                  "statements": Array [
                    Object {
                      "left": Object {
                        "name": "flags",
                        "type": "identifier",
                      },
                      "operator": "+=",
                      "right": Object {
                        "left": Object {
                          "arguments": Array [
                            Object {
                              "name": "i",
                              "type": "identifier",
                            },
                            Object {
                              "name": "type",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "GetFriendlyAccessFlag",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                        "operator": "+",
                        "right": Object {
                          "string": " ",
                          "type": "string",
                        },
                        "type": "binaryExpression",
                      },
                      "type": "binaryExpression",
                    },
                  ],
                  "type": "statementList",
                },
                "type": "ifStatement",
              },
              Object {
                "left": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "left": Object {
                    "name": "i",
                    "type": "identifier",
                  },
                  "operator": "<<",
                  "right": Object {
                    "type": "number",
                    "value": 1,
                  },
                  "type": "binaryExpression",
                },
                "type": "binaryExpression",
              },
            ],
            "type": "statementList",
          },
          "condition": Object {
            "left": Object {
              "name": "i",
              "type": "identifier",
            },
            "operator": "<=",
            "right": Object {
              "name": "ACC_DECLARED_SYNCHRONIZED",
              "type": "identifier",
            },
            "type": "binaryExpression",
          },
          "type": "whileStatement",
        },
        Object {
          "assignmentExpression": Object {
            "name": "flags",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "GetFriendlyAccessFlags",
    "parameters": Array [
      Object {
        "name": "f",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "ACCESS_FLAGS",
        },
      },
      Object {
        "name": "type",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "AF_TYPE",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "EncodedFieldRead",
          "type": "identifier",
        },
      },
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "name": "previd",
                  "type": "identifier",
                },
                "name": "p",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Field ID for this field, represented as the difference from the previous index",
                      "type": "string",
                    },
                  },
                ],
                "name": "field_idx_diff",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uleb128",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "read",
                    "value": Object {
                      "name": "AccessFlagsReadUleb",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Access flags",
                      "type": "string",
                    },
                  },
                ],
                "name": "access_flags",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uleb128",
            },
          },
        ],
        "type": "statementList",
      },
      "parameters": Array [
        Object {
          "name": "previd",
          "reference": false,
          "type": Object {
            "array": false,
            "name": "int",
          },
        },
      ],
    },
    "name": "encoded_field",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "left": Object {
                  "expression": Object {
                    "name": "f",
                    "type": "identifier",
                  },
                  "name": "p",
                  "type": "propertyAccessExpression",
                },
                "operator": "+",
                "right": Object {
                  "arguments": Array [
                    Object {
                      "expression": Object {
                        "name": "f",
                        "type": "identifier",
                      },
                      "name": "field_idx_diff",
                      "type": "propertyAccessExpression",
                    },
                  ],
                  "name": Object {
                    "name": "uleb128_value",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "type": "binaryExpression",
              },
              "name": "realid",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "assignmentExpression": Object {
            "left": Object {
              "arguments": Array [
                Object {
                  "arguments": Array [
                    Object {
                      "expression": Object {
                        "name": "f",
                        "type": "identifier",
                      },
                      "name": "access_flags",
                      "type": "propertyAccessExpression",
                    },
                  ],
                  "name": Object {
                    "name": "uleb128_value",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                Object {
                  "name": "AF_FIELD",
                  "type": "identifier",
                },
              ],
              "name": Object {
                "name": "GetFriendlyAccessFlags",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
            "operator": "+",
            "right": Object {
              "arguments": Array [
                Object {
                  "name": "realid",
                  "type": "identifier",
                },
              ],
              "name": Object {
                "name": "GetFieldById",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
            "type": "binaryExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "EncodedFieldRead",
    "parameters": Array [
      Object {
        "name": "f",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "encoded_field",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "EncodedFieldListRead",
          "type": "identifier",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "name": "size",
                  "type": "identifier",
                },
                "name": "s",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "i",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "type": "number",
                  "value": 0,
                },
                "name": "fieldid",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "body": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "Encoded field",
                            "type": "string",
                          },
                        },
                      ],
                      "arguments": Array [
                        Object {
                          "name": "fieldid",
                          "type": "identifier",
                        },
                      ],
                      "name": "field",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "encoded_field",
                  },
                },
                Object {
                  "left": Object {
                    "name": "fieldid",
                    "type": "identifier",
                  },
                  "operator": "=",
                  "right": Object {
                    "left": Object {
                      "name": "fieldid",
                      "type": "identifier",
                    },
                    "operator": "+",
                    "right": Object {
                      "arguments": Array [
                        Object {
                          "expression": Object {
                            "name": "field",
                            "type": "identifier",
                          },
                          "name": "field_idx_diff",
                          "type": "propertyAccessExpression",
                        },
                      ],
                      "name": Object {
                        "name": "uleb128_value",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    "type": "binaryExpression",
                  },
                  "type": "binaryExpression",
                },
              ],
              "type": "statementList",
            },
            "condition": Object {
              "left": Object {
                "name": "i",
                "type": "identifier",
              },
              "operator": "<",
              "right": Object {
                "name": "size",
                "type": "identifier",
              },
              "type": "binaryExpression",
            },
            "increment": Object {
              "expressions": Array [
                Object {
                  "expression": Object {
                    "name": "i",
                    "type": "identifier",
                  },
                  "operator": "++",
                  "type": "postfixExpression",
                },
              ],
              "type": "commaExpression",
            },
            "initialization": Object {
              "expressions": Array [
                Object {
                  "left": Object {
                    "name": "i",
                    "type": "identifier",
                  },
                  "operator": "=",
                  "right": Object {
                    "type": "number",
                    "value": 0,
                  },
                  "type": "binaryExpression",
                },
              ],
              "type": "commaExpression",
            },
            "type": "forStatement",
          },
        ],
        "type": "statementList",
      },
      "parameters": Array [
        Object {
          "name": "size",
          "reference": false,
          "type": Object {
            "array": false,
            "name": "int",
          },
        },
      ],
    },
    "name": "encoded_field_list",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "s",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "arguments": Array [
            Object {
              "name": "s",
              "type": "identifier",
            },
            Object {
              "string": "%i fields",
              "type": "string",
            },
            Object {
              "expression": Object {
                "name": "l",
                "type": "identifier",
              },
              "name": "s",
              "type": "propertyAccessExpression",
            },
          ],
          "name": Object {
            "name": "SPrintf",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "EncodedFieldListRead",
    "parameters": Array [
      Object {
        "name": "l",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "encoded_field_list",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "EncodedMethodRead",
          "type": "identifier",
        },
      },
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "name": "previd",
                  "type": "identifier",
                },
                "name": "p",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Method ID for this method, represented as the difference from the previous index",
                      "type": "string",
                    },
                  },
                ],
                "name": "method_idx_diff",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uleb128",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "read",
                    "value": Object {
                      "name": "AccessFlagsReadUleb",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Access flags",
                      "type": "string",
                    },
                  },
                ],
                "name": "access_flags",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uleb128",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "File offset to the code for this method",
                      "type": "string",
                    },
                  },
                ],
                "name": "code_off",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uleb128",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "arguments": Array [
                  Object {
                    "name": "code_off",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "uleb128_value",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "operator": "!=",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "initializer": Object {
                        "arguments": Array [],
                        "name": Object {
                          "name": "FTell",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      "name": "pos",
                    },
                  ],
                  "local": true,
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "int64",
                  },
                },
                Object {
                  "arguments": Array [
                    Object {
                      "left": Object {
                        "name": "odexpad",
                        "type": "identifier",
                      },
                      "operator": "+",
                      "right": Object {
                        "arguments": Array [
                          Object {
                            "name": "code_off",
                            "type": "identifier",
                          },
                        ],
                        "name": Object {
                          "name": "uleb128_value",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      "type": "binaryExpression",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "Code structure for this method",
                            "type": "string",
                          },
                        },
                      ],
                      "name": "code",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "code_item",
                  },
                },
                Object {
                  "arguments": Array [
                    Object {
                      "name": "pos",
                      "type": "identifier",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
      "parameters": Array [
        Object {
          "name": "previd",
          "reference": false,
          "type": Object {
            "array": false,
            "name": "int",
          },
        },
      ],
    },
    "name": "encoded_method",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "left": Object {
                  "expression": Object {
                    "name": "m",
                    "type": "identifier",
                  },
                  "name": "p",
                  "type": "propertyAccessExpression",
                },
                "operator": "+",
                "right": Object {
                  "arguments": Array [
                    Object {
                      "expression": Object {
                        "name": "m",
                        "type": "identifier",
                      },
                      "name": "method_idx_diff",
                      "type": "propertyAccessExpression",
                    },
                  ],
                  "name": Object {
                    "name": "uleb128_value",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "type": "binaryExpression",
              },
              "name": "realid",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "assignmentExpression": Object {
            "left": Object {
              "arguments": Array [
                Object {
                  "arguments": Array [
                    Object {
                      "expression": Object {
                        "name": "m",
                        "type": "identifier",
                      },
                      "name": "access_flags",
                      "type": "propertyAccessExpression",
                    },
                  ],
                  "name": Object {
                    "name": "uleb128_value",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                Object {
                  "name": "AF_METHOD",
                  "type": "identifier",
                },
              ],
              "name": Object {
                "name": "GetFriendlyAccessFlags",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
            "operator": "+",
            "right": Object {
              "arguments": Array [
                Object {
                  "name": "realid",
                  "type": "identifier",
                },
              ],
              "name": Object {
                "name": "GetMethodById",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
            "type": "binaryExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "EncodedMethodRead",
    "parameters": Array [
      Object {
        "name": "m",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "encoded_method",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "EncodedMethodListRead",
          "type": "identifier",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "name": "size",
                  "type": "identifier",
                },
                "name": "s",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "i",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "type": "number",
                  "value": 0,
                },
                "name": "methodid",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "body": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "Encoded method",
                            "type": "string",
                          },
                        },
                      ],
                      "arguments": Array [
                        Object {
                          "name": "methodid",
                          "type": "identifier",
                        },
                      ],
                      "name": "method",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "encoded_method",
                  },
                },
                Object {
                  "left": Object {
                    "name": "methodid",
                    "type": "identifier",
                  },
                  "operator": "=",
                  "right": Object {
                    "left": Object {
                      "name": "methodid",
                      "type": "identifier",
                    },
                    "operator": "+",
                    "right": Object {
                      "arguments": Array [
                        Object {
                          "expression": Object {
                            "name": "method",
                            "type": "identifier",
                          },
                          "name": "method_idx_diff",
                          "type": "propertyAccessExpression",
                        },
                      ],
                      "name": Object {
                        "name": "uleb128_value",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    "type": "binaryExpression",
                  },
                  "type": "binaryExpression",
                },
              ],
              "type": "statementList",
            },
            "condition": Object {
              "left": Object {
                "name": "i",
                "type": "identifier",
              },
              "operator": "<",
              "right": Object {
                "name": "size",
                "type": "identifier",
              },
              "type": "binaryExpression",
            },
            "increment": Object {
              "expressions": Array [
                Object {
                  "expression": Object {
                    "name": "i",
                    "type": "identifier",
                  },
                  "operator": "++",
                  "type": "postfixExpression",
                },
              ],
              "type": "commaExpression",
            },
            "initialization": Object {
              "expressions": Array [
                Object {
                  "left": Object {
                    "name": "i",
                    "type": "identifier",
                  },
                  "operator": "=",
                  "right": Object {
                    "type": "number",
                    "value": 0,
                  },
                  "type": "binaryExpression",
                },
              ],
              "type": "commaExpression",
            },
            "type": "forStatement",
          },
        ],
        "type": "statementList",
      },
      "parameters": Array [
        Object {
          "name": "size",
          "reference": false,
          "type": Object {
            "array": false,
            "name": "int",
          },
        },
      ],
    },
    "name": "encoded_method_list",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "s",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "arguments": Array [
            Object {
              "name": "s",
              "type": "identifier",
            },
            Object {
              "string": "%i methods",
              "type": "string",
            },
            Object {
              "expression": Object {
                "name": "l",
                "type": "identifier",
              },
              "name": "s",
              "type": "propertyAccessExpression",
            },
          ],
          "name": Object {
            "name": "SPrintf",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "EncodedMethodListRead",
    "parameters": Array [
      Object {
        "name": "l",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "encoded_method_list",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "ClassDataItemRead",
          "type": "identifier",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "The number of static fields",
                      "type": "string",
                    },
                  },
                ],
                "name": "static_fields_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uleb128",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "The number of instance fields",
                      "type": "string",
                    },
                  },
                ],
                "name": "instance_fields_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uleb128",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "The number of direct methods",
                      "type": "string",
                    },
                  },
                ],
                "name": "direct_methods_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uleb128",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "The number of virtual methods",
                      "type": "string",
                    },
                  },
                ],
                "name": "virtual_methods_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uleb128",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "arguments": Array [
                  Object {
                    "name": "static_fields_size",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "uleb128_value",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "Encoded sequence of static fields",
                            "type": "string",
                          },
                        },
                      ],
                      "arguments": Array [
                        Object {
                          "arguments": Array [
                            Object {
                              "name": "static_fields_size",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "uleb128_value",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                      ],
                      "name": "static_fields",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "encoded_field_list",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "arguments": Array [
                  Object {
                    "name": "instance_fields_size",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "uleb128_value",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "Encoded sequence of instance fields",
                            "type": "string",
                          },
                        },
                      ],
                      "arguments": Array [
                        Object {
                          "arguments": Array [
                            Object {
                              "name": "instance_fields_size",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "uleb128_value",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                      ],
                      "name": "instance_fields",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "encoded_field_list",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "arguments": Array [
                  Object {
                    "name": "direct_methods_size",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "uleb128_value",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "Encoded sequence of direct methods",
                            "type": "string",
                          },
                        },
                      ],
                      "arguments": Array [
                        Object {
                          "arguments": Array [
                            Object {
                              "name": "direct_methods_size",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "uleb128_value",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                      ],
                      "name": "direct_methods",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "encoded_method_list",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "arguments": Array [
                  Object {
                    "name": "virtual_methods_size",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "uleb128_value",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "Encoded sequence of virtual methods",
                            "type": "string",
                          },
                        },
                      ],
                      "arguments": Array [
                        Object {
                          "arguments": Array [
                            Object {
                              "name": "virtual_methods_size",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "uleb128_value",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                      ],
                      "name": "virtual_methods",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "encoded_method_list",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "class_data_item",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "s",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "arguments": Array [
            Object {
              "name": "s",
              "type": "identifier",
            },
            Object {
              "string": "%i static fields, %i instance fields, %i direct methods, %i virtual methods",
              "type": "string",
            },
            Object {
              "arguments": Array [
                Object {
                  "expression": Object {
                    "name": "i",
                    "type": "identifier",
                  },
                  "name": "static_fields_size",
                  "type": "propertyAccessExpression",
                },
              ],
              "name": Object {
                "name": "uleb128_value",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
            Object {
              "arguments": Array [
                Object {
                  "expression": Object {
                    "name": "i",
                    "type": "identifier",
                  },
                  "name": "instance_fields_size",
                  "type": "propertyAccessExpression",
                },
              ],
              "name": Object {
                "name": "uleb128_value",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
            Object {
              "arguments": Array [
                Object {
                  "expression": Object {
                    "name": "i",
                    "type": "identifier",
                  },
                  "name": "direct_methods_size",
                  "type": "propertyAccessExpression",
                },
              ],
              "name": Object {
                "name": "uleb128_value",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
            Object {
              "arguments": Array [
                Object {
                  "expression": Object {
                    "name": "i",
                    "type": "identifier",
                  },
                  "name": "virtual_methods_size",
                  "type": "propertyAccessExpression",
                },
              ],
              "name": Object {
                "name": "uleb128_value",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
          ],
          "name": Object {
            "name": "SPrintf",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ClassDataItemRead",
    "parameters": Array [
      Object {
        "name": "i",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "class_data_item",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "ClassDefItemRead",
          "type": "identifier",
        },
      },
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "pos",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int64",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "read",
                    "value": Object {
                      "name": "LongTypeIdRead",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Type ID for this class",
                      "type": "string",
                    },
                  },
                ],
                "name": "class_idx",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Access flags",
                      "type": "string",
                    },
                  },
                ],
                "name": "access_flags",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ACCESS_FLAGS",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "read",
                    "value": Object {
                      "name": "LongTypeIdRead",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Type ID for this class's superclass",
                      "type": "string",
                    },
                  },
                ],
                "name": "superclass_idx",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "File offset to interface list",
                      "type": "string",
                    },
                  },
                ],
                "name": "interfaces_off",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "interfaces_off",
                "type": "identifier",
              },
              "operator": "!=",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "left": Object {
                    "name": "pos",
                    "type": "identifier",
                  },
                  "operator": "=",
                  "right": Object {
                    "arguments": Array [],
                    "name": Object {
                      "name": "FTell",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  "type": "binaryExpression",
                },
                Object {
                  "arguments": Array [
                    Object {
                      "left": Object {
                        "name": "odexpad",
                        "type": "identifier",
                      },
                      "operator": "+",
                      "right": Object {
                        "name": "interfaces_off",
                        "type": "identifier",
                      },
                      "type": "binaryExpression",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "read",
                          "value": Object {
                            "name": "InterfacesRead",
                            "type": "identifier",
                          },
                        },
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "Interface data",
                            "type": "string",
                          },
                        },
                      ],
                      "name": "interfaces",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "type_item_list",
                  },
                },
                Object {
                  "arguments": Array [
                    Object {
                      "name": "pos",
                      "type": "identifier",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "read",
                    "value": Object {
                      "name": "StringIdRead",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "String ID for the name of the file with this class defined",
                      "type": "string",
                    },
                  },
                ],
                "name": "source_file_idx",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "File offset to the annotation structure for this class",
                      "type": "string",
                    },
                  },
                ],
                "name": "annotations_off",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "annotations_off",
                "type": "identifier",
              },
              "operator": "!=",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "left": Object {
                    "name": "pos",
                    "type": "identifier",
                  },
                  "operator": "=",
                  "right": Object {
                    "arguments": Array [],
                    "name": Object {
                      "name": "FTell",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  "type": "binaryExpression",
                },
                Object {
                  "arguments": Array [
                    Object {
                      "left": Object {
                        "name": "odexpad",
                        "type": "identifier",
                      },
                      "operator": "+",
                      "right": Object {
                        "name": "annotations_off",
                        "type": "identifier",
                      },
                      "type": "binaryExpression",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "Annotation data",
                            "type": "string",
                          },
                        },
                      ],
                      "name": "annotations",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "annotations_directory_item",
                  },
                },
                Object {
                  "arguments": Array [
                    Object {
                      "name": "pos",
                      "type": "identifier",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "File offset to the class data for this class",
                      "type": "string",
                    },
                  },
                ],
                "name": "class_data_off",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "class_data_off",
                "type": "identifier",
              },
              "operator": "!=",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "left": Object {
                    "name": "pos",
                    "type": "identifier",
                  },
                  "operator": "=",
                  "right": Object {
                    "arguments": Array [],
                    "name": Object {
                      "name": "FTell",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  "type": "binaryExpression",
                },
                Object {
                  "arguments": Array [
                    Object {
                      "left": Object {
                        "name": "odexpad",
                        "type": "identifier",
                      },
                      "operator": "+",
                      "right": Object {
                        "name": "class_data_off",
                        "type": "identifier",
                      },
                      "type": "binaryExpression",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "Class data",
                            "type": "string",
                          },
                        },
                      ],
                      "name": "class_data",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "class_data_item",
                  },
                },
                Object {
                  "arguments": Array [
                    Object {
                      "name": "pos",
                      "type": "identifier",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "File offset to static field data",
                      "type": "string",
                    },
                  },
                ],
                "name": "static_values_off",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "static_values_off",
                "type": "identifier",
              },
              "operator": "!=",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "left": Object {
                    "name": "pos",
                    "type": "identifier",
                  },
                  "operator": "=",
                  "right": Object {
                    "arguments": Array [],
                    "name": Object {
                      "name": "FTell",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  "type": "binaryExpression",
                },
                Object {
                  "arguments": Array [
                    Object {
                      "left": Object {
                        "name": "odexpad",
                        "type": "identifier",
                      },
                      "operator": "+",
                      "right": Object {
                        "name": "static_values_off",
                        "type": "identifier",
                      },
                      "type": "binaryExpression",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "Static values",
                            "type": "string",
                          },
                        },
                      ],
                      "name": "static_values",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "encoded_array_item",
                  },
                },
                Object {
                  "arguments": Array [
                    Object {
                      "name": "pos",
                      "type": "identifier",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "class_def_item",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "arguments": Array [
                  Object {
                    "expression": Object {
                      "name": "i",
                      "type": "identifier",
                    },
                    "name": "class_idx",
                    "type": "propertyAccessExpression",
                  },
                ],
                "name": Object {
                  "name": "GetLongTypeById",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "name": "classname",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "arguments": Array [
                  Object {
                    "expression": Object {
                      "name": "i",
                      "type": "identifier",
                    },
                    "name": "access_flags",
                    "type": "propertyAccessExpression",
                  },
                  Object {
                    "name": "AF_CLASS",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "GetFriendlyAccessFlags",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "name": "flags",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "assignmentExpression": Object {
            "left": Object {
              "name": "flags",
              "type": "identifier",
            },
            "operator": "+",
            "right": Object {
              "name": "classname",
              "type": "identifier",
            },
            "type": "binaryExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ClassDefItemRead",
    "parameters": Array [
      Object {
        "name": "i",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "class_def_item",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "",
                "type": "string",
              },
              "name": "s",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "i",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "body": Object {
            "statements": Array [
              Object {
                "left": Object {
                  "name": "s",
                  "type": "identifier",
                },
                "operator": "+=",
                "right": Object {
                  "arguments": Array [
                    Object {
                      "arguments": Array [
                        Object {
                          "expression": Object {
                            "expression": Object {
                              "expression": Object {
                                "name": "l",
                                "type": "identifier",
                              },
                              "name": "list",
                              "type": "propertyAccessExpression",
                            },
                            "index": Object {
                              "name": "i",
                              "type": "identifier",
                            },
                            "type": "arrayIndexExpression",
                          },
                          "name": "type_idx",
                          "type": "propertyAccessExpression",
                        },
                      ],
                      "name": Object {
                        "name": "GetTypeById",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                  ],
                  "name": Object {
                    "name": "GetLongTypeDescriptor",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "type": "binaryExpression",
              },
              Object {
                "condition": Object {
                  "left": Object {
                    "left": Object {
                      "name": "i",
                      "type": "identifier",
                    },
                    "operator": "+",
                    "right": Object {
                      "type": "number",
                      "value": 1,
                    },
                    "type": "binaryExpression",
                  },
                  "operator": "<",
                  "right": Object {
                    "expression": Object {
                      "name": "l",
                      "type": "identifier",
                    },
                    "name": "size",
                    "type": "propertyAccessExpression",
                  },
                  "type": "binaryExpression",
                },
                "trueStatement": Object {
                  "statements": Array [
                    Object {
                      "left": Object {
                        "name": "s",
                        "type": "identifier",
                      },
                      "operator": "+=",
                      "right": Object {
                        "string": ", ",
                        "type": "string",
                      },
                      "type": "binaryExpression",
                    },
                  ],
                  "type": "statementList",
                },
                "type": "ifStatement",
              },
            ],
            "type": "statementList",
          },
          "condition": Object {
            "left": Object {
              "name": "i",
              "type": "identifier",
            },
            "operator": "<",
            "right": Object {
              "expression": Object {
                "name": "l",
                "type": "identifier",
              },
              "name": "size",
              "type": "propertyAccessExpression",
            },
            "type": "binaryExpression",
          },
          "increment": Object {
            "expressions": Array [
              Object {
                "expression": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "++",
                "type": "postfixExpression",
              },
            ],
            "type": "commaExpression",
          },
          "initialization": Object {
            "expressions": Array [
              Object {
                "left": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "type": "number",
                  "value": 0,
                },
                "type": "binaryExpression",
              },
            ],
            "type": "commaExpression",
          },
          "type": "forStatement",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "InterfacesRead",
    "parameters": Array [
      Object {
        "name": "l",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "type_item_list",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "ClassDefItemListRead",
          "type": "identifier",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "name": "size",
                  "type": "identifier",
                },
                "name": "s",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Class ID",
                      "type": "string",
                    },
                  },
                ],
                "arraySelector": Object {
                  "name": "size",
                  "type": "identifier",
                },
                "name": "class_def",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "class_def_item",
            },
          },
        ],
        "type": "statementList",
      },
      "parameters": Array [
        Object {
          "name": "size",
          "reference": false,
          "type": Object {
            "array": false,
            "name": "int",
          },
        },
      ],
    },
    "name": "class_def_item_list",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "s",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "left": Object {
            "name": "s",
            "type": "identifier",
          },
          "operator": "=",
          "right": Object {
            "arguments": Array [
              Object {
                "name": "s",
                "type": "identifier",
              },
              Object {
                "string": "%d classes",
                "type": "string",
              },
              Object {
                "expression": Object {
                  "name": "l",
                  "type": "identifier",
                },
                "name": "s",
                "type": "propertyAccessExpression",
              },
            ],
            "name": Object {
              "name": "SPrintf",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "binaryExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ClassDefItemListRead",
    "parameters": Array [
      Object {
        "name": "l",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "class_def_item_list",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Start address of code block covered by this entry, in 16-bit code units from the start of the first instruction",
                      "type": "string",
                    },
                  },
                ],
                "name": "start_addr",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Number of 16-bit code units covered by this entry",
                      "type": "string",
                    },
                  },
                ],
                "name": "insn_count",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Offset to the catch_handler_item for this entry",
                      "type": "string",
                    },
                  },
                ],
                "name": "handler_off",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "try_item",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "EncodedCatchHandlerRead",
          "type": "identifier",
        },
      },
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Number of catch types in the list",
                      "type": "string",
                    },
                  },
                ],
                "name": "size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "sleb128",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "arguments": Array [
                    Object {
                      "name": "size",
                      "type": "identifier",
                    },
                  ],
                  "name": Object {
                    "name": "sleb128_value",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "name": "s",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "type": "number",
                  "value": 0,
                },
                "name": "numhandlers",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "s",
                "type": "identifier",
              },
              "operator": "!=",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "left": Object {
                    "name": "numhandlers",
                    "type": "identifier",
                  },
                  "operator": "=",
                  "right": Object {
                    "arguments": Array [
                      Object {
                        "name": "s",
                        "type": "identifier",
                      },
                    ],
                    "name": Object {
                      "name": "Abs",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  "type": "binaryExpression",
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "Exception handler pairs",
                            "type": "string",
                          },
                        },
                      ],
                      "arraySelector": Object {
                        "name": "numhandlers",
                        "type": "identifier",
                      },
                      "name": "handlers",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "encoded_type_addr_pair",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "s",
                "type": "identifier",
              },
              "operator": "<=",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "Address of catch-all handler",
                            "type": "string",
                          },
                        },
                      ],
                      "name": "catch_all_addr",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "uleb128",
                  },
                },
                Object {
                  "expression": Object {
                    "name": "numhandlers",
                    "type": "identifier",
                  },
                  "operator": "++",
                  "type": "postfixExpression",
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "encoded_catch_handler",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "s",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "arguments": Array [
            Object {
              "name": "s",
              "type": "identifier",
            },
            Object {
              "string": "%i handlers",
              "type": "string",
            },
            Object {
              "expression": Object {
                "name": "h",
                "type": "identifier",
              },
              "name": "numhandlers",
              "type": "propertyAccessExpression",
            },
          ],
          "name": Object {
            "name": "SPrintf",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "EncodedCatchHandlerRead",
    "parameters": Array [
      Object {
        "name": "h",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "encoded_catch_handler",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "EncodedCatchHandlerListRead",
          "type": "identifier",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Number of handler lists",
                      "type": "string",
                    },
                  },
                ],
                "name": "size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uleb128",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "List of handler lists",
                      "type": "string",
                    },
                  },
                ],
                "arraySelector": Object {
                  "arguments": Array [
                    Object {
                      "name": "size",
                      "type": "identifier",
                    },
                  ],
                  "name": Object {
                    "name": "uleb128_value",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "name": "list",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "encoded_catch_handler",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "encoded_catch_handler_list",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "s",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "arguments": Array [
            Object {
              "name": "s",
              "type": "identifier",
            },
            Object {
              "string": "%i handler lists",
              "type": "string",
            },
            Object {
              "arguments": Array [
                Object {
                  "expression": Object {
                    "name": "l",
                    "type": "identifier",
                  },
                  "name": "size",
                  "type": "propertyAccessExpression",
                },
              ],
              "name": Object {
                "name": "uleb128_value",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
          ],
          "name": Object {
            "name": "SPrintf",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "EncodedCatchHandlerListRead",
    "parameters": Array [
      Object {
        "name": "l",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "encoded_catch_handler_list",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "CodeItemRead",
          "type": "identifier",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Number of registers used by this code",
                      "type": "string",
                    },
                  },
                ],
                "name": "registers_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Number of words of incoming arguments for this code's method",
                      "type": "string",
                    },
                  },
                ],
                "name": "ins_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Number of words of outgoing arguments for this code's method",
                      "type": "string",
                    },
                  },
                ],
                "name": "outs_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Number of try_item entries for this code",
                      "type": "string",
                    },
                  },
                ],
                "name": "tries_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "File offset for the debug information",
                      "type": "string",
                    },
                  },
                ],
                "name": "debug_info_off",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "debug_info_off",
                "type": "identifier",
              },
              "operator": "!=",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "initializer": Object {
                        "arguments": Array [],
                        "name": Object {
                          "name": "FTell",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      "name": "pos",
                    },
                  ],
                  "local": true,
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "int64",
                  },
                },
                Object {
                  "arguments": Array [
                    Object {
                      "left": Object {
                        "name": "odexpad",
                        "type": "identifier",
                      },
                      "operator": "+",
                      "right": Object {
                        "name": "debug_info_off",
                        "type": "identifier",
                      },
                      "type": "binaryExpression",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "Debug information for this method",
                            "type": "string",
                          },
                        },
                      ],
                      "name": "debug_info",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "debug_info_item",
                  },
                },
                Object {
                  "arguments": Array [
                    Object {
                      "name": "pos",
                      "type": "identifier",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Size of instruction list, in 16-bit code units",
                      "type": "string",
                    },
                  },
                ],
                "name": "insns_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "insns_size",
                "type": "identifier",
              },
              "operator": "!=",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "Instruction",
                            "type": "string",
                          },
                        },
                      ],
                      "arraySelector": Object {
                        "name": "insns_size",
                        "type": "identifier",
                      },
                      "name": "insns",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "ushort",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "tries_size",
                "type": "identifier",
              },
              "operator": "!=",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "condition": Object {
                    "left": Object {
                      "name": "insns_size",
                      "type": "identifier",
                    },
                    "operator": "&",
                    "right": Object {
                      "left": Object {
                        "type": "number",
                        "value": 1,
                      },
                      "operator": "==",
                      "right": Object {
                        "type": "number",
                        "value": 1,
                      },
                      "type": "binaryExpression",
                    },
                    "type": "binaryExpression",
                  },
                  "trueStatement": Object {
                    "statements": Array [
                      Object {
                        "annotations": Array [],
                        "declarations": Array [
                          Object {
                            "annotations": Array [
                              Object {
                                "key": "comment",
                                "value": Object {
                                  "string": "Padding...",
                                  "type": "string",
                                },
                              },
                            ],
                            "name": "padding",
                          },
                        ],
                        "type": "variableDeclaration",
                        "variableType": Object {
                          "array": false,
                          "name": "ushort",
                        },
                      },
                    ],
                    "type": "statementList",
                  },
                  "type": "ifStatement",
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "Array of code try block addresses",
                            "type": "string",
                          },
                        },
                      ],
                      "arraySelector": Object {
                        "name": "tries_size",
                        "type": "identifier",
                      },
                      "name": "tries",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "try_item",
                  },
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "Array of catch types and handler addresses",
                            "type": "string",
                          },
                        },
                      ],
                      "name": "handlers",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "encoded_catch_handler_list",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "code_item",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "s",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "arguments": Array [
            Object {
              "name": "s",
              "type": "identifier",
            },
            Object {
              "string": "%i registers, %i in arguments, %i out arguments, %i tries, %i instructions",
              "type": "string",
            },
            Object {
              "expression": Object {
                "name": "i",
                "type": "identifier",
              },
              "name": "registers_size",
              "type": "propertyAccessExpression",
            },
            Object {
              "expression": Object {
                "name": "i",
                "type": "identifier",
              },
              "name": "ins_size",
              "type": "propertyAccessExpression",
            },
            Object {
              "expression": Object {
                "name": "i",
                "type": "identifier",
              },
              "name": "outs_size",
              "type": "propertyAccessExpression",
            },
            Object {
              "expression": Object {
                "name": "i",
                "type": "identifier",
              },
              "name": "tries_size",
              "type": "propertyAccessExpression",
            },
            Object {
              "expression": Object {
                "name": "i",
                "type": "identifier",
              },
              "name": "insns_size",
              "type": "propertyAccessExpression",
            },
          ],
          "name": Object {
            "name": "SPrintf",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "CodeItemRead",
    "parameters": Array [
      Object {
        "name": "i",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "code_item",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "EncodedTypeAddrPairRead",
          "type": "identifier",
        },
      },
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "read",
                    "value": Object {
                      "name": "LongTypeIdReadUleb",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Type ID for the type of exception to catch",
                      "type": "string",
                    },
                  },
                ],
                "name": "type_idx",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uleb128",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Bytecode address of exception handler",
                      "type": "string",
                    },
                  },
                ],
                "name": "addr",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uleb128",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "encoded_type_addr_pair",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "s",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "arguments": Array [
            Object {
              "name": "s",
              "type": "identifier",
            },
            Object {
              "string": "%s at 0x%X",
              "type": "string",
            },
            Object {
              "arguments": Array [
                Object {
                  "arguments": Array [
                    Object {
                      "expression": Object {
                        "name": "p",
                        "type": "identifier",
                      },
                      "name": "type_idx",
                      "type": "propertyAccessExpression",
                    },
                  ],
                  "name": Object {
                    "name": "uleb128_value",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
              ],
              "name": Object {
                "name": "GetLongTypeById",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
            Object {
              "arguments": Array [
                Object {
                  "expression": Object {
                    "name": "p",
                    "type": "identifier",
                  },
                  "name": "addr",
                  "type": "propertyAccessExpression",
                },
              ],
              "name": Object {
                "name": "uleb128_value",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
          ],
          "name": Object {
            "name": "SPrintf",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "EncodedTypeAddrPairRead",
    "parameters": Array [
      Object {
        "name": "p",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "encoded_type_addr_pair",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "EncodedArrayItemRead",
          "type": "identifier",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "The encoded array value",
                      "type": "string",
                    },
                  },
                ],
                "name": "value",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "encoded_array",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "encoded_array_item",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "s",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "arguments": Array [
            Object {
              "name": "s",
              "type": "identifier",
            },
            Object {
              "string": "%i items: %s",
              "type": "string",
            },
            Object {
              "arguments": Array [
                Object {
                  "expression": Object {
                    "expression": Object {
                      "name": "i",
                      "type": "identifier",
                    },
                    "name": "value",
                    "type": "propertyAccessExpression",
                  },
                  "name": "size",
                  "type": "propertyAccessExpression",
                },
              ],
              "name": Object {
                "name": "uleb128_value",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
            Object {
              "arguments": Array [
                Object {
                  "expression": Object {
                    "name": "i",
                    "type": "identifier",
                  },
                  "name": "value",
                  "type": "propertyAccessExpression",
                },
              ],
              "name": Object {
                "name": "EncodedArrayRead",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
          ],
          "name": Object {
            "name": "SPrintf",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "EncodedArrayItemRead",
    "parameters": Array [
      Object {
        "name": "i",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "encoded_array_item",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "alias": "TYPE_CODES",
    "baseType": Object {
      "array": false,
      "name": "ushort",
    },
    "declarations": Array [
      Object {
        "name": "TYPE_HEADER_ITEM",
        "value": Object {
          "type": "number",
          "value": 0,
        },
      },
      Object {
        "name": "TYPE_STRING_ID_ITEM",
        "value": Object {
          "type": "number",
          "value": 1,
        },
      },
      Object {
        "name": "TYPE_TYPE_ID_ITEM",
        "value": Object {
          "type": "number",
          "value": 2,
        },
      },
      Object {
        "name": "TYPE_PROTO_ID_ITEM",
        "value": Object {
          "type": "number",
          "value": 3,
        },
      },
      Object {
        "name": "TYPE_FIELD_ID_ITEM",
        "value": Object {
          "type": "number",
          "value": 4,
        },
      },
      Object {
        "name": "TYPE_METHOD_ID_ITEM",
        "value": Object {
          "type": "number",
          "value": 5,
        },
      },
      Object {
        "name": "TYPE_CLASS_DEF_ITEM",
        "value": Object {
          "type": "number",
          "value": 6,
        },
      },
      Object {
        "name": "TYPE_MAP_LIST",
        "value": Object {
          "type": "number",
          "value": 4096,
        },
      },
      Object {
        "name": "TYPE_TYPE_LIST",
        "value": Object {
          "type": "number",
          "value": 4097,
        },
      },
      Object {
        "name": "TYPE_ANNOTATION_SET_REF_LIST",
        "value": Object {
          "type": "number",
          "value": 4098,
        },
      },
      Object {
        "name": "TYPE_ANNOTATION_SET_ITEM",
        "value": Object {
          "type": "number",
          "value": 4099,
        },
      },
      Object {
        "name": "TYPE_CLASS_DATA_ITEM",
        "value": Object {
          "type": "number",
          "value": 8192,
        },
      },
      Object {
        "name": "TYPE_CODE_ITEM",
        "value": Object {
          "type": "number",
          "value": 8193,
        },
      },
      Object {
        "name": "TYPE_STRING_DATA_ITEM",
        "value": Object {
          "type": "number",
          "value": 8194,
        },
      },
      Object {
        "name": "TYPE_DEBUG_INFO_ITEM",
        "value": Object {
          "type": "number",
          "value": 8195,
        },
      },
      Object {
        "name": "TYPE_ANNOTATION_ITEM",
        "value": Object {
          "type": "number",
          "value": 8196,
        },
      },
      Object {
        "name": "TYPE_ENCODED_ARRAY_ITEM",
        "value": Object {
          "type": "number",
          "value": 8197,
        },
      },
      Object {
        "name": "TYPE_ANNOTATIONS_DIRECTORY_ITEM",
        "value": Object {
          "type": "number",
          "value": 8198,
        },
      },
    ],
    "type": "enumDeclaration",
  },
  Object {
    "baseType": Object {
      "array": false,
      "name": "ubyte",
    },
    "declarations": Array [
      Object {
        "name": "DBG_END_SEQUENCE",
        "value": Object {
          "type": "number",
          "value": 0,
        },
      },
      Object {
        "name": "DBG_ADVANCE_PC",
        "value": Object {
          "type": "number",
          "value": 1,
        },
      },
      Object {
        "name": "DBG_ADVANCE_LINE",
        "value": Object {
          "type": "number",
          "value": 2,
        },
      },
      Object {
        "name": "DBG_START_LOCAL",
        "value": Object {
          "type": "number",
          "value": 3,
        },
      },
      Object {
        "name": "DBG_START_LOCAL_EXTENDED",
        "value": Object {
          "type": "number",
          "value": 4,
        },
      },
      Object {
        "name": "DBG_END_LOCAL",
        "value": Object {
          "type": "number",
          "value": 5,
        },
      },
      Object {
        "name": "DBG_RESTART_LOCAL",
        "value": Object {
          "type": "number",
          "value": 6,
        },
      },
      Object {
        "name": "DBG_SET_PROLOGUE_END",
        "value": Object {
          "type": "number",
          "value": 7,
        },
      },
      Object {
        "name": "DBG_SET_EPILOGUE_BEGIN",
        "value": Object {
          "type": "number",
          "value": 8,
        },
      },
      Object {
        "name": "DBG_SET_FILE",
        "value": Object {
          "type": "number",
          "value": 9,
        },
      },
    ],
    "type": "enumDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "DebugOpcodeRead",
          "type": "identifier",
        },
      },
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Debug opcode",
                      "type": "string",
                    },
                  },
                ],
                "name": "opcode",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DBG_OPCODE",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "string": "",
                  "type": "string",
                },
                "name": "args",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "string",
            },
          },
          Object {
            "statements": Array [
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "DBG_END_SEQUENCE",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [
                            Object {
                              "key": "comment",
                              "value": Object {
                                "string": "Amount to add to address register",
                                "type": "string",
                              },
                            },
                          ],
                          "name": "addr_diff",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "uleb128",
                      },
                    },
                    Object {
                      "arguments": Array [
                        Object {
                          "name": "args",
                          "type": "identifier",
                        },
                        Object {
                          "string": "%i",
                          "type": "string",
                        },
                        Object {
                          "arguments": Array [
                            Object {
                              "name": "addr_diff",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "uleb128_value",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                      ],
                      "name": Object {
                        "name": "SPrintf",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "DBG_ADVANCE_PC",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [
                            Object {
                              "key": "comment",
                              "value": Object {
                                "string": "Amount to change line register by",
                                "type": "string",
                              },
                            },
                          ],
                          "name": "line_diff",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "sleb128",
                      },
                    },
                    Object {
                      "arguments": Array [
                        Object {
                          "name": "args",
                          "type": "identifier",
                        },
                        Object {
                          "string": "%i",
                          "type": "string",
                        },
                        Object {
                          "arguments": Array [
                            Object {
                              "name": "line_diff",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "sleb128_value",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                      ],
                      "name": Object {
                        "name": "SPrintf",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "DBG_ADVANCE_LINE",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [
                            Object {
                              "key": "comment",
                              "value": Object {
                                "string": "Register that will contain local",
                                "type": "string",
                              },
                            },
                          ],
                          "name": "register_num",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "uleb128",
                      },
                    },
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [
                            Object {
                              "key": "read",
                              "value": Object {
                                "name": "StringIdReadUlebp1",
                                "type": "identifier",
                              },
                            },
                            Object {
                              "key": "comment",
                              "value": Object {
                                "string": "String index of name",
                                "type": "string",
                              },
                            },
                          ],
                          "name": "name_idx",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "uleb128p1",
                      },
                    },
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [
                            Object {
                              "key": "read",
                              "value": Object {
                                "name": "LongTypeIdReadUlebp1",
                                "type": "identifier",
                              },
                            },
                            Object {
                              "key": "comment",
                              "value": Object {
                                "string": "Type index of type",
                                "type": "string",
                              },
                            },
                          ],
                          "name": "type_idx",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "uleb128p1",
                      },
                    },
                    Object {
                      "arguments": Array [
                        Object {
                          "name": "args",
                          "type": "identifier",
                        },
                        Object {
                          "string": "%i, %s, %s",
                          "type": "string",
                        },
                        Object {
                          "arguments": Array [
                            Object {
                              "name": "register_num",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "uleb128_value",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                        Object {
                          "arguments": Array [
                            Object {
                              "name": "name_idx",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "StringIdReadUlebp1",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                        Object {
                          "arguments": Array [
                            Object {
                              "name": "type_idx",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "LongTypeIdReadUlebp1",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                      ],
                      "name": Object {
                        "name": "SPrintf",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "DBG_START_LOCAL",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [
                            Object {
                              "key": "comment",
                              "value": Object {
                                "string": "Register that will contain local",
                                "type": "string",
                              },
                            },
                          ],
                          "name": "register_num",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "uleb128",
                      },
                    },
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [
                            Object {
                              "key": "read",
                              "value": Object {
                                "name": "StringIdReadUlebp1",
                                "type": "identifier",
                              },
                            },
                            Object {
                              "key": "comment",
                              "value": Object {
                                "string": "String index of name",
                                "type": "string",
                              },
                            },
                          ],
                          "name": "name_idx",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "uleb128p1",
                      },
                    },
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [
                            Object {
                              "key": "read",
                              "value": Object {
                                "name": "LongTypeIdReadUlebp1",
                                "type": "identifier",
                              },
                            },
                            Object {
                              "key": "comment",
                              "value": Object {
                                "string": "Type index of type",
                                "type": "string",
                              },
                            },
                          ],
                          "name": "type_idx",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "uleb128p1",
                      },
                    },
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [
                            Object {
                              "key": "read",
                              "value": Object {
                                "name": "StringIdReadUlebp1",
                                "type": "identifier",
                              },
                            },
                            Object {
                              "key": "comment",
                              "value": Object {
                                "string": "String index of type signature",
                                "type": "string",
                              },
                            },
                          ],
                          "name": "sig_idx",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "uleb128p1",
                      },
                    },
                    Object {
                      "arguments": Array [
                        Object {
                          "name": "args",
                          "type": "identifier",
                        },
                        Object {
                          "string": "%i, %s, %s, %s",
                          "type": "string",
                        },
                        Object {
                          "arguments": Array [
                            Object {
                              "name": "register_num",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "uleb128_value",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                        Object {
                          "arguments": Array [
                            Object {
                              "name": "name_idx",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "StringIdReadUlebp1",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                        Object {
                          "arguments": Array [
                            Object {
                              "name": "type_idx",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "LongTypeIdReadUlebp1",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                        Object {
                          "arguments": Array [
                            Object {
                              "name": "sig_idx",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "StringIdReadUlebp1",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                      ],
                      "name": Object {
                        "name": "SPrintf",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "DBG_START_LOCAL_EXTENDED",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [
                            Object {
                              "key": "comment",
                              "value": Object {
                                "string": "Register that contained local",
                                "type": "string",
                              },
                            },
                          ],
                          "name": "register_num",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "uleb128",
                      },
                    },
                    Object {
                      "arguments": Array [
                        Object {
                          "name": "args",
                          "type": "identifier",
                        },
                        Object {
                          "string": "%i",
                          "type": "string",
                        },
                        Object {
                          "arguments": Array [
                            Object {
                              "name": "register_num",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "uleb128_value",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                      ],
                      "name": Object {
                        "name": "SPrintf",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "DBG_END_LOCAL",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [
                            Object {
                              "key": "comment",
                              "value": Object {
                                "string": "Register to restart",
                                "type": "string",
                              },
                            },
                          ],
                          "name": "register_num",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "uleb128",
                      },
                    },
                    Object {
                      "arguments": Array [
                        Object {
                          "name": "args",
                          "type": "identifier",
                        },
                        Object {
                          "string": "%i",
                          "type": "string",
                        },
                        Object {
                          "arguments": Array [
                            Object {
                              "name": "register_num",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "uleb128_value",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                      ],
                      "name": Object {
                        "name": "SPrintf",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "DBG_RESTART_LOCAL",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "type": "breakStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "DBG_SET_PROLOGUE_END",
                    "type": "identifier",
                  },
                  Object {
                    "name": "DBG_SET_EPILOGUE_BEGIN",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [
                            Object {
                              "key": "read",
                              "value": Object {
                                "name": "StringIdReadUlebp1",
                                "type": "identifier",
                              },
                            },
                            Object {
                              "key": "comment",
                              "value": Object {
                                "string": "String index of source file name",
                                "type": "string",
                              },
                            },
                          ],
                          "name": "name_idx",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "uleb128p1",
                      },
                    },
                    Object {
                      "arguments": Array [
                        Object {
                          "name": "args",
                          "type": "identifier",
                        },
                        Object {
                          "string": "%s",
                          "type": "string",
                        },
                        Object {
                          "arguments": Array [
                            Object {
                              "name": "name_idx",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "StringIdReadUlebp1",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                      ],
                      "name": Object {
                        "name": "SPrintf",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                  ],
                  "type": "statementList",
                },
                "labels": Array [
                  Object {
                    "name": "DBG_SET_FILE",
                    "type": "identifier",
                  },
                ],
              },
              Object {
                "body": Object {
                  "statements": Array [],
                  "type": "statementList",
                },
                "labels": Array [],
              },
            ],
            "type": "switchStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "debug_opcode",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "s",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "condition": Object {
            "left": Object {
              "expression": Object {
                "name": "opcode",
                "type": "identifier",
              },
              "name": "opcode",
              "type": "propertyAccessExpression",
            },
            "operator": ">=",
            "right": Object {
              "type": "number",
              "value": 10,
            },
            "type": "binaryExpression",
          },
          "falseStatement": Object {
            "statements": Array [
              Object {
                "left": Object {
                  "name": "s",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "arguments": Array [
                    Object {
                      "expression": Object {
                        "name": "opcode",
                        "type": "identifier",
                      },
                      "name": "opcode",
                      "type": "propertyAccessExpression",
                    },
                  ],
                  "name": Object {
                    "name": "EnumToString",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "type": "binaryExpression",
              },
            ],
            "type": "statementList",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "annotations": Array [],
                "declarations": Array [
                  Object {
                    "annotations": Array [],
                    "initializer": Object {
                      "left": Object {
                        "expression": Object {
                          "name": "opcode",
                          "type": "identifier",
                        },
                        "name": "opcode",
                        "type": "propertyAccessExpression",
                      },
                      "operator": "-",
                      "right": Object {
                        "type": "number",
                        "value": 10,
                      },
                      "type": "binaryExpression",
                    },
                    "name": "adjusted",
                  },
                ],
                "local": true,
                "type": "variableDeclaration",
                "variableType": Object {
                  "array": false,
                  "name": "ubyte",
                },
              },
              Object {
                "arguments": Array [
                  Object {
                    "name": "s",
                    "type": "identifier",
                  },
                  Object {
                    "string": "Special opcode: line + %i, address + %i",
                    "type": "string",
                  },
                  Object {
                    "left": Object {
                      "expression": Object {
                        "type": "number",
                        "value": 4,
                      },
                      "operator": "-",
                      "type": "unaryExpression",
                    },
                    "operator": "+",
                    "right": Object {
                      "left": Object {
                        "name": "adjusted",
                        "type": "identifier",
                      },
                      "operator": "%",
                      "right": Object {
                        "type": "number",
                        "value": 15,
                      },
                      "type": "binaryExpression",
                    },
                    "type": "binaryExpression",
                  },
                  Object {
                    "left": Object {
                      "name": "adjusted",
                      "type": "identifier",
                    },
                    "operator": "/",
                    "right": Object {
                      "type": "number",
                      "value": 15,
                    },
                    "type": "binaryExpression",
                  },
                ],
                "name": Object {
                  "name": "SPrintf",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "condition": Object {
            "left": Object {
              "expression": Object {
                "name": "opcode",
                "type": "identifier",
              },
              "name": "args",
              "type": "propertyAccessExpression",
            },
            "operator": "!=",
            "right": Object {
              "string": "",
              "type": "string",
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "left": Object {
                  "name": "s",
                  "type": "identifier",
                },
                "operator": "+=",
                "right": Object {
                  "left": Object {
                    "left": Object {
                      "string": " (",
                      "type": "string",
                    },
                    "operator": "+",
                    "right": Object {
                      "expression": Object {
                        "name": "opcode",
                        "type": "identifier",
                      },
                      "name": "args",
                      "type": "propertyAccessExpression",
                    },
                    "type": "binaryExpression",
                  },
                  "operator": "+",
                  "right": Object {
                    "string": ")",
                    "type": "string",
                  },
                  "type": "binaryExpression",
                },
                "type": "binaryExpression",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "DebugOpcodeRead",
    "parameters": Array [
      Object {
        "name": "opcode",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "debug_opcode",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Initial value for state machine 'line' register",
                      "type": "string",
                    },
                  },
                ],
                "name": "line_start",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uleb128",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Number of encoded parameter names",
                      "type": "string",
                    },
                  },
                ],
                "name": "parameters_size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uleb128",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "arguments": Array [
                  Object {
                    "name": "parameters_size",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "uleb128_value",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "String ID of method parameter names",
                            "type": "string",
                          },
                        },
                        Object {
                          "key": "optimize",
                          "value": Object {
                            "type": "boolean",
                            "value": false,
                          },
                        },
                      ],
                      "arraySelector": Object {
                        "arguments": Array [
                          Object {
                            "name": "parameters_size",
                            "type": "identifier",
                          },
                        ],
                        "name": Object {
                          "name": "uleb128_value",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      "name": "parameter_names",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "uleb128p1",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
          Object {
            "body": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "A debug opcode",
                            "type": "string",
                          },
                        },
                      ],
                      "name": "opcode",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "debug_opcode",
                  },
                },
              ],
              "type": "statementList",
            },
            "condition": Object {
              "left": Object {
                "expression": Object {
                  "name": "opcode",
                  "type": "identifier",
                },
                "name": "opcode",
                "type": "propertyAccessExpression",
              },
              "operator": "!=",
              "right": Object {
                "name": "DBG_END_SEQUENCE",
                "type": "identifier",
              },
              "type": "binaryExpression",
            },
            "type": "doWhileStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "debug_info_item",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "MapItemRead",
          "type": "identifier",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "type",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "TYPE_CODES",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "unused",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ushort",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "offset",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "map_item",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "s",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "arguments": Array [
            Object {
              "name": "s",
              "type": "identifier",
            },
            Object {
              "string": "%s",
              "type": "string",
            },
            Object {
              "arguments": Array [
                Object {
                  "expression": Object {
                    "name": "m",
                    "type": "identifier",
                  },
                  "name": "type",
                  "type": "propertyAccessExpression",
                },
              ],
              "name": Object {
                "name": "EnumToString",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
          ],
          "name": Object {
            "name": "SPrintf",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "MapItemRead",
    "parameters": Array [
      Object {
        "name": "m",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "map_item",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "MapListTypeRead",
          "type": "identifier",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "arraySelector": Object {
                  "name": "size",
                  "type": "identifier",
                },
                "name": "list",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "map_item",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "map_list_type",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "s",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "arguments": Array [
            Object {
              "name": "s",
              "type": "identifier",
            },
            Object {
              "string": "%i items",
              "type": "string",
            },
            Object {
              "expression": Object {
                "name": "t",
                "type": "identifier",
              },
              "name": "size",
              "type": "propertyAccessExpression",
            },
          ],
          "name": Object {
            "name": "SPrintf",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "MapListTypeRead",
    "parameters": Array [
      Object {
        "name": "t",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "map_list_type",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "condition": Object {
            "left": Object {
              "name": "id",
              "type": "identifier",
            },
            "operator": "==",
            "right": Object {
              "type": "number",
              "value": 4294967295,
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "assignmentExpression": Object {
                  "string": "(0xFFFFFFFF)",
                  "type": "string",
                },
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "s",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "arguments": Array [
            Object {
              "name": "s",
              "type": "identifier",
            },
            Object {
              "string": "(0x%.X) \\\\\\"%s\\\\\\"",
              "type": "string",
            },
            Object {
              "name": "id",
              "type": "identifier",
            },
            Object {
              "arguments": Array [
                Object {
                  "name": "id",
                  "type": "identifier",
                },
              ],
              "name": Object {
                "name": "GetStringById",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
          ],
          "name": Object {
            "name": "SPrintf",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "StringIdRead",
    "parameters": Array [
      Object {
        "name": "id",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "int",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "arguments": Array [
              Object {
                "arguments": Array [
                  Object {
                    "name": "id",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "uleb128_value",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
            ],
            "name": Object {
              "name": "StringIdRead",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "StringIdReadUleb",
    "parameters": Array [
      Object {
        "name": "id",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "uleb128",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "arguments": Array [
              Object {
                "arguments": Array [
                  Object {
                    "name": "id",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "uleb128p1_value",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
            ],
            "name": Object {
              "name": "StringIdRead",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "StringIdReadUlebp1",
    "parameters": Array [
      Object {
        "name": "id",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "uleb128p1",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "arguments": Array [
              Object {
                "name": "id",
                "type": "identifier",
              },
              Object {
                "arguments": Array [
                  Object {
                    "name": "id",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "GetTypeById",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
            ],
            "name": Object {
              "name": "GetIdAndNameString",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "TypeIdRead",
    "parameters": Array [
      Object {
        "name": "id",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "int",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "arguments": Array [
              Object {
                "name": "id",
                "type": "identifier",
              },
              Object {
                "arguments": Array [
                  Object {
                    "name": "id",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "GetLongTypeById",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
            ],
            "name": Object {
              "name": "GetIdAndNameString",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "LongTypeIdRead",
    "parameters": Array [
      Object {
        "name": "id",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "int",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "arguments": Array [
              Object {
                "arguments": Array [
                  Object {
                    "name": "id",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "uleb128_value",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
            ],
            "name": Object {
              "name": "LongTypeIdRead",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "LongTypeIdReadUleb",
    "parameters": Array [
      Object {
        "name": "id",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "uleb128",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "arguments": Array [
              Object {
                "arguments": Array [
                  Object {
                    "name": "id",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "uleb128p1_value",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
            ],
            "name": Object {
              "name": "LongTypeIdRead",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "LongTypeIdReadUlebp1",
    "parameters": Array [
      Object {
        "name": "id",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "uleb128p1",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "arguments": Array [
              Object {
                "name": "id",
                "type": "identifier",
              },
              Object {
                "arguments": Array [
                  Object {
                    "name": "id",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "GetFieldById",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
            ],
            "name": Object {
              "name": "GetIdAndNameString",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "FieldIdRead",
    "parameters": Array [
      Object {
        "name": "id",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "int",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "arguments": Array [
              Object {
                "name": "id",
                "type": "identifier",
              },
              Object {
                "arguments": Array [
                  Object {
                    "name": "id",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "GetMethodById",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
            ],
            "name": Object {
              "name": "GetIdAndNameString",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "MethodIdRead",
    "parameters": Array [
      Object {
        "name": "id",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "int",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "s",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "arguments": Array [
            Object {
              "name": "s",
              "type": "identifier",
            },
            Object {
              "string": "(0x%X) %s",
              "type": "string",
            },
            Object {
              "name": "id",
              "type": "identifier",
            },
            Object {
              "name": "name",
              "type": "identifier",
            },
          ],
          "name": Object {
            "name": "SPrintf",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "GetIdAndNameString",
    "parameters": Array [
      Object {
        "name": "id",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "int",
        },
      },
      Object {
        "name": "name",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "string",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "condition": Object {
            "left": Object {
              "name": "id",
              "type": "identifier",
            },
            "operator": "==",
            "right": Object {
              "type": "number",
              "value": 4294967295,
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "assignmentExpression": Object {
                  "string": "(0xFFFFFFFF)",
                  "type": "string",
                },
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "condition": Object {
            "arguments": Array [
              Object {
                "expression": Object {
                  "expression": Object {
                    "name": "dex_string_ids",
                    "type": "identifier",
                  },
                  "name": "string_id",
                  "type": "propertyAccessExpression",
                },
                "index": Object {
                  "name": "id",
                  "type": "identifier",
                },
                "type": "arrayIndexExpression",
              },
            ],
            "name": Object {
              "name": "exists",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "falseStatement": Object {
            "statements": Array [
              Object {
                "assignmentExpression": Object {
                  "string": "*** NO STRING",
                  "type": "string",
                },
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "assignmentExpression": Object {
                  "expression": Object {
                    "expression": Object {
                      "expression": Object {
                        "expression": Object {
                          "name": "dex_string_ids",
                          "type": "identifier",
                        },
                        "name": "string_id",
                        "type": "propertyAccessExpression",
                      },
                      "index": Object {
                        "name": "id",
                        "type": "identifier",
                      },
                      "type": "arrayIndexExpression",
                    },
                    "name": "string_data",
                    "type": "propertyAccessExpression",
                  },
                  "name": "data",
                  "type": "propertyAccessExpression",
                },
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "GetStringById",
    "parameters": Array [
      Object {
        "name": "id",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "int",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "condition": Object {
            "left": Object {
              "name": "id",
              "type": "identifier",
            },
            "operator": "==",
            "right": Object {
              "type": "number",
              "value": 4294967295,
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "assignmentExpression": Object {
                  "string": "(0xFFFFFFFF)",
                  "type": "string",
                },
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "condition": Object {
            "arguments": Array [
              Object {
                "expression": Object {
                  "expression": Object {
                    "name": "dex_type_ids",
                    "type": "identifier",
                  },
                  "name": "type_id",
                  "type": "propertyAccessExpression",
                },
                "index": Object {
                  "name": "id",
                  "type": "identifier",
                },
                "type": "arrayIndexExpression",
              },
            ],
            "name": Object {
              "name": "exists",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "falseStatement": Object {
            "statements": Array [
              Object {
                "assignmentExpression": Object {
                  "string": "*** NO TYPE",
                  "type": "string",
                },
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "assignmentExpression": Object {
                  "arguments": Array [
                    Object {
                      "expression": Object {
                        "expression": Object {
                          "expression": Object {
                            "name": "dex_type_ids",
                            "type": "identifier",
                          },
                          "name": "type_id",
                          "type": "propertyAccessExpression",
                        },
                        "index": Object {
                          "name": "id",
                          "type": "identifier",
                        },
                        "type": "arrayIndexExpression",
                      },
                      "name": "descriptor_idx",
                      "type": "propertyAccessExpression",
                    },
                  ],
                  "name": Object {
                    "name": "GetStringById",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "GetTypeById",
    "parameters": Array [
      Object {
        "name": "id",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "int",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "arguments": Array [
              Object {
                "arguments": Array [
                  Object {
                    "name": "id",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "GetTypeById",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
            ],
            "name": Object {
              "name": "GetLongTypeDescriptor",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "GetLongTypeById",
    "parameters": Array [
      Object {
        "name": "id",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "int",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "condition": Object {
            "left": Object {
              "name": "id",
              "type": "identifier",
            },
            "operator": "==",
            "right": Object {
              "type": "number",
              "value": 4294967295,
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "assignmentExpression": Object {
                  "string": "(0xFFFFFFFF)",
                  "type": "string",
                },
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "condition": Object {
            "arguments": Array [
              Object {
                "expression": Object {
                  "expression": Object {
                    "name": "dex_method_ids",
                    "type": "identifier",
                  },
                  "name": "method_id",
                  "type": "propertyAccessExpression",
                },
                "index": Object {
                  "name": "id",
                  "type": "identifier",
                },
                "type": "arrayIndexExpression",
              },
            ],
            "name": Object {
              "name": "exists",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "falseStatement": Object {
            "statements": Array [
              Object {
                "assignmentExpression": Object {
                  "string": "*** NO METHOD",
                  "type": "string",
                },
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "assignmentExpression": Object {
                  "arguments": Array [
                    Object {
                      "expression": Object {
                        "expression": Object {
                          "name": "dex_method_ids",
                          "type": "identifier",
                        },
                        "name": "method_id",
                        "type": "propertyAccessExpression",
                      },
                      "index": Object {
                        "name": "id",
                        "type": "identifier",
                      },
                      "type": "arrayIndexExpression",
                    },
                  ],
                  "name": Object {
                    "name": "MethodIdItemRead",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "GetMethodById",
    "parameters": Array [
      Object {
        "name": "id",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "int",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "condition": Object {
            "left": Object {
              "name": "id",
              "type": "identifier",
            },
            "operator": "==",
            "right": Object {
              "type": "number",
              "value": 4294967295,
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "assignmentExpression": Object {
                  "string": "(0xFFFFFFFF)",
                  "type": "string",
                },
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "condition": Object {
            "arguments": Array [
              Object {
                "expression": Object {
                  "expression": Object {
                    "name": "dex_field_ids",
                    "type": "identifier",
                  },
                  "name": "field_id",
                  "type": "propertyAccessExpression",
                },
                "index": Object {
                  "name": "id",
                  "type": "identifier",
                },
                "type": "arrayIndexExpression",
              },
            ],
            "name": Object {
              "name": "exists",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "falseStatement": Object {
            "statements": Array [
              Object {
                "assignmentExpression": Object {
                  "string": "*** NO FIELD",
                  "type": "string",
                },
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "assignmentExpression": Object {
                  "arguments": Array [
                    Object {
                      "expression": Object {
                        "expression": Object {
                          "name": "dex_field_ids",
                          "type": "identifier",
                        },
                        "name": "field_id",
                        "type": "propertyAccessExpression",
                      },
                      "index": Object {
                        "name": "id",
                        "type": "identifier",
                      },
                      "type": "arrayIndexExpression",
                    },
                  ],
                  "name": Object {
                    "name": "FieldIdItemRead",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "GetFieldById",
    "parameters": Array [
      Object {
        "name": "id",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "int",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "baseType": Object {
      "array": false,
      "name": "uint",
    },
    "declarations": Array [
      Object {
        "name": "DEX_CHUNK_CLASS_LOOKUP",
        "value": Object {
          "type": "number",
          "value": 1129073488,
        },
      },
      Object {
        "name": "DEX_CHUNK_REGISTER_MAPS",
        "value": Object {
          "type": "number",
          "value": 1380794704,
        },
      },
      Object {
        "name": "DEX_CHUNK_END",
        "value": Object {
          "type": "number",
          "value": 1095061060,
        },
      },
    ],
    "type": "enumDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "DexOptChunkRead",
          "type": "identifier",
        },
      },
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Chunk type",
                      "type": "string",
                    },
                  },
                ],
                "name": "type",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DEX_CHUNK_TYPE",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Size of chunk, in bytes",
                      "type": "string",
                    },
                  },
                ],
                "name": "size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "left": Object {
                    "left": Object {
                      "name": "size",
                      "type": "identifier",
                    },
                    "operator": "+",
                    "right": Object {
                      "type": "number",
                      "value": 7,
                    },
                    "type": "binaryExpression",
                  },
                  "operator": "&",
                  "right": Object {
                    "expression": Object {
                      "type": "number",
                      "value": 7,
                    },
                    "operator": "~",
                    "type": "unaryExpression",
                  },
                  "type": "binaryExpression",
                },
                "name": "realsize",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "type",
                "type": "identifier",
              },
              "operator": "==",
              "right": Object {
                "name": "DEX_CHUNK_CLASS_LOOKUP",
                "type": "identifier",
              },
              "type": "binaryExpression",
            },
            "falseStatement": Object {
              "condition": Object {
                "left": Object {
                  "name": "type",
                  "type": "identifier",
                },
                "operator": "==",
                "right": Object {
                  "name": "DEX_CHUNK_REGISTER_MAPS",
                  "type": "identifier",
                },
                "type": "binaryExpression",
              },
              "falseStatement": Object {
                "condition": Object {
                  "left": Object {
                    "name": "type",
                    "type": "identifier",
                  },
                  "operator": "==",
                  "right": Object {
                    "name": "DEX_CHUNK_END",
                    "type": "identifier",
                  },
                  "type": "binaryExpression",
                },
                "falseStatement": Object {
                  "statements": Array [
                    Object {
                      "arguments": Array [
                        Object {
                          "string": "Unknown chunk type 0x%X",
                          "type": "string",
                        },
                        Object {
                          "name": "type",
                          "type": "identifier",
                        },
                      ],
                      "name": Object {
                        "name": "Warning",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    Object {
                      "type": "returnStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "trueStatement": Object {
                  "statements": Array [],
                  "type": "statementList",
                },
                "type": "ifStatement",
              },
              "trueStatement": Object {
                "statements": Array [
                  Object {
                    "annotations": Array [],
                    "declarations": Array [
                      Object {
                        "annotations": Array [],
                        "arraySelector": Object {
                          "name": "realsize",
                          "type": "identifier",
                        },
                        "name": "chunkbytes",
                      },
                    ],
                    "type": "variableDeclaration",
                    "variableType": Object {
                      "array": false,
                      "name": "ubyte",
                    },
                  },
                ],
                "type": "statementList",
              },
              "type": "ifStatement",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "DexOpt class lookup hash table",
                            "type": "string",
                          },
                        },
                      ],
                      "name": "class_lookup_table",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "dex_class_lookup",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "dexopt_opt_chunk",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "DexoptOptTableRead",
          "type": "identifier",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "type": "number",
                  "value": 0,
                },
                "name": "count",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "body": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "name": "chunk",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "dexopt_opt_chunk",
                  },
                },
                Object {
                  "expression": Object {
                    "name": "count",
                    "type": "identifier",
                  },
                  "operator": "++",
                  "type": "postfixExpression",
                },
              ],
              "type": "statementList",
            },
            "condition": Object {
              "left": Object {
                "expression": Object {
                  "name": "chunk",
                  "type": "identifier",
                },
                "name": "type",
                "type": "propertyAccessExpression",
              },
              "operator": "!=",
              "right": Object {
                "name": "DEX_CHUNK_END",
                "type": "identifier",
              },
              "type": "binaryExpression",
            },
            "type": "doWhileStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "dexopt_opt_table",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "s",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "arguments": Array [
            Object {
              "name": "s",
              "type": "identifier",
            },
            Object {
              "string": "%i items",
              "type": "string",
            },
            Object {
              "expression": Object {
                "name": "t",
                "type": "identifier",
              },
              "name": "count",
              "type": "propertyAccessExpression",
            },
          ],
          "name": Object {
            "name": "SPrintf",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "DexoptOptTableRead",
    "parameters": Array [
      Object {
        "name": "t",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "dexopt_opt_table",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "s",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "arguments": Array [
            Object {
              "name": "s",
              "type": "identifier",
            },
            Object {
              "string": "%s chunk: %i bytes",
              "type": "string",
            },
            Object {
              "arguments": Array [
                Object {
                  "expression": Object {
                    "name": "c",
                    "type": "identifier",
                  },
                  "name": "type",
                  "type": "propertyAccessExpression",
                },
              ],
              "name": Object {
                "name": "EnumToString",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
            Object {
              "expression": Object {
                "name": "c",
                "type": "identifier",
              },
              "name": "size",
              "type": "propertyAccessExpression",
            },
          ],
          "name": Object {
            "name": "SPrintf",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "DexOptChunkRead",
    "parameters": Array [
      Object {
        "name": "c",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "dexopt_opt_chunk",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "DexClassLookupEntryRead",
          "type": "identifier",
        },
      },
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Class descriptor hash code",
                      "type": "string",
                    },
                  },
                ],
                "name": "class_descriptor_hash",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "uint",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "File offset of class descriptor",
                      "type": "string",
                    },
                  },
                ],
                "name": "class_descriptor_offset",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "File offset of class definition",
                      "type": "string",
                    },
                  },
                ],
                "name": "class_definition_offset",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "dex_class_lookup_entry",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "s",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "arguments": Array [
            Object {
              "name": "s",
              "type": "identifier",
            },
            Object {
              "string": "0x%X: (descriptor 0x%X, definition 0x%X)",
              "type": "string",
            },
            Object {
              "expression": Object {
                "name": "e",
                "type": "identifier",
              },
              "name": "class_descriptor_hash",
              "type": "propertyAccessExpression",
            },
            Object {
              "expression": Object {
                "name": "e",
                "type": "identifier",
              },
              "name": "class_descriptor_offset",
              "type": "propertyAccessExpression",
            },
            Object {
              "expression": Object {
                "name": "e",
                "type": "identifier",
              },
              "name": "class_definition_offset",
              "type": "propertyAccessExpression",
            },
          ],
          "name": Object {
            "name": "SPrintf",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "s",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "DexClassLookupEntryRead",
    "parameters": Array [
      Object {
        "name": "e",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "dex_class_lookup_entry",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Size of dex_class_lookup structure",
                      "type": "string",
                    },
                  },
                ],
                "name": "size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Number of entries in class lookup hashtable",
                      "type": "string",
                    },
                  },
                ],
                "name": "num_entries",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "num_entries",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "Class lookup table",
                            "type": "string",
                          },
                        },
                      ],
                      "arraySelector": Object {
                        "name": "num_entries",
                        "type": "identifier",
                      },
                      "name": "table",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "dex_class_lookup_entry",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "dex_class_lookup",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [],
        "initializer": Object {
          "type": "number",
          "value": 0,
        },
        "name": "odex",
      },
    ],
    "local": true,
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "int",
    },
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [],
        "arraySelector": Object {
          "type": "number",
          "value": 3,
        },
        "name": "tmp",
      },
    ],
    "local": true,
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "char",
    },
  },
  Object {
    "arguments": Array [
      Object {
        "name": "tmp",
        "type": "identifier",
      },
      Object {
        "type": "number",
        "value": 0,
      },
      Object {
        "type": "number",
        "value": 3,
      },
    ],
    "name": Object {
      "name": "ReadBytes",
      "type": "identifier",
    },
    "type": "functionCallExpression",
  },
  Object {
    "arguments": Array [
      Object {
        "type": "number",
        "value": 0,
      },
    ],
    "name": Object {
      "name": "FSeek",
      "type": "identifier",
    },
    "type": "functionCallExpression",
  },
  Object {
    "condition": Object {
      "expression": Object {
        "arguments": Array [
          Object {
            "name": "tmp",
            "type": "identifier",
          },
          Object {
            "string": "dey",
            "type": "string",
          },
        ],
        "name": Object {
          "name": "Strcmp",
          "type": "identifier",
        },
        "type": "functionCallExpression",
      },
      "operator": "!",
      "type": "unaryExpression",
    },
    "trueStatement": Object {
      "statements": Array [
        Object {
          "left": Object {
            "name": "odex",
            "type": "identifier",
          },
          "operator": "=",
          "right": Object {
            "type": "number",
            "value": 1,
          },
          "type": "binaryExpression",
        },
      ],
      "type": "statementList",
    },
    "type": "ifStatement",
  },
  Object {
    "condition": Object {
      "name": "odex",
      "type": "identifier",
    },
    "trueStatement": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [
                Object {
                  "key": "comment",
                  "value": Object {
                    "string": "DexOpt file header",
                    "type": "string",
                  },
                },
              ],
              "name": "dexopt_header",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "dexopt_header_item",
          },
        },
        Object {
          "left": Object {
            "name": "odexpad",
            "type": "identifier",
          },
          "operator": "=",
          "right": Object {
            "expression": Object {
              "name": "dexopt_header",
              "type": "identifier",
            },
            "name": "dex_offset",
            "type": "propertyAccessExpression",
          },
          "type": "binaryExpression",
        },
        Object {
          "arguments": Array [
            Object {
              "name": "odexpad",
              "type": "identifier",
            },
          ],
          "name": Object {
            "name": "FSeek",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
      ],
      "type": "statementList",
    },
    "type": "ifStatement",
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [
          Object {
            "key": "comment",
            "value": Object {
              "string": "Dex file header",
              "type": "string",
            },
          },
        ],
        "name": "dex_header",
      },
    ],
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "header_item",
    },
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [
          Object {
            "key": "comment",
            "value": Object {
              "string": "String ID list",
              "type": "string",
            },
          },
        ],
        "arguments": Array [
          Object {
            "expression": Object {
              "name": "dex_header",
              "type": "identifier",
            },
            "name": "string_ids_size",
            "type": "propertyAccessExpression",
          },
        ],
        "name": "dex_string_ids",
      },
    ],
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "string_id_list",
    },
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [
          Object {
            "key": "comment",
            "value": Object {
              "string": "Type ID list",
              "type": "string",
            },
          },
        ],
        "arguments": Array [
          Object {
            "expression": Object {
              "name": "dex_header",
              "type": "identifier",
            },
            "name": "type_ids_size",
            "type": "propertyAccessExpression",
          },
        ],
        "name": "dex_type_ids",
      },
    ],
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "type_id_list",
    },
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [
          Object {
            "key": "comment",
            "value": Object {
              "string": "Method prototype ID list",
              "type": "string",
            },
          },
        ],
        "arguments": Array [
          Object {
            "expression": Object {
              "name": "dex_header",
              "type": "identifier",
            },
            "name": "proto_ids_size",
            "type": "propertyAccessExpression",
          },
        ],
        "name": "dex_proto_ids",
      },
    ],
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "proto_id_list",
    },
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [
          Object {
            "key": "comment",
            "value": Object {
              "string": "Field ID list",
              "type": "string",
            },
          },
        ],
        "arguments": Array [
          Object {
            "expression": Object {
              "name": "dex_header",
              "type": "identifier",
            },
            "name": "field_ids_size",
            "type": "propertyAccessExpression",
          },
        ],
        "name": "dex_field_ids",
      },
    ],
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "field_id_list",
    },
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [
          Object {
            "key": "comment",
            "value": Object {
              "string": "Method ID list",
              "type": "string",
            },
          },
        ],
        "arguments": Array [
          Object {
            "expression": Object {
              "name": "dex_header",
              "type": "identifier",
            },
            "name": "method_ids_size",
            "type": "propertyAccessExpression",
          },
        ],
        "name": "dex_method_ids",
      },
    ],
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "method_id_list",
    },
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [
          Object {
            "key": "comment",
            "value": Object {
              "string": "Class definitions list",
              "type": "string",
            },
          },
        ],
        "arguments": Array [
          Object {
            "expression": Object {
              "name": "dex_header",
              "type": "identifier",
            },
            "name": "class_defs_size",
            "type": "propertyAccessExpression",
          },
        ],
        "name": "dex_class_defs",
      },
    ],
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "class_def_item_list",
    },
  },
  Object {
    "condition": Object {
      "left": Object {
        "expression": Object {
          "name": "dex_header",
          "type": "identifier",
        },
        "name": "map_off",
        "type": "propertyAccessExpression",
      },
      "operator": "!=",
      "right": Object {
        "type": "number",
        "value": 0,
      },
      "type": "binaryExpression",
    },
    "trueStatement": Object {
      "statements": Array [
        Object {
          "arguments": Array [
            Object {
              "left": Object {
                "name": "odexpad",
                "type": "identifier",
              },
              "operator": "+",
              "right": Object {
                "expression": Object {
                  "name": "dex_header",
                  "type": "identifier",
                },
                "name": "map_off",
                "type": "propertyAccessExpression",
              },
              "type": "binaryExpression",
            },
          ],
          "name": Object {
            "name": "FSeek",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [
                Object {
                  "key": "comment",
                  "value": Object {
                    "string": "Map list",
                    "type": "string",
                  },
                },
              ],
              "name": "dex_map_list",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "map_list_type",
          },
        },
      ],
      "type": "statementList",
    },
    "type": "ifStatement",
  },
  Object {
    "condition": Object {
      "name": "odex",
      "type": "identifier",
    },
    "trueStatement": Object {
      "statements": Array [
        Object {
          "condition": Object {
            "left": Object {
              "expression": Object {
                "name": "dexopt_header",
                "type": "identifier",
              },
              "name": "deps_offset",
              "type": "propertyAccessExpression",
            },
            "operator": "!=",
            "right": Object {
              "type": "number",
              "value": 0,
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "arguments": Array [
                  Object {
                    "expression": Object {
                      "name": "dexopt_header",
                      "type": "identifier",
                    },
                    "name": "deps_offset",
                    "type": "propertyAccessExpression",
                  },
                ],
                "name": Object {
                  "name": "FSeek",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              Object {
                "annotations": Array [],
                "declarations": Array [
                  Object {
                    "annotations": Array [
                      Object {
                        "key": "comment",
                        "value": Object {
                          "string": "DexOpt dependency table",
                          "type": "string",
                        },
                      },
                    ],
                    "arraySelector": Object {
                      "expression": Object {
                        "name": "dexopt_header",
                        "type": "identifier",
                      },
                      "name": "deps_length",
                      "type": "propertyAccessExpression",
                    },
                    "name": "dexopt_deps",
                  },
                ],
                "type": "variableDeclaration",
                "variableType": Object {
                  "array": false,
                  "name": "ubyte",
                },
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "condition": Object {
            "left": Object {
              "expression": Object {
                "name": "dexopt_header",
                "type": "identifier",
              },
              "name": "opt_offset",
              "type": "propertyAccessExpression",
            },
            "operator": "!=",
            "right": Object {
              "type": "number",
              "value": 0,
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "arguments": Array [
                  Object {
                    "expression": Object {
                      "name": "dexopt_header",
                      "type": "identifier",
                    },
                    "name": "opt_offset",
                    "type": "propertyAccessExpression",
                  },
                ],
                "name": Object {
                  "name": "FSeek",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              Object {
                "annotations": Array [],
                "declarations": Array [
                  Object {
                    "annotations": Array [
                      Object {
                        "key": "comment",
                        "value": Object {
                          "string": "DexOpt OPT tabls",
                          "type": "string",
                        },
                      },
                    ],
                    "name": "opt_table",
                  },
                ],
                "type": "variableDeclaration",
                "variableType": Object {
                  "array": false,
                  "name": "dexopt_opt_table",
                },
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
      ],
      "type": "statementList",
    },
    "type": "ifStatement",
  },
]
`;

exports[`Sweetscape Importer creates EXE definition 1`] = `
Array [
  Object {
    "alias": "ULONGLONG",
    "annotations": Array [],
    "name": Object {
      "array": false,
      "name": "QWORD",
    },
    "type": "typeAlias",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "IMAGE_DOS_SIGNATURE = 0x5A4D",
                      "type": "string",
                    },
                  },
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "MZSignature",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Bytes on last page of file",
                      "type": "string",
                    },
                  },
                ],
                "name": "UsedBytesInTheLastPage",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Pages in file",
                      "type": "string",
                    },
                  },
                ],
                "name": "FileSizeInPages",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Relocations",
                      "type": "string",
                    },
                  },
                ],
                "name": "NumberOfRelocationItems",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Size of header in paragraphs",
                      "type": "string",
                    },
                  },
                ],
                "name": "HeaderSizeInParagraphs",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Minimum extra paragraphs needed",
                      "type": "string",
                    },
                  },
                ],
                "name": "MinimumExtraParagraphs",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Maximum extra paragraphs needed",
                      "type": "string",
                    },
                  },
                ],
                "name": "MaximumExtraParagraphs",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Initial (relative) SS value",
                      "type": "string",
                    },
                  },
                ],
                "name": "InitialRelativeSS",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Initial SP value",
                      "type": "string",
                    },
                  },
                ],
                "name": "InitialSP",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Checksum",
                      "type": "string",
                    },
                  },
                ],
                "name": "Checksum",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Initial IP value",
                      "type": "string",
                    },
                  },
                ],
                "name": "InitialIP",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Initial (relative) CS value",
                      "type": "string",
                    },
                  },
                ],
                "name": "InitialRelativeCS",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "File address of relocation table",
                      "type": "string",
                    },
                  },
                ],
                "name": "AddressOfRelocationTable",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Overlay number",
                      "type": "string",
                    },
                  },
                ],
                "name": "OverlayNumber",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Reserved words",
                      "type": "string",
                    },
                  },
                ],
                "arraySelector": Object {
                  "type": "number",
                  "value": 4,
                },
                "name": "Reserved",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "OEM identifier (for OEMinfo)",
                      "type": "string",
                    },
                  },
                ],
                "name": "OEMid",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "OEM information; OEMid specific",
                      "type": "string",
                    },
                  },
                ],
                "name": "OEMinfo",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Reserved words",
                      "type": "string",
                    },
                  },
                ],
                "arraySelector": Object {
                  "type": "number",
                  "value": 10,
                },
                "name": "Reserved2",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "NtHeader Offset",
                      "type": "string",
                    },
                  },
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "AddressOfNewExeHeader",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "LONG",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "IMAGE_DOS_HEADER",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "condition": Object {
              "left": Object {
                "expression": Object {
                  "name": "DosHeader",
                  "type": "identifier",
                },
                "name": "AddressOfNewExeHeader",
                "type": "propertyAccessExpression",
              },
              "operator": ">",
              "right": Object {
                "operand": Object {
                  "name": "IMAGE_DOS_HEADER",
                  "type": "identifier",
                },
                "type": "sizeofExpression",
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "string": "Space between DOS header and NT header",
                            "type": "string",
                          },
                        },
                      ],
                      "arraySelector": Object {
                        "left": Object {
                          "expression": Object {
                            "name": "DosHeader",
                            "type": "identifier",
                          },
                          "name": "AddressOfNewExeHeader",
                          "type": "propertyAccessExpression",
                        },
                        "operator": "-",
                        "right": Object {
                          "operand": Object {
                            "name": "IMAGE_DOS_HEADER",
                            "type": "identifier",
                          },
                          "type": "sizeofExpression",
                        },
                        "type": "binaryExpression",
                      },
                      "name": "Data",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "UCHAR",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
          Object {
            "arguments": Array [
              Object {
                "string": "Space between DOS header and NT header is %d bytes\\\\n",
                "type": "string",
              },
              Object {
                "left": Object {
                  "expression": Object {
                    "name": "DosHeader",
                    "type": "identifier",
                  },
                  "name": "AddressOfNewExeHeader",
                  "type": "propertyAccessExpression",
                },
                "operator": "-",
                "right": Object {
                  "operand": Object {
                    "name": "IMAGE_DOS_HEADER",
                    "type": "identifier",
                  },
                  "type": "sizeofExpression",
                },
                "type": "binaryExpression",
              },
            ],
            "name": Object {
              "name": "Printf",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "IMAGE_DOS_STUB",
    "type": "structDeclaration",
  },
  Object {
    "baseType": Object {
      "array": false,
      "name": "WORD",
    },
    "declarations": Array [
      Object {
        "name": "IMAGE_MACHINE_UNKNOWN",
        "value": Object {
          "type": "number",
          "value": 0,
        },
      },
      Object {
        "name": "I386",
        "value": Object {
          "type": "number",
          "value": 332,
        },
      },
      Object {
        "name": "R3000",
        "value": Object {
          "type": "number",
          "value": 354,
        },
      },
      Object {
        "name": "R4000",
        "value": Object {
          "type": "number",
          "value": 358,
        },
      },
      Object {
        "name": "R10000",
        "value": Object {
          "type": "number",
          "value": 360,
        },
      },
      Object {
        "name": "WCEMIPSV2",
        "value": Object {
          "type": "number",
          "value": 361,
        },
      },
      Object {
        "name": "ALPHA",
        "value": Object {
          "type": "number",
          "value": 388,
        },
      },
      Object {
        "name": "SH3",
        "value": Object {
          "type": "number",
          "value": 418,
        },
      },
      Object {
        "name": "SH3DSP",
        "value": Object {
          "type": "number",
          "value": 419,
        },
      },
      Object {
        "name": "SH3E",
        "value": Object {
          "type": "number",
          "value": 420,
        },
      },
      Object {
        "name": "SH4",
        "value": Object {
          "type": "number",
          "value": 422,
        },
      },
      Object {
        "name": "SH5",
        "value": Object {
          "type": "number",
          "value": 424,
        },
      },
      Object {
        "name": "ARM",
        "value": Object {
          "type": "number",
          "value": 448,
        },
      },
      Object {
        "name": "THUMB",
        "value": Object {
          "type": "number",
          "value": 450,
        },
      },
      Object {
        "name": "AM33",
        "value": Object {
          "type": "number",
          "value": 467,
        },
      },
      Object {
        "name": "POWERPC",
        "value": Object {
          "type": "number",
          "value": 496,
        },
      },
      Object {
        "name": "POWERPCFP",
        "value": Object {
          "type": "number",
          "value": 497,
        },
      },
      Object {
        "name": "IA64",
        "value": Object {
          "type": "number",
          "value": 512,
        },
      },
      Object {
        "name": "MIPS16",
        "value": Object {
          "type": "number",
          "value": 614,
        },
      },
      Object {
        "name": "ALPHA64",
        "value": Object {
          "type": "number",
          "value": 644,
        },
      },
      Object {
        "name": "MIPSFPU",
        "value": Object {
          "type": "number",
          "value": 870,
        },
      },
      Object {
        "name": "MIPSFPU16",
        "value": Object {
          "type": "number",
          "value": 1126,
        },
      },
      Object {
        "name": "TRICORE",
        "value": Object {
          "type": "number",
          "value": 1312,
        },
      },
      Object {
        "name": "CEF",
        "value": Object {
          "type": "number",
          "value": 3311,
        },
      },
      Object {
        "name": "EBC",
        "value": Object {
          "type": "number",
          "value": 3772,
        },
      },
      Object {
        "name": "AMD64",
        "value": Object {
          "type": "number",
          "value": 34404,
        },
      },
      Object {
        "name": "M32R",
        "value": Object {
          "type": "number",
          "value": 36929,
        },
      },
      Object {
        "name": "CEE",
        "value": Object {
          "type": "number",
          "value": 49390,
        },
      },
    ],
    "type": "enumDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "comment",
        "value": Object {
          "string": "WORD",
          "type": "string",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x0001  Relocation info stripped from file",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_FILE_RELOCS_STRIPPED",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x0002  File is executable",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_FILE_EXECUTABLE_IMAGE",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x0004  Line nunbers stripped from file",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_FILE_LINE_NUMS_STRIPPED",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x0008  Local symbols stripped from file",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_FILE_LOCAL_SYMS_STRIPPED",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x0010  Agressively trim working set",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_FILE_AGGRESIVE_WS_TRIM",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x0020  App can handle >2gb addresses",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_FILE_LARGE_ADDRESS_AWARE",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [
              Object {
                "key": "comment",
                "value": Object {
                  "string": "0x0040  Reserved",
                  "type": "string",
                },
              },
              Object {
                "key": "hidden",
                "value": Object {
                  "type": "boolean",
                  "value": true,
                },
              },
            ],
            "bits": Object {
              "type": "number",
              "value": 1,
            },
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x0080  Bytes of machine word are reversed",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_FILE_BYTES_REVERSED_LO",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x0100  32 bit word machine",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_FILE_32BIT_MACHINE",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x0200  Debugging info stripped from file in .DBG file",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_FILE_DEBUG_STRIPPED",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x0400  If Image is on removable media, copy and run from the swap file",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_FILE_REMOVABLE_RUN_FROM_SWAP",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x0800  If Image is on Net, copy and run from the swap file",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_FILE_NET_RUN_FROM_SWAP",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x1000  System File",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_FILE_SYSTEM",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x2000  File is a DLL",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_FILE_DLL",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x4000  File should only be run on a UP machine",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_FILE_UP_SYSTEM_ONLY",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x8000  Bytes of machine word are reversed",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_FILE_BYTES_REVERSED_HI",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "FILE_CHARACTERISTICS",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "fgcolor",
                    "value": Object {
                      "name": "cPurple",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "WORD",
                      "type": "string",
                    },
                  },
                ],
                "name": "Machine",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "IMAGE_MACHINE",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "fgcolor",
                    "value": Object {
                      "name": "cBlue",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Section num",
                      "type": "string",
                    },
                  },
                ],
                "name": "NumberOfSections",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "DWORD,from 01/01/1970 12:00 AM",
                      "type": "string",
                    },
                  },
                ],
                "name": "TimeDateStamp",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "time_t",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "PointerToSymbolTable",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "NumberOfSymbols",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "SizeOfOptionalHeader",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "WORD",
                      "type": "string",
                    },
                  },
                ],
                "name": "Characteristics",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "FILE_CHARACTERISTICS",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "IMAGE_FILE_HEADER",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "name": "CommentRVA2FOA",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "VirtualAddress",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "Size",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "IMAGE_DATA_DIRECTORY",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "expression": Object {
                    "expression": Object {
                      "name": "NtHeader",
                      "type": "identifier",
                    },
                    "name": "OptionalHeader",
                    "type": "propertyAccessExpression",
                  },
                  "name": "NumberOfRvaAndSizes",
                  "type": "propertyAccessExpression",
                },
                "name": "len",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "len",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 16,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "left": Object {
                    "name": "len",
                    "type": "identifier",
                  },
                  "operator": "=",
                  "right": Object {
                    "type": "number",
                    "value": 16,
                  },
                  "type": "binaryExpression",
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "len",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "comment",
                      "value": Object {
                        "string": "IMAGE_DIRECTORY_ENTRY_EXPORT",
                        "type": "string",
                      },
                    },
                  ],
                  "name": "Export",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "IMAGE_DATA_DIRECTORY",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "len",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 1,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "comment",
                      "value": Object {
                        "string": "IMAGE_DIRECTORY_ENTRY_IMPORT",
                        "type": "string",
                      },
                    },
                    Object {
                      "key": "fgcolor",
                      "value": Object {
                        "name": "cPurple",
                        "type": "identifier",
                      },
                    },
                  ],
                  "name": "Import",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "IMAGE_DATA_DIRECTORY",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "len",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 2,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "comment",
                      "value": Object {
                        "string": "IMAGE_DIRECTORY_ENTRY_RESOURCE",
                        "type": "string",
                      },
                    },
                  ],
                  "name": "Resource",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "IMAGE_DATA_DIRECTORY",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "len",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 3,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "comment",
                      "value": Object {
                        "string": "IMAGE_DIRECTORY_ENTRY_EXCEPTION",
                        "type": "string",
                      },
                    },
                  ],
                  "name": "Exception",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "IMAGE_DATA_DIRECTORY",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "len",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 4,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "comment",
                      "value": Object {
                        "string": "IMAGE_DIRECTORY_ENTRY_SECURITY",
                        "type": "string",
                      },
                    },
                  ],
                  "name": "Security",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "IMAGE_DATA_DIRECTORY",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "len",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 5,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "comment",
                      "value": Object {
                        "string": "IMAGE_DIRECTORY_ENTRY_BASERELOC",
                        "type": "string",
                      },
                    },
                    Object {
                      "key": "fgcolor",
                      "value": Object {
                        "name": "cPurple",
                        "type": "identifier",
                      },
                    },
                  ],
                  "name": "BaseRelocationTable",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "IMAGE_DATA_DIRECTORY",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "len",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 6,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "comment",
                      "value": Object {
                        "string": "IMAGE_DIRECTORY_ENTRY_DEBUG",
                        "type": "string",
                      },
                    },
                  ],
                  "name": "DebugDirectory",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "IMAGE_DATA_DIRECTORY",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "len",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 7,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "comment",
                      "value": Object {
                        "string": "IMAGE_DIRECTORY_ENTRY_ARCHITECTURE",
                        "type": "string",
                      },
                    },
                  ],
                  "name": "CopyrightOrArchitectureSpecificData",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "IMAGE_DATA_DIRECTORY",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "len",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 8,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "comment",
                      "value": Object {
                        "string": "IMAGE_DIRECTORY_ENTRY_GLOBALPTR",
                        "type": "string",
                      },
                    },
                  ],
                  "name": "GlobalPtr",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "IMAGE_DATA_DIRECTORY",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "len",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 9,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "comment",
                      "value": Object {
                        "string": "IMAGE_DIRECTORY_ENTRY_TLS",
                        "type": "string",
                      },
                    },
                  ],
                  "name": "TLSDirectory",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "IMAGE_DATA_DIRECTORY",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "len",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 10,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "comment",
                      "value": Object {
                        "string": "IMAGE_DIRECTORY_ENTRY_LOAD_CONFIG",
                        "type": "string",
                      },
                    },
                  ],
                  "name": "LoadConfigurationDirectory",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "IMAGE_DATA_DIRECTORY",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "len",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 11,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "comment",
                      "value": Object {
                        "string": "IMAGE_DIRECTORY_ENTRY_BOUND_IMPORT",
                        "type": "string",
                      },
                    },
                  ],
                  "name": "BoundImportDirectory",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "IMAGE_DATA_DIRECTORY",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "len",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 12,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "comment",
                      "value": Object {
                        "string": "IMAGE_DIRECTORY_ENTRY_IAT",
                        "type": "string",
                      },
                    },
                    Object {
                      "key": "fgcolor",
                      "value": Object {
                        "name": "cPurple",
                        "type": "identifier",
                      },
                    },
                  ],
                  "name": "ImportAddressTable",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "IMAGE_DATA_DIRECTORY",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "len",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 13,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "comment",
                      "value": Object {
                        "string": "IMAGE_DIRECTORY_ENTRY_DELAY_IMPORT",
                        "type": "string",
                      },
                    },
                  ],
                  "name": "DelayLoadImportDescriptors",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "IMAGE_DATA_DIRECTORY",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "len",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 14,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "comment",
                      "value": Object {
                        "string": "IMAGE_DIRECTORY_ENTRY_COM_DESCRIPTOR",
                        "type": "string",
                      },
                    },
                  ],
                  "name": "COMRuntimedescriptor",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "IMAGE_DATA_DIRECTORY",
              },
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "len",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 15,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "annotations": Array [],
              "declarations": Array [
                Object {
                  "annotations": Array [
                    Object {
                      "key": "comment",
                      "value": Object {
                        "string": "System Reserved",
                        "type": "string",
                      },
                    },
                  ],
                  "name": "Reserved",
                },
              ],
              "type": "variableDeclaration",
              "variableType": Object {
                "array": false,
                "name": "IMAGE_DATA_DIRECTORY",
              },
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "IMAGE_DATA_DIRECTORY_ARRAY",
    "type": "structDeclaration",
  },
  Object {
    "baseType": Object {
      "array": false,
      "name": "WORD",
    },
    "declarations": Array [
      Object {
        "name": "IMAGE_SUBSYSTEM_UNKNOWN",
        "value": Object {
          "type": "number",
          "value": 0,
        },
      },
      Object {
        "name": "NATIVE",
        "value": Object {
          "type": "number",
          "value": 1,
        },
      },
      Object {
        "name": "WINDOWS_GUI",
        "value": Object {
          "type": "number",
          "value": 2,
        },
      },
      Object {
        "name": "WINDOWS_CUI",
        "value": Object {
          "type": "number",
          "value": 3,
        },
      },
      Object {
        "name": "OS2_CUI",
        "value": Object {
          "type": "number",
          "value": 5,
        },
      },
      Object {
        "name": "POSIX_CUI",
        "value": Object {
          "type": "number",
          "value": 7,
        },
      },
      Object {
        "name": "NATIVE_WINDOWS",
        "value": Object {
          "type": "number",
          "value": 8,
        },
      },
      Object {
        "name": "WINDOWS_CE_GUI",
        "value": Object {
          "type": "number",
          "value": 9,
        },
      },
      Object {
        "name": "EFI_APPLICATION",
        "value": Object {
          "type": "number",
          "value": 10,
        },
      },
      Object {
        "name": "EFI_BOOT_SERVICE_DRIVER",
        "value": Object {
          "type": "number",
          "value": 11,
        },
      },
      Object {
        "name": "EFI_RUNTIME_DRIVER",
        "value": Object {
          "type": "number",
          "value": 12,
        },
      },
      Object {
        "name": "EFI_ROM",
        "value": Object {
          "type": "number",
          "value": 13,
        },
      },
      Object {
        "name": "XBOX",
        "value": Object {
          "type": "number",
          "value": 14,
        },
      },
      Object {
        "name": "WINDOWS_BOOT_APPLICATION",
        "value": Object {
          "type": "number",
          "value": 16,
        },
      },
    ],
    "type": "enumDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "comment",
        "value": Object {
          "string": "WORD",
          "type": "string",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x0001 Reserved",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_LIBRARY_PROCESS_INIT",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x0002 Reserved",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_LIBRARY_PROCESS_TERM",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x0004 Reserved",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_LIBRARY_THREAD_INIT",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x0008 Reserved",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_LIBRARY_THREAD_TERM",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [
              Object {
                "key": "comment",
                "value": Object {
                  "string": "0x0010,0x0020",
                  "type": "string",
                },
              },
              Object {
                "key": "hidden",
                "value": Object {
                  "type": "boolean",
                  "value": true,
                },
              },
            ],
            "bits": Object {
              "type": "number",
              "value": 2,
            },
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x0040",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_DLLCHARACTERISTICS_DYNAMIC_BASE",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x0080",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_DLLCHARACTERISTICS_FORCE_INTEGRITY",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x0100",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_DLLCHARACTERISTICS_NX_COMPAT",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x0200",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_DLLCHARACTERISTICS_NO_ISOLATION",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x0400",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_DLLCHARACTERISTICS_NO_SEH",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x0800",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_DLLCHARACTERISTICS_NO_BIND",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [
              Object {
                "key": "comment",
                "value": Object {
                  "string": "0x1000",
                  "type": "string",
                },
              },
              Object {
                "key": "hidden",
                "value": Object {
                  "type": "boolean",
                  "value": true,
                },
              },
            ],
            "bits": Object {
              "type": "number",
              "value": 1,
            },
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x2000",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_DLLCHARACTERISTICS_WDM_DRIVER",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [
              Object {
                "key": "comment",
                "value": Object {
                  "string": "0x4000",
                  "type": "string",
                },
              },
              Object {
                "key": "hidden",
                "value": Object {
                  "type": "boolean",
                  "value": true,
                },
              },
            ],
            "bits": Object {
              "type": "number",
              "value": 1,
            },
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x8000",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_DLLCHARACTERISTICS_TERMINAL_SERVER_AWARE",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "DLL_CHARACTERISTICS",
    "type": "structDeclaration",
  },
  Object {
    "baseType": Object {
      "array": false,
      "name": "WORD",
    },
    "declarations": Array [
      Object {
        "name": "PE32",
        "value": Object {
          "type": "number",
          "value": 267,
        },
      },
      Object {
        "name": "PE64",
        "value": Object {
          "type": "number",
          "value": 523,
        },
      },
      Object {
        "name": "ROM",
        "value": Object {
          "type": "number",
          "value": 263,
        },
      },
    ],
    "type": "enumDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "Magic",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "OPTIONAL_MAGIC",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "MajorLinkerVersion",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "BYTE",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "MinorLinkerVersion",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "BYTE",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "SizeOfCode",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "SizeOfInitializedData",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "SizeOfUninitializedData",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "name": "CommentRVA2FOA",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "fgcolor",
                    "value": Object {
                      "name": "cPurple",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "AddressOfEntryPoint",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "name": "CommentRVA2FOA",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "BaseOfCode",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "name": "CommentRVA2FOA",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "BaseOfData",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "ImageBase",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "SectionAlignment",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "FileAlignment",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "MajorOperatingSystemVersion",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "MinorOperatingSystemVersion",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "MajorImageVersion",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "MinorImageVersion",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "MajorSubsystemVersion",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "MinorSubsystemVersion",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "Win32VersionValue",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "SizeOfImage",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "SizeOfHeaders",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "CheckSum",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "Subsystem",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "IMAGE_SUBSYSTEM",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "DllCharacteristics",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DLL_CHARACTERISTICS",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "SizeOfStackReserve",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "SizeOfStackCommit",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "SizeOfHeapReserve",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "SizeOfHeapCommit",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "LoaderFlags",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "NumberOfRvaAndSizes",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "DataDirArray",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "IMAGE_DATA_DIRECTORY_ARRAY",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "IMAGE_OPTIONAL_HEADER32",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "Magic",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "OPTIONAL_MAGIC",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "MajorLinkerVersion",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "BYTE",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "MinorLinkerVersion",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "BYTE",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "SizeOfCode",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "SizeOfInitializedData",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "SizeOfUninitializedData",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "name": "CommentRVA2FOA",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "AddressOfEntryPoint",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "BaseOfCode",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "ImageBase",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONGLONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "SectionAlignment",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "FileAlignment",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "MajorOperatingSystemVersion",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "MinorOperatingSystemVersion",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "MajorImageVersion",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "MinorImageVersion",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "MajorSubsystemVersion",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "MinorSubsystemVersion",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "Win32VersionValue",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "SizeOfImage",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "SizeOfHeaders",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "CheckSum",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "Subsystem",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "IMAGE_SUBSYSTEM",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "DllCharacteristics",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DLL_CHARACTERISTICS",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "SizeOfStackReserve",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONGLONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "SizeOfStackCommit",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONGLONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "SizeOfHeapReserve",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONGLONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "SizeOfHeapCommit",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONGLONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "LoaderFlags",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "NumberOfRvaAndSizes",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "DataDirArray",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "IMAGE_DATA_DIRECTORY_ARRAY",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "IMAGE_OPTIONAL_HEADER64",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "size",
        "value": Object {
          "name": "CalcImageNtHeadersSize",
          "type": "identifier",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "IMAGE_NT_SIGNATURE = 0x00004550",
                      "type": "string",
                    },
                  },
                ],
                "name": "Signature",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "FileHeader",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "IMAGE_FILE_HEADER",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "arguments": Array [
                    Object {
                      "arguments": Array [],
                      "name": Object {
                        "name": "FTell",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                  ],
                  "name": Object {
                    "name": "ReadShort",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "name": "OptionalHeaderMagic",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "type": "number",
                "value": 267,
              },
              "operator": "==",
              "right": Object {
                "name": "OptionalHeaderMagic",
                "type": "identifier",
              },
              "type": "binaryExpression",
            },
            "falseStatement": Object {
              "condition": Object {
                "left": Object {
                  "type": "number",
                  "value": 523,
                },
                "operator": "==",
                "right": Object {
                  "name": "OptionalHeaderMagic",
                  "type": "identifier",
                },
                "type": "binaryExpression",
              },
              "falseStatement": Object {
                "statements": Array [
                  Object {
                    "arguments": Array [
                      Object {
                        "string": "Invalid Optional header magic %x.\\\\n",
                        "type": "string",
                      },
                      Object {
                        "name": "OptionalHeaderMagic",
                        "type": "identifier",
                      },
                    ],
                    "name": Object {
                      "name": "Printf",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  Object {
                    "assignmentExpression": Object {
                      "type": "number",
                      "value": 1,
                    },
                    "type": "returnStatement",
                  },
                ],
                "type": "statementList",
              },
              "trueStatement": Object {
                "statements": Array [
                  Object {
                    "annotations": Array [],
                    "declarations": Array [
                      Object {
                        "annotations": Array [],
                        "name": "OptionalHeader",
                      },
                    ],
                    "type": "variableDeclaration",
                    "variableType": Object {
                      "array": false,
                      "name": "IMAGE_OPTIONAL_HEADER64",
                    },
                  },
                ],
                "type": "statementList",
              },
              "type": "ifStatement",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "name": "OptionalHeader",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "IMAGE_OPTIONAL_HEADER32",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "IMAGE_NT_HEADERS",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x00000001 Reserved",
                      "type": "string",
                    },
                  },
                  Object {
                    "key": "hidden",
                    "value": Object {
                      "type": "boolean",
                      "value": true,
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_TYPE_DSECT",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x00000002 Reserved",
                      "type": "string",
                    },
                  },
                  Object {
                    "key": "hidden",
                    "value": Object {
                      "type": "boolean",
                      "value": true,
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_TYPE_NOLOAD",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x00000004 Reserved",
                      "type": "string",
                    },
                  },
                  Object {
                    "key": "hidden",
                    "value": Object {
                      "type": "boolean",
                      "value": true,
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_TYPE_GROUP",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x00000008 Reserved",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_TYPE_NO_PAD",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x00000010 Reserved",
                      "type": "string",
                    },
                  },
                  Object {
                    "key": "hidden",
                    "value": Object {
                      "type": "boolean",
                      "value": true,
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_TYPE_COPY",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x00000020 Section contains code",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_CNT_CODE",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x00000040 Section contains initialized data",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_CNT_INITIALIZED_DATA",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x00000080 Section contains uninitialized data",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_CNT_UNINITIALIZED_DATA",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x00000100 Reserved",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_LNK_OTHER",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x00000200 Section contains comments or some other type of information",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_LNK_INFO",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x00000400 Reserved",
                      "type": "string",
                    },
                  },
                  Object {
                    "key": "hidden",
                    "value": Object {
                      "type": "boolean",
                      "value": true,
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_TYPE_OVER",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x00000800 Section contents will not become part of image",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_LNK_REMOVE",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x00001000 Section contents comdat",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_LNK_COMDAT",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [
              Object {
                "key": "comment",
                "value": Object {
                  "string": "0x00002000 Reserved",
                  "type": "string",
                },
              },
            ],
            "bits": Object {
              "type": "number",
              "value": 1,
            },
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x00004000 Reset speculative exceptions handling bits in the TLB entries for this section.",
                      "type": "string",
                    },
                  },
                  Object {
                    "key": "hidden",
                    "value": Object {
                      "type": "boolean",
                      "value": true,
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_NO_DEFER_SPEC_EXC",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x00008000 Section content can be accessed relative to GP",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_GPREL",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x00010000 Obsolete",
                      "type": "string",
                    },
                  },
                  Object {
                    "key": "hidden",
                    "value": Object {
                      "type": "boolean",
                      "value": true,
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_MEM_SYSHEAP",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x00020000",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_MEM_16BIT",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x00040000 ",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_MEM_LOCKED",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x00080000",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_MEM_PRELOAD",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x00100000",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_ALIGN_1BYTES",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x00200000",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_ALIGN_2BYTES",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x00400000",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_ALIGN_8BYTES",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x00800000",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_ALIGN_128BYTES",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x01000000 Section contains extended relocations",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_LNK_NRELOC_OVFL",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x02000000 Section can be discarded.",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_MEM_DISCARDABLE",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x04000000 Section is not cachable",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_MEM_NOT_CACHED",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x08000000 Section is not pageable.",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_MEM_NOT_PAGED",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x10000000 Section is shareable",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_MEM_SHARED",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x20000000 Section is executable",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_MEM_EXECUTE",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x40000000 Section is readable",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_MEM_READ",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0x80000000 Section is writeable",
                      "type": "string",
                    },
                  },
                ],
                "bits": Object {
                  "type": "number",
                  "value": 1,
                },
                "name": "IMAGE_SCN_MEM_WRITE",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "SECTION_CHARACTERISTICS",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "ReadImageSectionHeader",
          "type": "identifier",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "can end without zero",
                      "type": "string",
                    },
                  },
                ],
                "arraySelector": Object {
                  "type": "number",
                  "value": 8,
                },
                "name": "Name",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "BYTE",
            },
          },
          Object {
            "annotations": Array [],
            "declaration": Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "annotations": Array [],
                    "declarations": Array [
                      Object {
                        "annotations": Array [],
                        "name": "PhysicalAddress",
                      },
                    ],
                    "type": "variableDeclaration",
                    "variableType": Object {
                      "array": false,
                      "name": "DWORD",
                    },
                  },
                  Object {
                    "annotations": Array [],
                    "declarations": Array [
                      Object {
                        "annotations": Array [],
                        "name": "VirtualSize",
                      },
                    ],
                    "type": "variableDeclaration",
                    "variableType": Object {
                      "array": false,
                      "name": "DWORD",
                    },
                  },
                ],
                "type": "statementList",
              },
            },
            "name": "Misc",
            "type": "unionDeclaration",
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "VirtualAddress",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "SizeOfRawData",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "PointerToRawData",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "PointerToRelocations",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "PointerToLinenumbers",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "NumberOfRelocations",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "NumberOfLinenumbers",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "Characteristics",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "SECTION_CHARACTERISTICS",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "IMAGE_SECTION_HEADER",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "ReadSectionData",
          "type": "identifier",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "expression": Object {
                    "name": "SecHeader",
                    "type": "identifier",
                  },
                  "name": "Name",
                  "type": "propertyAccessExpression",
                },
                "name": "sSecName",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "string",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "arraySelector": Object {
                  "expression": Object {
                    "name": "SecHeader",
                    "type": "identifier",
                  },
                  "name": "SizeOfRawData",
                  "type": "propertyAccessExpression",
                },
                "name": "Data",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "UCHAR",
            },
          },
        ],
        "type": "statementList",
      },
      "parameters": Array [
        Object {
          "name": "SecHeader",
          "reference": true,
          "type": Object {
            "array": false,
            "name": "IMAGE_SECTION_HEADER",
          },
        },
      ],
    },
    "name": "IMAGE_SECTION_DATA",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "comment",
        "value": Object {
          "name": "CommentImageImportByName",
          "type": "identifier",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "Hint",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "arraySelector": Object {
                  "name": "nNameLen",
                  "type": "identifier",
                },
                "name": "Name",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "BYTE",
            },
          },
        ],
        "type": "statementList",
      },
      "parameters": Array [
        Object {
          "name": "nNameLen",
          "reference": false,
          "type": Object {
            "array": false,
            "name": "int",
          },
        },
      ],
    },
    "name": "IMAGE_IMPORT_BY_NAME",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "ReadImageImportDescriptor",
          "type": "identifier",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "type": "number",
                  "value": 0,
                },
                "name": "nNameIndex",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "type": "number",
                  "value": 0,
                },
                "name": "ulThrunk",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "type": "number",
                  "value": 0,
                },
                "name": "nNameLen",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "string": "",
                  "type": "string",
                },
                "name": "sDllName",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "string",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "type": "number",
                  "value": 0,
                },
                "name": "ulOriginalFirstThunkFOA",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declaration": Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "annotations": Array [],
                    "declarations": Array [
                      Object {
                        "annotations": Array [],
                        "name": "Characteristics",
                      },
                    ],
                    "type": "variableDeclaration",
                    "variableType": Object {
                      "array": false,
                      "name": "ULONG",
                    },
                  },
                  Object {
                    "annotations": Array [],
                    "declarations": Array [
                      Object {
                        "annotations": Array [
                          Object {
                            "key": "format",
                            "value": Object {
                              "name": "hex",
                              "type": "identifier",
                            },
                          },
                          Object {
                            "key": "comment",
                            "value": Object {
                              "name": "CommentRVA2FOA",
                              "type": "identifier",
                            },
                          },
                        ],
                        "name": "OriginalFirstThunk",
                      },
                    ],
                    "type": "variableDeclaration",
                    "variableType": Object {
                      "array": false,
                      "name": "ULONG",
                    },
                  },
                ],
                "type": "statementList",
              },
            },
            "name": "DUMMYUNIONNAME",
            "type": "unionDeclaration",
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "0 if not bound",
                      "type": "string",
                    },
                  },
                ],
                "name": "TimeDateStamp",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "-1 if no forwarders",
                      "type": "string",
                    },
                  },
                ],
                "name": "ForwarderChain",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "name": "CommentRVAString",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "Name",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "name": "CommentRVA2FOA",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "FirstThunk",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "left": Object {
              "name": "ulOriginalFirstThunkFOA",
              "type": "identifier",
            },
            "operator": "=",
            "right": Object {
              "arguments": Array [
                Object {
                  "expression": Object {
                    "name": "DUMMYUNIONNAME",
                    "type": "identifier",
                  },
                  "name": "OriginalFirstThunk",
                  "type": "propertyAccessExpression",
                },
              ],
              "name": Object {
                "name": "RVA2FOA",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
            "type": "binaryExpression",
          },
          Object {
            "condition": Object {
              "expression": Object {
                "left": Object {
                  "type": "number",
                  "value": 523,
                },
                "operator": "==",
                "right": Object {
                  "expression": Object {
                    "expression": Object {
                      "name": "NtHeader",
                      "type": "identifier",
                    },
                    "name": "OptionalHeader",
                    "type": "propertyAccessExpression",
                  },
                  "name": "Magic",
                  "type": "propertyAccessExpression",
                },
                "type": "binaryExpression",
              },
              "operator": "!",
              "type": "unaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "left": Object {
                    "name": "nNameIndex",
                    "type": "identifier",
                  },
                  "operator": "=",
                  "right": Object {
                    "type": "number",
                    "value": 0,
                  },
                  "type": "binaryExpression",
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "initializer": Object {
                        "type": "number",
                        "value": 0,
                      },
                      "name": "og_position",
                    },
                  ],
                  "local": true,
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "long",
                  },
                },
                Object {
                  "body": Object {
                    "statements": Array [
                      Object {
                        "left": Object {
                          "name": "ulThrunk",
                          "type": "identifier",
                        },
                        "operator": "=",
                        "right": Object {
                          "arguments": Array [
                            Object {
                              "left": Object {
                                "name": "ulOriginalFirstThunkFOA",
                                "type": "identifier",
                              },
                              "operator": "+",
                              "right": Object {
                                "left": Object {
                                  "type": "number",
                                  "value": 4,
                                },
                                "operator": "*",
                                "right": Object {
                                  "name": "nNameIndex",
                                  "type": "identifier",
                                },
                                "type": "binaryExpression",
                              },
                              "type": "binaryExpression",
                            },
                          ],
                          "name": Object {
                            "name": "ReadUInt",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                        "type": "binaryExpression",
                      },
                      Object {
                        "condition": Object {
                          "left": Object {
                            "type": "number",
                            "value": 0,
                          },
                          "operator": "==",
                          "right": Object {
                            "name": "ulThrunk",
                            "type": "identifier",
                          },
                          "type": "binaryExpression",
                        },
                        "trueStatement": Object {
                          "statements": Array [
                            Object {
                              "type": "breakStatement",
                            },
                          ],
                          "type": "statementList",
                        },
                        "type": "ifStatement",
                      },
                      Object {
                        "condition": Object {
                          "expression": Object {
                            "left": Object {
                              "name": "ulThrunk",
                              "type": "identifier",
                            },
                            "operator": "&",
                            "right": Object {
                              "type": "number",
                              "value": 2147483648,
                            },
                            "type": "binaryExpression",
                          },
                          "operator": "!",
                          "type": "unaryExpression",
                        },
                        "trueStatement": Object {
                          "statements": Array [
                            Object {
                              "left": Object {
                                "name": "nNameLen",
                                "type": "identifier",
                              },
                              "operator": "=",
                              "right": Object {
                                "arguments": Array [
                                  Object {
                                    "arguments": Array [
                                      Object {
                                        "left": Object {
                                          "arguments": Array [
                                            Object {
                                              "name": "ulThrunk",
                                              "type": "identifier",
                                            },
                                          ],
                                          "name": Object {
                                            "name": "RVA2FOA",
                                            "type": "identifier",
                                          },
                                          "type": "functionCallExpression",
                                        },
                                        "operator": "+",
                                        "right": Object {
                                          "operand": Object {
                                            "name": "WORD",
                                            "type": "identifier",
                                          },
                                          "type": "sizeofExpression",
                                        },
                                        "type": "binaryExpression",
                                      },
                                    ],
                                    "name": Object {
                                      "name": "ReadString",
                                      "type": "identifier",
                                    },
                                    "type": "functionCallExpression",
                                  },
                                ],
                                "name": Object {
                                  "name": "Strlen",
                                  "type": "identifier",
                                },
                                "type": "functionCallExpression",
                              },
                              "type": "binaryExpression",
                            },
                            Object {
                              "condition": Object {
                                "left": Object {
                                  "type": "number",
                                  "value": 0,
                                },
                                "operator": "!=",
                                "right": Object {
                                  "name": "nNameLen",
                                  "type": "identifier",
                                },
                                "type": "binaryExpression",
                              },
                              "trueStatement": Object {
                                "statements": Array [
                                  Object {
                                    "left": Object {
                                      "name": "og_position",
                                      "type": "identifier",
                                    },
                                    "operator": "=",
                                    "right": Object {
                                      "arguments": Array [],
                                      "name": Object {
                                        "name": "FTell",
                                        "type": "identifier",
                                      },
                                      "type": "functionCallExpression",
                                    },
                                    "type": "binaryExpression",
                                  },
                                  Object {
                                    "arguments": Array [
                                      Object {
                                        "arguments": Array [
                                          Object {
                                            "name": "ulThrunk",
                                            "type": "identifier",
                                          },
                                        ],
                                        "name": Object {
                                          "name": "RVA2FOA",
                                          "type": "identifier",
                                        },
                                        "type": "functionCallExpression",
                                      },
                                    ],
                                    "name": Object {
                                      "name": "FSeek",
                                      "type": "identifier",
                                    },
                                    "type": "functionCallExpression",
                                  },
                                  Object {
                                    "annotations": Array [],
                                    "declarations": Array [
                                      Object {
                                        "annotations": Array [
                                          Object {
                                            "key": "open",
                                            "value": Object {
                                              "type": "boolean",
                                              "value": false,
                                            },
                                          },
                                        ],
                                        "arguments": Array [
                                          Object {
                                            "left": Object {
                                              "name": "nNameLen",
                                              "type": "identifier",
                                            },
                                            "operator": "+",
                                            "right": Object {
                                              "type": "number",
                                              "value": 1,
                                            },
                                            "type": "binaryExpression",
                                          },
                                        ],
                                        "name": "ImportByName",
                                      },
                                    ],
                                    "type": "variableDeclaration",
                                    "variableType": Object {
                                      "array": false,
                                      "name": "IMAGE_IMPORT_BY_NAME",
                                    },
                                  },
                                  Object {
                                    "arguments": Array [
                                      Object {
                                        "name": "og_position",
                                        "type": "identifier",
                                      },
                                    ],
                                    "name": Object {
                                      "name": "FSeek",
                                      "type": "identifier",
                                    },
                                    "type": "functionCallExpression",
                                  },
                                ],
                                "type": "statementList",
                              },
                              "type": "ifStatement",
                            },
                          ],
                          "type": "statementList",
                        },
                        "type": "ifStatement",
                      },
                      Object {
                        "expression": Object {
                          "name": "nNameIndex",
                          "type": "identifier",
                        },
                        "operator": "++",
                        "type": "postfixExpression",
                      },
                    ],
                    "type": "statementList",
                  },
                  "condition": Object {
                    "type": "number",
                    "value": 1,
                  },
                  "type": "whileStatement",
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "IMAGE_IMPORT_DESCRIPTOR",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "read",
        "value": Object {
          "name": "ReadExportByName",
          "type": "identifier",
        },
      },
      Object {
        "key": "comment",
        "value": Object {
          "name": "CommentExportByName",
          "type": "identifier",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "name": "ulDestRVA",
                  "type": "identifier",
                },
                "name": "ulLocalDestRVA",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "name": "sJmpName",
                  "type": "identifier",
                },
                "name": "sLocalJmpName",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "string",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "arraySelector": Object {
                  "left": Object {
                    "arguments": Array [
                      Object {
                        "name": "sExportFuncName",
                        "type": "identifier",
                      },
                    ],
                    "name": Object {
                      "name": "Strlen",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  "operator": "+",
                  "right": Object {
                    "type": "number",
                    "value": 1,
                  },
                  "type": "binaryExpression",
                },
                "name": "Function",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "char",
            },
          },
        ],
        "type": "statementList",
      },
      "parameters": Array [
        Object {
          "name": "sExportFuncName",
          "reference": false,
          "type": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "name": "ulDestRVA",
          "reference": false,
          "type": Object {
            "array": false,
            "name": "ULONG",
          },
        },
        Object {
          "name": "sJmpName",
          "reference": false,
          "type": Object {
            "array": false,
            "name": "string",
          },
        },
      ],
    },
    "name": "IMAGE_EXPORT_BY_NAME",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "comment",
        "value": Object {
          "name": "CommentExportDirectory",
          "type": "identifier",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "Characteristics",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "TimeDateStamp",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "time_t",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "MajorVersion",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "MinorVersion",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "name": "CommentRVAString",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "Name",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "Base",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "NumberOfFunctions",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "NumberOfNames",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "name": "CommentRVA2FOA",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "AddressOfFunctions",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "name": "CommentRVA2FOA",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "AddressOfNames",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "name": "CommentRVA2FOA",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "AddressOfNameOrdinals",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "type": "number",
                  "value": 0,
                },
                "name": "nIndex",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "type": "number",
                  "value": 0,
                },
                "name": "NameArrayFOA",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "type": "number",
                  "value": 0,
                },
                "name": "OrdinalArrayFOA",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "type": "number",
                  "value": 0,
                },
                "name": "FuncArrayFOA",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "type": "number",
                  "value": 0,
                },
                "name": "ulNameRVA",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "type": "number",
                  "value": 0,
                },
                "name": "ulNameFOA",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "type": "number",
                  "value": 0,
                },
                "name": "ulFuncRVA",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "type": "number",
                  "value": 0,
                },
                "name": "wOrdinal",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "string": "",
                  "type": "string",
                },
                "name": "sExportName",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "string",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "string": "",
                  "type": "string",
                },
                "name": "sJmpName",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "string",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "arguments": Array [],
                  "name": Object {
                    "name": "FTell",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "name": "ulCurPos",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "name": "ulCurPos",
                  "type": "identifier",
                },
                "name": "ulEndPos",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "left": Object {
              "name": "NameArrayFOA",
              "type": "identifier",
            },
            "operator": "=",
            "right": Object {
              "arguments": Array [
                Object {
                  "expression": Object {
                    "name": "ExportDir",
                    "type": "identifier",
                  },
                  "name": "AddressOfNames",
                  "type": "propertyAccessExpression",
                },
              ],
              "name": Object {
                "name": "RVA2FOA",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
            "type": "binaryExpression",
          },
          Object {
            "left": Object {
              "name": "OrdinalArrayFOA",
              "type": "identifier",
            },
            "operator": "=",
            "right": Object {
              "arguments": Array [
                Object {
                  "expression": Object {
                    "name": "ExportDir",
                    "type": "identifier",
                  },
                  "name": "AddressOfNameOrdinals",
                  "type": "propertyAccessExpression",
                },
              ],
              "name": Object {
                "name": "RVA2FOA",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
            "type": "binaryExpression",
          },
          Object {
            "left": Object {
              "name": "FuncArrayFOA",
              "type": "identifier",
            },
            "operator": "=",
            "right": Object {
              "arguments": Array [
                Object {
                  "expression": Object {
                    "name": "ExportDir",
                    "type": "identifier",
                  },
                  "name": "AddressOfFunctions",
                  "type": "propertyAccessExpression",
                },
              ],
              "name": Object {
                "name": "RVA2FOA",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
            "type": "binaryExpression",
          },
          Object {
            "body": Object {
              "statements": Array [
                Object {
                  "left": Object {
                    "name": "ulNameRVA",
                    "type": "identifier",
                  },
                  "operator": "=",
                  "right": Object {
                    "arguments": Array [
                      Object {
                        "left": Object {
                          "name": "NameArrayFOA",
                          "type": "identifier",
                        },
                        "operator": "+",
                        "right": Object {
                          "left": Object {
                            "name": "nIndex",
                            "type": "identifier",
                          },
                          "operator": "*",
                          "right": Object {
                            "operand": Object {
                              "name": "ULONG",
                              "type": "identifier",
                            },
                            "type": "sizeofExpression",
                          },
                          "type": "binaryExpression",
                        },
                        "type": "binaryExpression",
                      },
                    ],
                    "name": Object {
                      "name": "ReadUInt",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  "type": "binaryExpression",
                },
                Object {
                  "left": Object {
                    "name": "ulNameFOA",
                    "type": "identifier",
                  },
                  "operator": "=",
                  "right": Object {
                    "arguments": Array [
                      Object {
                        "name": "ulNameRVA",
                        "type": "identifier",
                      },
                    ],
                    "name": Object {
                      "name": "RVA2FOA",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  "type": "binaryExpression",
                },
                Object {
                  "left": Object {
                    "name": "sExportName",
                    "type": "identifier",
                  },
                  "operator": "=",
                  "right": Object {
                    "arguments": Array [
                      Object {
                        "name": "ulNameFOA",
                        "type": "identifier",
                      },
                    ],
                    "name": Object {
                      "name": "ReadString",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  "type": "binaryExpression",
                },
                Object {
                  "condition": Object {
                    "left": Object {
                      "type": "number",
                      "value": 0,
                    },
                    "operator": "!=",
                    "right": Object {
                      "arguments": Array [
                        Object {
                          "name": "sExportName",
                          "type": "identifier",
                        },
                      ],
                      "name": Object {
                        "name": "Strlen",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    "type": "binaryExpression",
                  },
                  "trueStatement": Object {
                    "statements": Array [
                      Object {
                        "left": Object {
                          "name": "wOrdinal",
                          "type": "identifier",
                        },
                        "operator": "=",
                        "right": Object {
                          "arguments": Array [
                            Object {
                              "left": Object {
                                "name": "OrdinalArrayFOA",
                                "type": "identifier",
                              },
                              "operator": "+",
                              "right": Object {
                                "left": Object {
                                  "name": "nIndex",
                                  "type": "identifier",
                                },
                                "operator": "*",
                                "right": Object {
                                  "operand": Object {
                                    "name": "USHORT",
                                    "type": "identifier",
                                  },
                                  "type": "sizeofExpression",
                                },
                                "type": "binaryExpression",
                              },
                              "type": "binaryExpression",
                            },
                          ],
                          "name": Object {
                            "name": "ReadUShort",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                        "type": "binaryExpression",
                      },
                      Object {
                        "left": Object {
                          "name": "ulFuncRVA",
                          "type": "identifier",
                        },
                        "operator": "=",
                        "right": Object {
                          "arguments": Array [
                            Object {
                              "left": Object {
                                "name": "FuncArrayFOA",
                                "type": "identifier",
                              },
                              "operator": "+",
                              "right": Object {
                                "left": Object {
                                  "name": "wOrdinal",
                                  "type": "identifier",
                                },
                                "operator": "*",
                                "right": Object {
                                  "operand": Object {
                                    "name": "ULONG",
                                    "type": "identifier",
                                  },
                                  "type": "sizeofExpression",
                                },
                                "type": "binaryExpression",
                              },
                              "type": "binaryExpression",
                            },
                          ],
                          "name": Object {
                            "name": "ReadUInt",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                        "type": "binaryExpression",
                      },
                      Object {
                        "condition": Object {
                          "left": Object {
                            "left": Object {
                              "name": "ulFuncRVA",
                              "type": "identifier",
                            },
                            "operator": ">",
                            "right": Object {
                              "expression": Object {
                                "expression": Object {
                                  "expression": Object {
                                    "expression": Object {
                                      "name": "NtHeader",
                                      "type": "identifier",
                                    },
                                    "name": "OptionalHeader",
                                    "type": "propertyAccessExpression",
                                  },
                                  "name": "DataDirArray",
                                  "type": "propertyAccessExpression",
                                },
                                "name": "Export",
                                "type": "propertyAccessExpression",
                              },
                              "name": "VirtualAddress",
                              "type": "propertyAccessExpression",
                            },
                            "type": "binaryExpression",
                          },
                          "operator": "&&",
                          "right": Object {
                            "left": Object {
                              "name": "ulFuncRVA",
                              "type": "identifier",
                            },
                            "operator": "<",
                            "right": Object {
                              "left": Object {
                                "expression": Object {
                                  "expression": Object {
                                    "expression": Object {
                                      "expression": Object {
                                        "name": "NtHeader",
                                        "type": "identifier",
                                      },
                                      "name": "OptionalHeader",
                                      "type": "propertyAccessExpression",
                                    },
                                    "name": "DataDirArray",
                                    "type": "propertyAccessExpression",
                                  },
                                  "name": "Export",
                                  "type": "propertyAccessExpression",
                                },
                                "name": "VirtualAddress",
                                "type": "propertyAccessExpression",
                              },
                              "operator": "+",
                              "right": Object {
                                "expression": Object {
                                  "expression": Object {
                                    "expression": Object {
                                      "expression": Object {
                                        "name": "NtHeader",
                                        "type": "identifier",
                                      },
                                      "name": "OptionalHeader",
                                      "type": "propertyAccessExpression",
                                    },
                                    "name": "DataDirArray",
                                    "type": "propertyAccessExpression",
                                  },
                                  "name": "Export",
                                  "type": "propertyAccessExpression",
                                },
                                "name": "Size",
                                "type": "propertyAccessExpression",
                              },
                              "type": "binaryExpression",
                            },
                            "type": "binaryExpression",
                          },
                          "type": "binaryExpression",
                        },
                        "falseStatement": Object {
                          "statements": Array [
                            Object {
                              "left": Object {
                                "name": "sJmpName",
                                "type": "identifier",
                              },
                              "operator": "=",
                              "right": Object {
                                "string": "",
                                "type": "string",
                              },
                              "type": "binaryExpression",
                            },
                            Object {
                              "arguments": Array [
                                Object {
                                  "name": "ulNameFOA",
                                  "type": "identifier",
                                },
                              ],
                              "name": Object {
                                "name": "FSeek",
                                "type": "identifier",
                              },
                              "type": "functionCallExpression",
                            },
                            Object {
                              "annotations": Array [],
                              "declarations": Array [
                                Object {
                                  "annotations": Array [],
                                  "arguments": Array [
                                    Object {
                                      "name": "sExportName",
                                      "type": "identifier",
                                    },
                                    Object {
                                      "name": "ulFuncRVA",
                                      "type": "identifier",
                                    },
                                    Object {
                                      "name": "sJmpName",
                                      "type": "identifier",
                                    },
                                  ],
                                  "name": "ExportByName",
                                },
                              ],
                              "type": "variableDeclaration",
                              "variableType": Object {
                                "array": false,
                                "name": "IMAGE_EXPORT_BY_NAME",
                              },
                            },
                          ],
                          "type": "statementList",
                        },
                        "trueStatement": Object {
                          "statements": Array [
                            Object {
                              "left": Object {
                                "name": "sJmpName",
                                "type": "identifier",
                              },
                              "operator": "=",
                              "right": Object {
                                "arguments": Array [
                                  Object {
                                    "arguments": Array [
                                      Object {
                                        "name": "ulFuncRVA",
                                        "type": "identifier",
                                      },
                                    ],
                                    "name": Object {
                                      "name": "RVA2FOA",
                                      "type": "identifier",
                                    },
                                    "type": "functionCallExpression",
                                  },
                                ],
                                "name": Object {
                                  "name": "ReadString",
                                  "type": "identifier",
                                },
                                "type": "functionCallExpression",
                              },
                              "type": "binaryExpression",
                            },
                            Object {
                              "arguments": Array [
                                Object {
                                  "name": "ulNameFOA",
                                  "type": "identifier",
                                },
                              ],
                              "name": Object {
                                "name": "FSeek",
                                "type": "identifier",
                              },
                              "type": "functionCallExpression",
                            },
                            Object {
                              "annotations": Array [],
                              "declarations": Array [
                                Object {
                                  "annotations": Array [],
                                  "arguments": Array [
                                    Object {
                                      "name": "sExportName",
                                      "type": "identifier",
                                    },
                                    Object {
                                      "name": "ulFuncRVA",
                                      "type": "identifier",
                                    },
                                    Object {
                                      "name": "sJmpName",
                                      "type": "identifier",
                                    },
                                  ],
                                  "name": "ExportByName",
                                },
                              ],
                              "type": "variableDeclaration",
                              "variableType": Object {
                                "array": false,
                                "name": "IMAGE_EXPORT_BY_NAME",
                              },
                            },
                          ],
                          "type": "statementList",
                        },
                        "type": "ifStatement",
                      },
                    ],
                    "type": "statementList",
                  },
                  "type": "ifStatement",
                },
                Object {
                  "left": Object {
                    "name": "ulCurPos",
                    "type": "identifier",
                  },
                  "operator": "=",
                  "right": Object {
                    "arguments": Array [],
                    "name": Object {
                      "name": "FTell",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  "type": "binaryExpression",
                },
                Object {
                  "condition": Object {
                    "left": Object {
                      "name": "ulEndPos",
                      "type": "identifier",
                    },
                    "operator": "<",
                    "right": Object {
                      "name": "ulCurPos",
                      "type": "identifier",
                    },
                    "type": "binaryExpression",
                  },
                  "trueStatement": Object {
                    "statements": Array [
                      Object {
                        "left": Object {
                          "name": "ulEndPos",
                          "type": "identifier",
                        },
                        "operator": "=",
                        "right": Object {
                          "name": "ulCurPos",
                          "type": "identifier",
                        },
                        "type": "binaryExpression",
                      },
                    ],
                    "type": "statementList",
                  },
                  "type": "ifStatement",
                },
              ],
              "type": "statementList",
            },
            "condition": Object {
              "left": Object {
                "name": "nIndex",
                "type": "identifier",
              },
              "operator": "<",
              "right": Object {
                "expression": Object {
                  "name": "ExportDir",
                  "type": "identifier",
                },
                "name": "NumberOfNames",
                "type": "propertyAccessExpression",
              },
              "type": "binaryExpression",
            },
            "increment": Object {
              "expressions": Array [
                Object {
                  "expression": Object {
                    "name": "nIndex",
                    "type": "identifier",
                  },
                  "operator": "++",
                  "type": "postfixExpression",
                },
              ],
              "type": "commaExpression",
            },
            "initialization": Object {
              "expressions": Array [
                Object {
                  "left": Object {
                    "name": "nIndex",
                    "type": "identifier",
                  },
                  "operator": "=",
                  "right": Object {
                    "type": "number",
                    "value": 0,
                  },
                  "type": "binaryExpression",
                },
              ],
              "type": "commaExpression",
            },
            "type": "forStatement",
          },
          Object {
            "arguments": Array [
              Object {
                "name": "ulEndPos",
                "type": "identifier",
              },
            ],
            "name": Object {
              "name": "FSeek",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "IMAGE_EXPORT_DIRECTORY",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "Length",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "Length",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "arraySelector": Object {
                        "left": Object {
                          "name": "Length",
                          "type": "identifier",
                        },
                        "operator": "*",
                        "right": Object {
                          "type": "number",
                          "value": 2,
                        },
                        "type": "binaryExpression",
                      },
                      "name": "String",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "BYTE",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "pascal_wstring_t",
    "type": "structDeclaration",
  },
  Object {
    "alias": "RESOURCE_DIRECTORY_STRING",
    "annotations": Array [],
    "name": Object {
      "array": false,
      "name": "pascal_wstring_t",
    },
    "type": "typeAlias",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "optimize",
                    "value": Object {
                      "type": "boolean",
                      "value": false,
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "name": "CommentResourceDirectoryString",
                      "type": "identifier",
                    },
                  },
                ],
                "arraySelector": Object {
                  "type": "number",
                  "value": 16,
                },
                "name": "Strings",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "RESOURCE_DIRECTORY_STRING",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "RESOURCE_DIRECTORY_STRINGS",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "originalPos",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "DataRVA",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "DataSize",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "CodePage",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "Reserved",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "left": Object {
              "name": "originalPos",
              "type": "identifier",
            },
            "operator": "=",
            "right": Object {
              "arguments": Array [],
              "name": Object {
                "name": "FTell",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
            "type": "binaryExpression",
          },
          Object {
            "arguments": Array [
              Object {
                "arguments": Array [
                  Object {
                    "name": "DataRVA",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "RVA2FOA",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
            ],
            "name": Object {
              "name": "FSeek",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          Object {
            "condition": Object {
              "expression": Object {
                "arguments": Array [
                  Object {
                    "name": "this",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "IsResourceDirectoryString",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "operator": "!",
              "type": "unaryExpression",
            },
            "falseStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "name": "ResourceDirectoryStrings",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "RESOURCE_DIRECTORY_STRINGS",
                  },
                },
              ],
              "type": "statementList",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "arraySelector": Object {
                        "name": "DataSize",
                        "type": "identifier",
                      },
                      "name": "Data",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "UCHAR",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
          Object {
            "arguments": Array [
              Object {
                "name": "originalPos",
                "type": "identifier",
              },
            ],
            "name": Object {
              "name": "FSeek",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "RESOURCE_DATA_ENTRY",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "type": "number",
                  "value": 0,
                },
                "name": "IsNameEntry",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "originalPos",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "int",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "Level",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "left": Object {
              "name": "Level",
              "type": "identifier",
            },
            "operator": "=",
            "right": Object {
              "name": "level",
              "type": "identifier",
            },
            "type": "binaryExpression",
          },
          Object {
            "left": Object {
              "name": "IsNameEntry",
              "type": "identifier",
            },
            "operator": "=",
            "right": Object {
              "name": "isNameEntry",
              "type": "identifier",
            },
            "type": "binaryExpression",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "IsNameEntry",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "falseStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "name": "CommentIntegerID",
                            "type": "identifier",
                          },
                        },
                        Object {
                          "key": "format",
                          "value": Object {
                            "name": "decimal",
                            "type": "identifier",
                          },
                        },
                      ],
                      "name": "IntegerID",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "DWORD",
                  },
                },
              ],
              "type": "statementList",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "comment",
                          "value": Object {
                            "name": "CommentResourceNameOffset",
                            "type": "identifier",
                          },
                        },
                        Object {
                          "key": "format",
                          "value": Object {
                            "name": "hex",
                            "type": "identifier",
                          },
                        },
                      ],
                      "name": "NameOffset",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "DWORD",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "arguments": Array [],
                  "name": Object {
                    "name": "ReadInt",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "name": "NextDWORD",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "NextDWORD",
                "type": "identifier",
              },
              "operator": "&",
              "right": Object {
                "type": "number",
                "value": 2147483648,
              },
              "type": "binaryExpression",
            },
            "falseStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "format",
                          "value": Object {
                            "name": "hex",
                            "type": "identifier",
                          },
                        },
                      ],
                      "name": "DataEntryOffset",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "DWORD",
                  },
                },
                Object {
                  "left": Object {
                    "name": "originalPos",
                    "type": "identifier",
                  },
                  "operator": "=",
                  "right": Object {
                    "arguments": Array [],
                    "name": Object {
                      "name": "FTell",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  "type": "binaryExpression",
                },
                Object {
                  "arguments": Array [
                    Object {
                      "arguments": Array [
                        Object {
                          "left": Object {
                            "expression": Object {
                              "expression": Object {
                                "expression": Object {
                                  "expression": Object {
                                    "name": "NtHeader",
                                    "type": "identifier",
                                  },
                                  "name": "OptionalHeader",
                                  "type": "propertyAccessExpression",
                                },
                                "name": "DataDirArray",
                                "type": "propertyAccessExpression",
                              },
                              "name": "Resource",
                              "type": "propertyAccessExpression",
                            },
                            "name": "VirtualAddress",
                            "type": "propertyAccessExpression",
                          },
                          "operator": "+",
                          "right": Object {
                            "name": "DataEntryOffset",
                            "type": "identifier",
                          },
                          "type": "binaryExpression",
                        },
                      ],
                      "name": Object {
                        "name": "RVA2FOA",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "name": "ResourceDataEntry",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "RESOURCE_DATA_ENTRY",
                  },
                },
                Object {
                  "arguments": Array [
                    Object {
                      "name": "originalPos",
                      "type": "identifier",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
              ],
              "type": "statementList",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "format",
                          "value": Object {
                            "name": "hex",
                            "type": "identifier",
                          },
                        },
                      ],
                      "name": "SubdirectoryOffset",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "DWORD",
                  },
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "name": "dwMaskedOffset",
                    },
                  ],
                  "local": true,
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "DWORD",
                  },
                },
                Object {
                  "left": Object {
                    "name": "dwMaskedOffset",
                    "type": "identifier",
                  },
                  "operator": "=",
                  "right": Object {
                    "left": Object {
                      "name": "SubdirectoryOffset",
                      "type": "identifier",
                    },
                    "operator": "&",
                    "right": Object {
                      "type": "number",
                      "value": 2147483647,
                    },
                    "type": "binaryExpression",
                  },
                  "type": "binaryExpression",
                },
                Object {
                  "left": Object {
                    "name": "originalPos",
                    "type": "identifier",
                  },
                  "operator": "=",
                  "right": Object {
                    "arguments": Array [],
                    "name": Object {
                      "name": "FTell",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  "type": "binaryExpression",
                },
                Object {
                  "arguments": Array [
                    Object {
                      "arguments": Array [
                        Object {
                          "left": Object {
                            "expression": Object {
                              "expression": Object {
                                "expression": Object {
                                  "expression": Object {
                                    "name": "NtHeader",
                                    "type": "identifier",
                                  },
                                  "name": "OptionalHeader",
                                  "type": "propertyAccessExpression",
                                },
                                "name": "DataDirArray",
                                "type": "propertyAccessExpression",
                              },
                              "name": "Resource",
                              "type": "propertyAccessExpression",
                            },
                            "name": "VirtualAddress",
                            "type": "propertyAccessExpression",
                          },
                          "operator": "+",
                          "right": Object {
                            "name": "dwMaskedOffset",
                            "type": "identifier",
                          },
                          "type": "binaryExpression",
                        },
                      ],
                      "name": Object {
                        "name": "RVA2FOA",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "arguments": Array [
                        Object {
                          "left": Object {
                            "name": "Level",
                            "type": "identifier",
                          },
                          "operator": "+",
                          "right": Object {
                            "type": "number",
                            "value": 1,
                          },
                          "type": "binaryExpression",
                        },
                      ],
                      "name": "RsourceDirectoryTable",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "RESOURCE_DIRECTORY_TABLE",
                  },
                },
                Object {
                  "arguments": Array [
                    Object {
                      "name": "originalPos",
                      "type": "identifier",
                    },
                  ],
                  "name": Object {
                    "name": "FSeek",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
      "parameters": Array [
        Object {
          "name": "isNameEntry",
          "reference": false,
          "type": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "name": "level",
          "reference": false,
          "type": Object {
            "array": false,
            "name": "DWORD",
          },
        },
      ],
    },
    "name": "RESOURCE_DIRECTORY_ENTRY",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "comment",
        "value": Object {
          "name": "CommentResourceDirectoryTable",
          "type": "identifier",
        },
      },
      Object {
        "key": "optimize",
        "value": Object {
          "type": "boolean",
          "value": false,
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "Level",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "comment",
                    "value": Object {
                      "string": "Reserved, currently 0",
                      "type": "string",
                    },
                  },
                ],
                "name": "Characteristics",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "TimeDateStamp",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "time_t",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "decimal",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "MajorVersion",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "decimal",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "MinorVersion",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "decimal",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "NumberOfNameEntries",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "decimal",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "NumberOfIDEntries",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
          Object {
            "left": Object {
              "name": "Level",
              "type": "identifier",
            },
            "operator": "=",
            "right": Object {
              "name": "level",
              "type": "identifier",
            },
            "type": "binaryExpression",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "NumberOfNameEntries",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "optimize",
                          "value": Object {
                            "type": "boolean",
                            "value": false,
                          },
                        },
                      ],
                      "arguments": Array [
                        Object {
                          "type": "number",
                          "value": 1,
                        },
                        Object {
                          "name": "Level",
                          "type": "identifier",
                        },
                      ],
                      "arraySelector": Object {
                        "name": "NumberOfNameEntries",
                        "type": "identifier",
                      },
                      "name": "NameEntries",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "RESOURCE_DIRECTORY_ENTRY",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
          Object {
            "condition": Object {
              "left": Object {
                "name": "NumberOfIDEntries",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [
                        Object {
                          "key": "optimize",
                          "value": Object {
                            "type": "boolean",
                            "value": false,
                          },
                        },
                      ],
                      "arguments": Array [
                        Object {
                          "type": "number",
                          "value": 0,
                        },
                        Object {
                          "name": "Level",
                          "type": "identifier",
                        },
                      ],
                      "arraySelector": Object {
                        "name": "NumberOfIDEntries",
                        "type": "identifier",
                      },
                      "name": "IDEntries",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "RESOURCE_DIRECTORY_ENTRY",
                  },
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
        ],
        "type": "statementList",
      },
      "parameters": Array [
        Object {
          "name": "level",
          "reference": false,
          "type": Object {
            "array": false,
            "name": "DWORD",
          },
        },
      ],
    },
    "name": "RESOURCE_DIRECTORY_TABLE",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "comment",
        "value": Object {
          "name": "CommentImageBaseRelocation",
          "type": "identifier",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "name": "CommentRVA2FOA",
                      "type": "identifier",
                    },
                  },
                ],
                "name": "VirtualAddress",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "name": "SizeOfBlock",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "DWORD",
            },
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "type": "number",
                  "value": 0,
                },
                "name": "ulBlockNum",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "left": Object {
              "name": "ulBlockNum",
              "type": "identifier",
            },
            "operator": "=",
            "right": Object {
              "left": Object {
                "left": Object {
                  "name": "SizeOfBlock",
                  "type": "identifier",
                },
                "operator": "-",
                "right": Object {
                  "type": "number",
                  "value": 8,
                },
                "type": "binaryExpression",
              },
              "operator": "/",
              "right": Object {
                "type": "number",
                "value": 2,
              },
              "type": "binaryExpression",
            },
            "type": "binaryExpression",
          },
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [
                  Object {
                    "key": "format",
                    "value": Object {
                      "name": "hex",
                      "type": "identifier",
                    },
                  },
                  Object {
                    "key": "comment",
                    "value": Object {
                      "name": "CommentBaseRelocBlock",
                      "type": "identifier",
                    },
                  },
                ],
                "arraySelector": Object {
                  "name": "ulBlockNum",
                  "type": "identifier",
                },
                "name": "Block",
              },
            ],
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "WORD",
            },
          },
        ],
        "type": "statementList",
      },
    },
    "name": "IMAGE_BASE_RELOCATION",
    "type": "structDeclaration",
  },
  Object {
    "annotations": Array [
      Object {
        "key": "comment",
        "value": Object {
          "name": "CommentBaseRelocationTable",
          "type": "identifier",
        },
      },
    ],
    "declaration": Object {
      "body": Object {
        "statements": Array [
          Object {
            "annotations": Array [],
            "declarations": Array [
              Object {
                "annotations": Array [],
                "initializer": Object {
                  "type": "number",
                  "value": 0,
                },
                "name": "ulRelocNum",
              },
            ],
            "local": true,
            "type": "variableDeclaration",
            "variableType": Object {
              "array": false,
              "name": "ULONG",
            },
          },
          Object {
            "body": Object {
              "statements": Array [
                Object {
                  "condition": Object {
                    "left": Object {
                      "type": "number",
                      "value": 0,
                    },
                    "operator": "==",
                    "right": Object {
                      "arguments": Array [
                        Object {
                          "arguments": Array [],
                          "name": Object {
                            "name": "FTell",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                      ],
                      "name": Object {
                        "name": "ReadUInt",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    "type": "binaryExpression",
                  },
                  "trueStatement": Object {
                    "statements": Array [
                      Object {
                        "type": "breakStatement",
                      },
                    ],
                    "type": "statementList",
                  },
                  "type": "ifStatement",
                },
                Object {
                  "annotations": Array [],
                  "declarations": Array [
                    Object {
                      "annotations": Array [],
                      "name": "BaseReloc",
                    },
                  ],
                  "type": "variableDeclaration",
                  "variableType": Object {
                    "array": false,
                    "name": "IMAGE_BASE_RELOCATION",
                  },
                },
                Object {
                  "expression": Object {
                    "name": "ulRelocNum",
                    "type": "identifier",
                  },
                  "operator": "++",
                  "type": "postfixExpression",
                },
              ],
              "type": "statementList",
            },
            "condition": Object {
              "type": "number",
              "value": 1,
            },
            "type": "whileStatement",
          },
        ],
        "type": "statementList",
      },
    },
    "name": "BASE_RELOCATION_TABLE",
    "type": "structDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "condition": Object {
            "left": Object {
              "left": Object {
                "expression": Object {
                  "expression": Object {
                    "expression": Object {
                      "expression": Object {
                        "name": "NtHeader",
                        "type": "identifier",
                      },
                      "name": "OptionalHeader",
                      "type": "propertyAccessExpression",
                    },
                    "name": "DataDirArray",
                    "type": "propertyAccessExpression",
                  },
                  "name": "Export",
                  "type": "propertyAccessExpression",
                },
                "name": "VirtualAddress",
                "type": "propertyAccessExpression",
              },
              "operator": "!=",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "operator": "&&",
            "right": Object {
              "left": Object {
                "expression": Object {
                  "expression": Object {
                    "expression": Object {
                      "expression": Object {
                        "name": "NtHeader",
                        "type": "identifier",
                      },
                      "name": "OptionalHeader",
                      "type": "propertyAccessExpression",
                    },
                    "name": "DataDirArray",
                    "type": "propertyAccessExpression",
                  },
                  "name": "Export",
                  "type": "propertyAccessExpression",
                },
                "name": "Size",
                "type": "propertyAccessExpression",
              },
              "operator": "!=",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "annotations": Array [],
                "declarations": Array [
                  Object {
                    "annotations": Array [],
                    "initializer": Object {
                      "arguments": Array [
                        Object {
                          "expression": Object {
                            "expression": Object {
                              "expression": Object {
                                "expression": Object {
                                  "name": "NtHeader",
                                  "type": "identifier",
                                },
                                "name": "OptionalHeader",
                                "type": "propertyAccessExpression",
                              },
                              "name": "DataDirArray",
                              "type": "propertyAccessExpression",
                            },
                            "name": "Export",
                            "type": "propertyAccessExpression",
                          },
                          "name": "VirtualAddress",
                          "type": "propertyAccessExpression",
                        },
                      ],
                      "name": Object {
                        "name": "RVA2FOA",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    "name": "ulExportFOA",
                  },
                ],
                "local": true,
                "type": "variableDeclaration",
                "variableType": Object {
                  "array": false,
                  "name": "ULONG",
                },
              },
              Object {
                "arguments": Array [
                  Object {
                    "name": "ulExportFOA",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "FSeek",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              Object {
                "annotations": Array [],
                "declarations": Array [
                  Object {
                    "annotations": Array [],
                    "name": "ExportDir",
                  },
                ],
                "type": "variableDeclaration",
                "variableType": Object {
                  "array": false,
                  "name": "IMAGE_EXPORT_DIRECTORY",
                },
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ParseEAT",
    "parameters": Array [],
    "returnType": Object {
      "name": "void",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "condition": Object {
            "left": Object {
              "left": Object {
                "expression": Object {
                  "expression": Object {
                    "expression": Object {
                      "expression": Object {
                        "name": "NtHeader",
                        "type": "identifier",
                      },
                      "name": "OptionalHeader",
                      "type": "propertyAccessExpression",
                    },
                    "name": "DataDirArray",
                    "type": "propertyAccessExpression",
                  },
                  "name": "Import",
                  "type": "propertyAccessExpression",
                },
                "name": "VirtualAddress",
                "type": "propertyAccessExpression",
              },
              "operator": "!=",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "operator": "&&",
            "right": Object {
              "left": Object {
                "expression": Object {
                  "expression": Object {
                    "expression": Object {
                      "expression": Object {
                        "name": "NtHeader",
                        "type": "identifier",
                      },
                      "name": "OptionalHeader",
                      "type": "propertyAccessExpression",
                    },
                    "name": "DataDirArray",
                    "type": "propertyAccessExpression",
                  },
                  "name": "Import",
                  "type": "propertyAccessExpression",
                },
                "name": "Size",
                "type": "propertyAccessExpression",
              },
              "operator": "!=",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "annotations": Array [],
                "declarations": Array [
                  Object {
                    "annotations": Array [],
                    "initializer": Object {
                      "arguments": Array [
                        Object {
                          "expression": Object {
                            "expression": Object {
                              "expression": Object {
                                "expression": Object {
                                  "name": "NtHeader",
                                  "type": "identifier",
                                },
                                "name": "OptionalHeader",
                                "type": "propertyAccessExpression",
                              },
                              "name": "DataDirArray",
                              "type": "propertyAccessExpression",
                            },
                            "name": "Import",
                            "type": "propertyAccessExpression",
                          },
                          "name": "VirtualAddress",
                          "type": "propertyAccessExpression",
                        },
                      ],
                      "name": Object {
                        "name": "RVA2FOA",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    "name": "ulImportFOA",
                  },
                ],
                "local": true,
                "type": "variableDeclaration",
                "variableType": Object {
                  "array": false,
                  "name": "ULONG",
                },
              },
              Object {
                "annotations": Array [],
                "declarations": Array [
                  Object {
                    "annotations": Array [],
                    "initializer": Object {
                      "type": "number",
                      "value": 0,
                    },
                    "name": "ulOriginalFirstThunk",
                  },
                ],
                "local": true,
                "type": "variableDeclaration",
                "variableType": Object {
                  "array": false,
                  "name": "ULONG",
                },
              },
              Object {
                "annotations": Array [],
                "declarations": Array [
                  Object {
                    "annotations": Array [],
                    "initializer": Object {
                      "type": "number",
                      "value": 0,
                    },
                    "name": "ulOriginalFirstThunkFOA",
                  },
                ],
                "local": true,
                "type": "variableDeclaration",
                "variableType": Object {
                  "array": false,
                  "name": "ULONG",
                },
              },
              Object {
                "annotations": Array [],
                "declarations": Array [
                  Object {
                    "annotations": Array [],
                    "initializer": Object {
                      "type": "number",
                      "value": 0,
                    },
                    "name": "nImportIndex",
                  },
                ],
                "local": true,
                "type": "variableDeclaration",
                "variableType": Object {
                  "array": false,
                  "name": "int",
                },
              },
              Object {
                "arguments": Array [
                  Object {
                    "name": "ulImportFOA",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "FSeek",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              Object {
                "body": Object {
                  "statements": Array [
                    Object {
                      "left": Object {
                        "name": "ulOriginalFirstThunk",
                        "type": "identifier",
                      },
                      "operator": "=",
                      "right": Object {
                        "arguments": Array [
                          Object {
                            "left": Object {
                              "name": "ulImportFOA",
                              "type": "identifier",
                            },
                            "operator": "+",
                            "right": Object {
                              "left": Object {
                                "type": "number",
                                "value": 20,
                              },
                              "operator": "*",
                              "right": Object {
                                "name": "nImportIndex",
                                "type": "identifier",
                              },
                              "type": "binaryExpression",
                            },
                            "type": "binaryExpression",
                          },
                        ],
                        "name": Object {
                          "name": "ReadUInt",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      "type": "binaryExpression",
                    },
                    Object {
                      "condition": Object {
                        "left": Object {
                          "type": "number",
                          "value": 0,
                        },
                        "operator": "==",
                        "right": Object {
                          "name": "ulOriginalFirstThunk",
                          "type": "identifier",
                        },
                        "type": "binaryExpression",
                      },
                      "trueStatement": Object {
                        "statements": Array [
                          Object {
                            "type": "breakStatement",
                          },
                        ],
                        "type": "statementList",
                      },
                      "type": "ifStatement",
                    },
                    Object {
                      "arguments": Array [
                        Object {
                          "left": Object {
                            "name": "ulImportFOA",
                            "type": "identifier",
                          },
                          "operator": "+",
                          "right": Object {
                            "left": Object {
                              "type": "number",
                              "value": 20,
                            },
                            "operator": "*",
                            "right": Object {
                              "name": "nImportIndex",
                              "type": "identifier",
                            },
                            "type": "binaryExpression",
                          },
                          "type": "binaryExpression",
                        },
                      ],
                      "name": Object {
                        "name": "FSeek",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [],
                          "name": "ImportDescriptor",
                        },
                      ],
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "IMAGE_IMPORT_DESCRIPTOR",
                      },
                    },
                    Object {
                      "expression": Object {
                        "name": "nImportIndex",
                        "type": "identifier",
                      },
                      "operator": "++",
                      "type": "postfixExpression",
                    },
                  ],
                  "type": "statementList",
                },
                "condition": Object {
                  "type": "number",
                  "value": 1,
                },
                "type": "whileStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ParseIAT",
    "parameters": Array [],
    "returnType": Object {
      "name": "void",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "condition": Object {
            "left": Object {
              "left": Object {
                "expression": Object {
                  "expression": Object {
                    "expression": Object {
                      "expression": Object {
                        "name": "NtHeader",
                        "type": "identifier",
                      },
                      "name": "OptionalHeader",
                      "type": "propertyAccessExpression",
                    },
                    "name": "DataDirArray",
                    "type": "propertyAccessExpression",
                  },
                  "name": "Resource",
                  "type": "propertyAccessExpression",
                },
                "name": "VirtualAddress",
                "type": "propertyAccessExpression",
              },
              "operator": "==",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "operator": "||",
            "right": Object {
              "left": Object {
                "expression": Object {
                  "expression": Object {
                    "expression": Object {
                      "expression": Object {
                        "name": "NtHeader",
                        "type": "identifier",
                      },
                      "name": "OptionalHeader",
                      "type": "propertyAccessExpression",
                    },
                    "name": "DataDirArray",
                    "type": "propertyAccessExpression",
                  },
                  "name": "Resource",
                  "type": "propertyAccessExpression",
                },
                "name": "Size",
                "type": "propertyAccessExpression",
              },
              "operator": "==",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "arguments": Array [
            Object {
              "arguments": Array [
                Object {
                  "expression": Object {
                    "expression": Object {
                      "expression": Object {
                        "expression": Object {
                          "name": "NtHeader",
                          "type": "identifier",
                        },
                        "name": "OptionalHeader",
                        "type": "propertyAccessExpression",
                      },
                      "name": "DataDirArray",
                      "type": "propertyAccessExpression",
                    },
                    "name": "Resource",
                    "type": "propertyAccessExpression",
                  },
                  "name": "VirtualAddress",
                  "type": "propertyAccessExpression",
                },
              ],
              "name": Object {
                "name": "RVA2FOA",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
          ],
          "name": Object {
            "name": "FSeek",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "arguments": Array [
                Object {
                  "type": "number",
                  "value": 1,
                },
              ],
              "name": "ResourceDirectoryTable",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "RESOURCE_DIRECTORY_TABLE",
          },
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ParseResource",
    "parameters": Array [],
    "returnType": Object {
      "name": "void",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "condition": Object {
            "left": Object {
              "left": Object {
                "expression": Object {
                  "expression": Object {
                    "expression": Object {
                      "expression": Object {
                        "name": "NtHeader",
                        "type": "identifier",
                      },
                      "name": "OptionalHeader",
                      "type": "propertyAccessExpression",
                    },
                    "name": "DataDirArray",
                    "type": "propertyAccessExpression",
                  },
                  "name": "Exception",
                  "type": "propertyAccessExpression",
                },
                "name": "VirtualAddress",
                "type": "propertyAccessExpression",
              },
              "operator": "==",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "operator": "||",
            "right": Object {
              "left": Object {
                "expression": Object {
                  "expression": Object {
                    "expression": Object {
                      "expression": Object {
                        "name": "NtHeader",
                        "type": "identifier",
                      },
                      "name": "OptionalHeader",
                      "type": "propertyAccessExpression",
                    },
                    "name": "DataDirArray",
                    "type": "propertyAccessExpression",
                  },
                  "name": "Exception",
                  "type": "propertyAccessExpression",
                },
                "name": "Size",
                "type": "propertyAccessExpression",
              },
              "operator": "==",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ParseException",
    "parameters": Array [],
    "returnType": Object {
      "name": "void",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "condition": Object {
            "left": Object {
              "left": Object {
                "expression": Object {
                  "expression": Object {
                    "expression": Object {
                      "expression": Object {
                        "name": "NtHeader",
                        "type": "identifier",
                      },
                      "name": "OptionalHeader",
                      "type": "propertyAccessExpression",
                    },
                    "name": "DataDirArray",
                    "type": "propertyAccessExpression",
                  },
                  "name": "Security",
                  "type": "propertyAccessExpression",
                },
                "name": "VirtualAddress",
                "type": "propertyAccessExpression",
              },
              "operator": "==",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "operator": "||",
            "right": Object {
              "left": Object {
                "expression": Object {
                  "expression": Object {
                    "expression": Object {
                      "expression": Object {
                        "name": "NtHeader",
                        "type": "identifier",
                      },
                      "name": "OptionalHeader",
                      "type": "propertyAccessExpression",
                    },
                    "name": "DataDirArray",
                    "type": "propertyAccessExpression",
                  },
                  "name": "Security",
                  "type": "propertyAccessExpression",
                },
                "name": "Size",
                "type": "propertyAccessExpression",
              },
              "operator": "==",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ParseSecurity",
    "parameters": Array [],
    "returnType": Object {
      "name": "void",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "condition": Object {
            "left": Object {
              "left": Object {
                "expression": Object {
                  "expression": Object {
                    "expression": Object {
                      "expression": Object {
                        "name": "NtHeader",
                        "type": "identifier",
                      },
                      "name": "OptionalHeader",
                      "type": "propertyAccessExpression",
                    },
                    "name": "DataDirArray",
                    "type": "propertyAccessExpression",
                  },
                  "name": "BaseRelocationTable",
                  "type": "propertyAccessExpression",
                },
                "name": "VirtualAddress",
                "type": "propertyAccessExpression",
              },
              "operator": "==",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "operator": "||",
            "right": Object {
              "left": Object {
                "expression": Object {
                  "expression": Object {
                    "expression": Object {
                      "expression": Object {
                        "name": "NtHeader",
                        "type": "identifier",
                      },
                      "name": "OptionalHeader",
                      "type": "propertyAccessExpression",
                    },
                    "name": "DataDirArray",
                    "type": "propertyAccessExpression",
                  },
                  "name": "BaseRelocationTable",
                  "type": "propertyAccessExpression",
                },
                "name": "Size",
                "type": "propertyAccessExpression",
              },
              "operator": "==",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "arguments": Array [
            Object {
              "arguments": Array [
                Object {
                  "expression": Object {
                    "expression": Object {
                      "expression": Object {
                        "expression": Object {
                          "name": "NtHeader",
                          "type": "identifier",
                        },
                        "name": "OptionalHeader",
                        "type": "propertyAccessExpression",
                      },
                      "name": "DataDirArray",
                      "type": "propertyAccessExpression",
                    },
                    "name": "BaseRelocationTable",
                    "type": "propertyAccessExpression",
                  },
                  "name": "VirtualAddress",
                  "type": "propertyAccessExpression",
                },
              ],
              "name": Object {
                "name": "RVA2FOA",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
          ],
          "name": Object {
            "name": "FSeek",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "name": "RelocTable",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "BASE_RELOCATION_TABLE",
          },
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ParseBaseReloc",
    "parameters": Array [],
    "returnType": Object {
      "name": "void",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "condition": Object {
            "left": Object {
              "left": Object {
                "expression": Object {
                  "expression": Object {
                    "expression": Object {
                      "expression": Object {
                        "name": "NtHeader",
                        "type": "identifier",
                      },
                      "name": "OptionalHeader",
                      "type": "propertyAccessExpression",
                    },
                    "name": "DataDirArray",
                    "type": "propertyAccessExpression",
                  },
                  "name": "DebugDirectory",
                  "type": "propertyAccessExpression",
                },
                "name": "VirtualAddress",
                "type": "propertyAccessExpression",
              },
              "operator": "==",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "operator": "||",
            "right": Object {
              "left": Object {
                "expression": Object {
                  "expression": Object {
                    "expression": Object {
                      "expression": Object {
                        "name": "NtHeader",
                        "type": "identifier",
                      },
                      "name": "OptionalHeader",
                      "type": "propertyAccessExpression",
                    },
                    "name": "DataDirArray",
                    "type": "propertyAccessExpression",
                  },
                  "name": "DebugDirectory",
                  "type": "propertyAccessExpression",
                },
                "name": "Size",
                "type": "propertyAccessExpression",
              },
              "operator": "==",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ParseDebug",
    "parameters": Array [],
    "returnType": Object {
      "name": "void",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "condition": Object {
            "left": Object {
              "left": Object {
                "expression": Object {
                  "expression": Object {
                    "expression": Object {
                      "expression": Object {
                        "name": "NtHeader",
                        "type": "identifier",
                      },
                      "name": "OptionalHeader",
                      "type": "propertyAccessExpression",
                    },
                    "name": "DataDirArray",
                    "type": "propertyAccessExpression",
                  },
                  "name": "TLSDirectory",
                  "type": "propertyAccessExpression",
                },
                "name": "VirtualAddress",
                "type": "propertyAccessExpression",
              },
              "operator": "==",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "operator": "||",
            "right": Object {
              "left": Object {
                "expression": Object {
                  "expression": Object {
                    "expression": Object {
                      "expression": Object {
                        "name": "NtHeader",
                        "type": "identifier",
                      },
                      "name": "OptionalHeader",
                      "type": "propertyAccessExpression",
                    },
                    "name": "DataDirArray",
                    "type": "propertyAccessExpression",
                  },
                  "name": "TLSDirectory",
                  "type": "propertyAccessExpression",
                },
                "name": "Size",
                "type": "propertyAccessExpression",
              },
              "operator": "==",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ParseTLS",
    "parameters": Array [],
    "returnType": Object {
      "name": "void",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "condition": Object {
            "left": Object {
              "left": Object {
                "expression": Object {
                  "expression": Object {
                    "expression": Object {
                      "expression": Object {
                        "name": "NtHeader",
                        "type": "identifier",
                      },
                      "name": "OptionalHeader",
                      "type": "propertyAccessExpression",
                    },
                    "name": "DataDirArray",
                    "type": "propertyAccessExpression",
                  },
                  "name": "BoundImportDirectory",
                  "type": "propertyAccessExpression",
                },
                "name": "VirtualAddress",
                "type": "propertyAccessExpression",
              },
              "operator": "==",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "operator": "||",
            "right": Object {
              "left": Object {
                "expression": Object {
                  "expression": Object {
                    "expression": Object {
                      "expression": Object {
                        "name": "NtHeader",
                        "type": "identifier",
                      },
                      "name": "OptionalHeader",
                      "type": "propertyAccessExpression",
                    },
                    "name": "DataDirArray",
                    "type": "propertyAccessExpression",
                  },
                  "name": "BoundImportDirectory",
                  "type": "propertyAccessExpression",
                },
                "name": "Size",
                "type": "propertyAccessExpression",
              },
              "operator": "==",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ParseBoundImport",
    "parameters": Array [],
    "returnType": Object {
      "name": "void",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "condition": Object {
            "left": Object {
              "left": Object {
                "expression": Object {
                  "expression": Object {
                    "expression": Object {
                      "expression": Object {
                        "name": "NtHeader",
                        "type": "identifier",
                      },
                      "name": "OptionalHeader",
                      "type": "propertyAccessExpression",
                    },
                    "name": "DataDirArray",
                    "type": "propertyAccessExpression",
                  },
                  "name": "DelayLoadImportDescriptors",
                  "type": "propertyAccessExpression",
                },
                "name": "VirtualAddress",
                "type": "propertyAccessExpression",
              },
              "operator": "==",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "operator": "||",
            "right": Object {
              "left": Object {
                "expression": Object {
                  "expression": Object {
                    "expression": Object {
                      "expression": Object {
                        "name": "NtHeader",
                        "type": "identifier",
                      },
                      "name": "OptionalHeader",
                      "type": "propertyAccessExpression",
                    },
                    "name": "DataDirArray",
                    "type": "propertyAccessExpression",
                  },
                  "name": "DelayLoadImportDescriptors",
                  "type": "propertyAccessExpression",
                },
                "name": "Size",
                "type": "propertyAccessExpression",
              },
              "operator": "==",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ParseDelayImport",
    "parameters": Array [],
    "returnType": Object {
      "name": "void",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 0,
              },
              "name": "i",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "body": Object {
            "statements": Array [
              Object {
                "condition": Object {
                  "left": Object {
                    "left": Object {
                      "name": "ulRVA",
                      "type": "identifier",
                    },
                    "operator": ">=",
                    "right": Object {
                      "expression": Object {
                        "expression": Object {
                          "name": "SectionHeaders",
                          "type": "identifier",
                        },
                        "index": Object {
                          "name": "i",
                          "type": "identifier",
                        },
                        "type": "arrayIndexExpression",
                      },
                      "name": "VirtualAddress",
                      "type": "propertyAccessExpression",
                    },
                    "type": "binaryExpression",
                  },
                  "operator": "&&",
                  "right": Object {
                    "left": Object {
                      "name": "ulRVA",
                      "type": "identifier",
                    },
                    "operator": "<=",
                    "right": Object {
                      "left": Object {
                        "expression": Object {
                          "expression": Object {
                            "name": "SectionHeaders",
                            "type": "identifier",
                          },
                          "index": Object {
                            "name": "i",
                            "type": "identifier",
                          },
                          "type": "arrayIndexExpression",
                        },
                        "name": "VirtualAddress",
                        "type": "propertyAccessExpression",
                      },
                      "operator": "+",
                      "right": Object {
                        "expression": Object {
                          "expression": Object {
                            "name": "SectionHeaders",
                            "type": "identifier",
                          },
                          "index": Object {
                            "name": "i",
                            "type": "identifier",
                          },
                          "type": "arrayIndexExpression",
                        },
                        "name": "SizeOfRawData",
                        "type": "propertyAccessExpression",
                      },
                      "type": "binaryExpression",
                    },
                    "type": "binaryExpression",
                  },
                  "type": "binaryExpression",
                },
                "trueStatement": Object {
                  "statements": Array [
                    Object {
                      "assignmentExpression": Object {
                        "left": Object {
                          "expression": Object {
                            "expression": Object {
                              "name": "SectionHeaders",
                              "type": "identifier",
                            },
                            "index": Object {
                              "name": "i",
                              "type": "identifier",
                            },
                            "type": "arrayIndexExpression",
                          },
                          "name": "PointerToRawData",
                          "type": "propertyAccessExpression",
                        },
                        "operator": "+",
                        "right": Object {
                          "left": Object {
                            "name": "ulRVA",
                            "type": "identifier",
                          },
                          "operator": "-",
                          "right": Object {
                            "expression": Object {
                              "expression": Object {
                                "name": "SectionHeaders",
                                "type": "identifier",
                              },
                              "index": Object {
                                "name": "i",
                                "type": "identifier",
                              },
                              "type": "arrayIndexExpression",
                            },
                            "name": "VirtualAddress",
                            "type": "propertyAccessExpression",
                          },
                          "type": "binaryExpression",
                        },
                        "type": "binaryExpression",
                      },
                      "type": "returnStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "type": "ifStatement",
              },
            ],
            "type": "statementList",
          },
          "condition": Object {
            "left": Object {
              "name": "i",
              "type": "identifier",
            },
            "operator": "<",
            "right": Object {
              "expression": Object {
                "expression": Object {
                  "name": "NtHeader",
                  "type": "identifier",
                },
                "name": "FileHeader",
                "type": "propertyAccessExpression",
              },
              "name": "NumberOfSections",
              "type": "propertyAccessExpression",
            },
            "type": "binaryExpression",
          },
          "increment": Object {
            "expressions": Array [
              Object {
                "expression": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "++",
                "type": "postfixExpression",
              },
            ],
            "type": "commaExpression",
          },
          "initialization": Object {
            "expressions": Array [
              Object {
                "left": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "type": "number",
                  "value": 0,
                },
                "type": "binaryExpression",
              },
            ],
            "type": "commaExpression",
          },
          "type": "forStatement",
        },
        Object {
          "assignmentExpression": Object {
            "type": "number",
            "value": 0,
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "RVA2FOA",
    "parameters": Array [
      Object {
        "name": "ulRVA",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "ULONG",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "ULONG",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "arguments": Array [
                  Object {
                    "left": Object {
                      "left": Object {
                        "arguments": Array [
                          Object {
                            "name": "stNtHeader",
                            "type": "identifier",
                          },
                        ],
                        "name": Object {
                          "name": "startof",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      "operator": "+",
                      "right": Object {
                        "operand": Object {
                          "name": "DWORD",
                          "type": "identifier",
                        },
                        "type": "sizeofExpression",
                      },
                      "type": "binaryExpression",
                    },
                    "operator": "+",
                    "right": Object {
                      "operand": Object {
                        "name": "IMAGE_FILE_HEADER",
                        "type": "identifier",
                      },
                      "type": "sizeofExpression",
                    },
                    "type": "binaryExpression",
                  },
                ],
                "name": Object {
                  "name": "ReadShort",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "name": "OptionalHeaderMagic",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "WORD",
          },
        },
        Object {
          "condition": Object {
            "left": Object {
              "type": "number",
              "value": 267,
            },
            "operator": "==",
            "right": Object {
              "name": "OptionalHeaderMagic",
              "type": "identifier",
            },
            "type": "binaryExpression",
          },
          "falseStatement": Object {
            "condition": Object {
              "left": Object {
                "type": "number",
                "value": 523,
              },
              "operator": "==",
              "right": Object {
                "name": "OptionalHeaderMagic",
                "type": "identifier",
              },
              "type": "binaryExpression",
            },
            "falseStatement": Object {
              "statements": Array [
                Object {
                  "assignmentExpression": Object {
                    "left": Object {
                      "left": Object {
                        "operand": Object {
                          "name": "DWORD",
                          "type": "identifier",
                        },
                        "type": "sizeofExpression",
                      },
                      "operator": "+",
                      "right": Object {
                        "operand": Object {
                          "name": "IMAGE_FILE_HEADER",
                          "type": "identifier",
                        },
                        "type": "sizeofExpression",
                      },
                      "type": "binaryExpression",
                    },
                    "operator": "+",
                    "right": Object {
                      "type": "number",
                      "value": 0,
                    },
                    "type": "binaryExpression",
                  },
                  "type": "returnStatement",
                },
              ],
              "type": "statementList",
            },
            "trueStatement": Object {
              "statements": Array [
                Object {
                  "arguments": Array [
                    Object {
                      "string": "PE64\\\\n",
                      "type": "string",
                    },
                  ],
                  "name": Object {
                    "name": "Printf",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                Object {
                  "assignmentExpression": Object {
                    "type": "number",
                    "value": 264,
                  },
                  "type": "returnStatement",
                },
              ],
              "type": "statementList",
            },
            "type": "ifStatement",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "arguments": Array [
                  Object {
                    "string": "PE32\\\\n",
                    "type": "string",
                  },
                ],
                "name": Object {
                  "name": "Printf",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              Object {
                "assignmentExpression": Object {
                  "type": "number",
                  "value": 248,
                },
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "assignmentExpression": Object {
            "type": "number",
            "value": 0,
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "CalcImageNtHeadersSize",
    "parameters": Array [
      Object {
        "name": "stNtHeader",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "IMAGE_NT_HEADERS",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "int",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "expression": Object {
              "name": "h",
              "type": "identifier",
            },
            "name": "Name",
            "type": "propertyAccessExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ReadImageSectionHeader",
    "parameters": Array [
      Object {
        "name": "h",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "IMAGE_SECTION_HEADER",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "expression": Object {
              "name": "SecData",
              "type": "identifier",
            },
            "name": "sSecName",
            "type": "propertyAccessExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ReadSectionData",
    "parameters": Array [
      Object {
        "name": "SecData",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "IMAGE_SECTION_DATA",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "arguments": Array [
              Object {
                "arguments": Array [
                  Object {
                    "expression": Object {
                      "name": "ImportDescriptor",
                      "type": "identifier",
                    },
                    "name": "Name",
                    "type": "propertyAccessExpression",
                  },
                ],
                "name": Object {
                  "name": "RVA2FOA",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
            ],
            "name": Object {
              "name": "ReadString",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ReadImageImportDescriptor",
    "parameters": Array [
      Object {
        "name": "ImportDescriptor",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "IMAGE_IMPORT_DESCRIPTOR",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "expression": Object {
              "name": "ExportByName",
              "type": "identifier",
            },
            "name": "Function",
            "type": "propertyAccessExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "ReadExportByName",
    "parameters": Array [
      Object {
        "name": "ExportByName",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "IMAGE_EXPORT_BY_NAME",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 0,
              },
              "name": "i",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "body": Object {
            "statements": Array [
              Object {
                "condition": Object {
                  "left": Object {
                    "left": Object {
                      "name": "ulRVA",
                      "type": "identifier",
                    },
                    "operator": ">=",
                    "right": Object {
                      "expression": Object {
                        "expression": Object {
                          "name": "SectionHeaders",
                          "type": "identifier",
                        },
                        "index": Object {
                          "name": "i",
                          "type": "identifier",
                        },
                        "type": "arrayIndexExpression",
                      },
                      "name": "VirtualAddress",
                      "type": "propertyAccessExpression",
                    },
                    "type": "binaryExpression",
                  },
                  "operator": "&&",
                  "right": Object {
                    "left": Object {
                      "name": "ulRVA",
                      "type": "identifier",
                    },
                    "operator": "<=",
                    "right": Object {
                      "left": Object {
                        "expression": Object {
                          "expression": Object {
                            "name": "SectionHeaders",
                            "type": "identifier",
                          },
                          "index": Object {
                            "name": "i",
                            "type": "identifier",
                          },
                          "type": "arrayIndexExpression",
                        },
                        "name": "VirtualAddress",
                        "type": "propertyAccessExpression",
                      },
                      "operator": "+",
                      "right": Object {
                        "expression": Object {
                          "expression": Object {
                            "name": "SectionHeaders",
                            "type": "identifier",
                          },
                          "index": Object {
                            "name": "i",
                            "type": "identifier",
                          },
                          "type": "arrayIndexExpression",
                        },
                        "name": "SizeOfRawData",
                        "type": "propertyAccessExpression",
                      },
                      "type": "binaryExpression",
                    },
                    "type": "binaryExpression",
                  },
                  "type": "binaryExpression",
                },
                "trueStatement": Object {
                  "statements": Array [
                    Object {
                      "assignmentExpression": Object {
                        "expression": Object {
                          "expression": Object {
                            "name": "SectionHeaders",
                            "type": "identifier",
                          },
                          "index": Object {
                            "name": "i",
                            "type": "identifier",
                          },
                          "type": "arrayIndexExpression",
                        },
                        "name": "Name",
                        "type": "propertyAccessExpression",
                      },
                      "type": "returnStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "type": "ifStatement",
              },
            ],
            "type": "statementList",
          },
          "condition": Object {
            "left": Object {
              "name": "i",
              "type": "identifier",
            },
            "operator": "<",
            "right": Object {
              "expression": Object {
                "expression": Object {
                  "name": "NtHeader",
                  "type": "identifier",
                },
                "name": "FileHeader",
                "type": "propertyAccessExpression",
              },
              "name": "NumberOfSections",
              "type": "propertyAccessExpression",
            },
            "type": "binaryExpression",
          },
          "increment": Object {
            "expressions": Array [
              Object {
                "expression": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "++",
                "type": "postfixExpression",
              },
            ],
            "type": "commaExpression",
          },
          "initialization": Object {
            "expressions": Array [
              Object {
                "left": Object {
                  "name": "i",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "type": "number",
                  "value": 0,
                },
                "type": "binaryExpression",
              },
            ],
            "type": "commaExpression",
          },
          "type": "forStatement",
        },
        Object {
          "assignmentExpression": Object {
            "string": "",
            "type": "string",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "LocationRVA",
    "parameters": Array [
      Object {
        "name": "ulRVA",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "ULONG",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "",
                "type": "string",
              },
              "name": "sComment",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "condition": Object {
            "left": Object {
              "type": "number",
              "value": 0,
            },
            "operator": "!=",
            "right": Object {
              "name": "dwRVA",
              "type": "identifier",
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "arguments": Array [
                  Object {
                    "name": "sComment",
                    "type": "identifier",
                  },
                  Object {
                    "string": "%s FOA = 0x%X \\\\n",
                    "type": "string",
                  },
                  Object {
                    "arguments": Array [
                      Object {
                        "name": "dwRVA",
                        "type": "identifier",
                      },
                    ],
                    "name": Object {
                      "name": "LocationRVA",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  Object {
                    "arguments": Array [
                      Object {
                        "name": "dwRVA",
                        "type": "identifier",
                      },
                    ],
                    "name": Object {
                      "name": "RVA2FOA",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                ],
                "name": Object {
                  "name": "SPrintf",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "assignmentExpression": Object {
            "name": "sComment",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "CommentRVA2FOA",
    "parameters": Array [
      Object {
        "name": "dwRVA",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "DWORD",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "",
                "type": "string",
              },
              "name": "sComment",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "condition": Object {
            "left": Object {
              "type": "number",
              "value": 0,
            },
            "operator": "!=",
            "right": Object {
              "name": "dwRVA",
              "type": "identifier",
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "arguments": Array [
                  Object {
                    "name": "sComment",
                    "type": "identifier",
                  },
                  Object {
                    "string": "%s FOA = 0x%X -> %s",
                    "type": "string",
                  },
                  Object {
                    "arguments": Array [
                      Object {
                        "name": "dwRVA",
                        "type": "identifier",
                      },
                    ],
                    "name": Object {
                      "name": "LocationRVA",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  Object {
                    "arguments": Array [
                      Object {
                        "name": "dwRVA",
                        "type": "identifier",
                      },
                    ],
                    "name": Object {
                      "name": "RVA2FOA",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  Object {
                    "arguments": Array [
                      Object {
                        "arguments": Array [
                          Object {
                            "name": "dwRVA",
                            "type": "identifier",
                          },
                        ],
                        "name": Object {
                          "name": "RVA2FOA",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                    ],
                    "name": Object {
                      "name": "ReadString",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                ],
                "name": Object {
                  "name": "SPrintf",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "assignmentExpression": Object {
            "name": "sComment",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "CommentRVAString",
    "parameters": Array [
      Object {
        "name": "dwRVA",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "DWORD",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "expression": Object {
              "name": "ImportByName",
              "type": "identifier",
            },
            "name": "Name",
            "type": "propertyAccessExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "CommentImageImportByName",
    "parameters": Array [
      Object {
        "name": "ImportByName",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "IMAGE_IMPORT_BY_NAME",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "",
                "type": "string",
              },
              "name": "sComment",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "condition": Object {
            "left": Object {
              "type": "number",
              "value": 0,
            },
            "operator": "==",
            "right": Object {
              "arguments": Array [
                Object {
                  "expression": Object {
                    "name": "ExportByName",
                    "type": "identifier",
                  },
                  "name": "sLocalJmpName",
                  "type": "propertyAccessExpression",
                },
              ],
              "name": Object {
                "name": "Strlen",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
            "type": "binaryExpression",
          },
          "falseStatement": Object {
            "statements": Array [
              Object {
                "arguments": Array [
                  Object {
                    "name": "sComment",
                    "type": "identifier",
                  },
                  Object {
                    "string": "%s",
                    "type": "string",
                  },
                  Object {
                    "expression": Object {
                      "name": "ExportByName",
                      "type": "identifier",
                    },
                    "name": "sLocalJmpName",
                    "type": "propertyAccessExpression",
                  },
                ],
                "name": Object {
                  "name": "SPrintf",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
            ],
            "type": "statementList",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "arguments": Array [
                  Object {
                    "name": "sComment",
                    "type": "identifier",
                  },
                  Object {
                    "string": "0x%X",
                    "type": "string",
                  },
                  Object {
                    "expression": Object {
                      "name": "ExportByName",
                      "type": "identifier",
                    },
                    "name": "ulLocalDestRVA",
                    "type": "propertyAccessExpression",
                  },
                ],
                "name": Object {
                  "name": "SPrintf",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "assignmentExpression": Object {
            "name": "sComment",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "CommentExportByName",
    "parameters": Array [
      Object {
        "name": "ExportByName",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "IMAGE_EXPORT_BY_NAME",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "arguments": Array [
              Object {
                "arguments": Array [
                  Object {
                    "expression": Object {
                      "name": "ExportDir",
                      "type": "identifier",
                    },
                    "name": "Name",
                    "type": "propertyAccessExpression",
                  },
                ],
                "name": Object {
                  "name": "RVA2FOA",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
            ],
            "name": Object {
              "name": "ReadString",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "CommentExportDirectory",
    "parameters": Array [
      Object {
        "name": "ExportDir",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "IMAGE_EXPORT_DIRECTORY",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "condition": Object {
            "left": Object {
              "type": "number",
              "value": 12288,
            },
            "operator": "==",
            "right": Object {
              "left": Object {
                "name": "Block",
                "type": "identifier",
              },
              "operator": "&",
              "right": Object {
                "type": "number",
                "value": 61440,
              },
              "type": "binaryExpression",
            },
            "type": "binaryExpression",
          },
          "falseStatement": Object {
            "statements": Array [
              Object {
                "assignmentExpression": Object {
                  "string": "ABSOLUTE",
                  "type": "string",
                },
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "assignmentExpression": Object {
                  "string": "HIGHLOW",
                  "type": "string",
                },
                "type": "returnStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "assignmentExpression": Object {
            "string": "",
            "type": "string",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "CommentBaseRelocBlock",
    "parameters": Array [
      Object {
        "name": "Block",
        "reference": false,
        "type": Object {
          "array": false,
          "name": "WORD",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "",
                "type": "string",
              },
              "name": "sComment",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "arguments": Array [
            Object {
              "name": "sComment",
              "type": "identifier",
            },
            Object {
              "string": "%d",
              "type": "string",
            },
            Object {
              "expression": Object {
                "name": "BaseReloc",
                "type": "identifier",
              },
              "name": "ulBlockNum",
              "type": "propertyAccessExpression",
            },
          ],
          "name": Object {
            "name": "SPrintf",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "sComment",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "CommentImageBaseRelocation",
    "parameters": Array [
      Object {
        "name": "BaseReloc",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "IMAGE_BASE_RELOCATION",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "left": Object {
                  "name": "NameOffset",
                  "type": "identifier",
                },
                "operator": "&",
                "right": Object {
                  "type": "number",
                  "value": 2147483647,
                },
                "type": "binaryExpression",
              },
              "name": "dwMaskedOffset",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "DWORD",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "",
                "type": "string",
              },
              "name": "wsComment",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "wstring",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "",
                "type": "string",
              },
              "name": "sComment",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "left": Object {
                  "arguments": Array [
                    Object {
                      "expression": Object {
                        "expression": Object {
                          "expression": Object {
                            "expression": Object {
                              "name": "NtHeader",
                              "type": "identifier",
                            },
                            "name": "OptionalHeader",
                            "type": "propertyAccessExpression",
                          },
                          "name": "DataDirArray",
                          "type": "propertyAccessExpression",
                        },
                        "name": "Resource",
                        "type": "propertyAccessExpression",
                      },
                      "name": "VirtualAddress",
                      "type": "propertyAccessExpression",
                    },
                  ],
                  "name": Object {
                    "name": "RVA2FOA",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "operator": "+",
                "right": Object {
                  "name": "dwMaskedOffset",
                  "type": "identifier",
                },
                "type": "binaryExpression",
              },
              "name": "loc",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "DWORD",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "arguments": Array [
                  Object {
                    "name": "loc",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "ReadUShort",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "name": "actualLength",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "WORD",
          },
        },
        Object {
          "left": Object {
            "name": "wsComment",
            "type": "identifier",
          },
          "operator": "=",
          "right": Object {
            "arguments": Array [
              Object {
                "left": Object {
                  "name": "loc",
                  "type": "identifier",
                },
                "operator": "+",
                "right": Object {
                  "operand": Object {
                    "name": "WORD",
                    "type": "identifier",
                  },
                  "type": "sizeofExpression",
                },
                "type": "binaryExpression",
              },
            ],
            "name": Object {
              "name": "ReadWString",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "binaryExpression",
        },
        Object {
          "left": Object {
            "name": "wsComment",
            "type": "identifier",
          },
          "operator": "=",
          "right": Object {
            "arguments": Array [
              Object {
                "name": "wsComment",
                "type": "identifier",
              },
              Object {
                "type": "number",
                "value": 0,
              },
              Object {
                "name": "actualLength",
                "type": "identifier",
              },
            ],
            "name": Object {
              "name": "WSubStr",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "binaryExpression",
        },
        Object {
          "left": Object {
            "name": "sComment",
            "type": "identifier",
          },
          "operator": "=",
          "right": Object {
            "arguments": Array [
              Object {
                "name": "wsComment",
                "type": "identifier",
              },
            ],
            "name": Object {
              "name": "WStringToString",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "binaryExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "sComment",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "CommentResourceNameOffset",
    "parameters": Array [
      Object {
        "name": "NameOffset",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "DWORD",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "expression": Object {
              "name": "ResourceDirectoryTable",
              "type": "identifier",
            },
            "name": "NumberOfNameEntries",
            "type": "propertyAccessExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "GetNameEntries",
    "parameters": Array [
      Object {
        "name": "ResourceDirectoryTable",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "RESOURCE_DIRECTORY_TABLE",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "short",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "expression": Object {
              "name": "ResourceDirectoryEntry",
              "type": "identifier",
            },
            "name": "Level",
            "type": "propertyAccessExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "GetLevel",
    "parameters": Array [
      Object {
        "name": "ResourceDirectoryEntry",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "RESOURCE_DIRECTORY_ENTRY",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "int",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "",
                "type": "string",
              },
              "name": "sComment",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "condition": Object {
            "left": Object {
              "left": Object {
                "name": "IntegerID",
                "type": "identifier",
              },
              "operator": "==",
              "right": Object {
                "type": "number",
                "value": 0,
              },
              "type": "binaryExpression",
            },
            "operator": "||",
            "right": Object {
              "left": Object {
                "name": "IntegerID",
                "type": "identifier",
              },
              "operator": ">",
              "right": Object {
                "type": "number",
                "value": 255,
              },
              "type": "binaryExpression",
            },
            "type": "binaryExpression",
          },
          "falseStatement": Object {
            "condition": Object {
              "left": Object {
                "name": "IntegerID",
                "type": "identifier",
              },
              "operator": "==",
              "right": Object {
                "type": "number",
                "value": 1,
              },
              "type": "binaryExpression",
            },
            "falseStatement": Object {
              "condition": Object {
                "left": Object {
                  "name": "IntegerID",
                  "type": "identifier",
                },
                "operator": "==",
                "right": Object {
                  "type": "number",
                  "value": 2,
                },
                "type": "binaryExpression",
              },
              "falseStatement": Object {
                "condition": Object {
                  "left": Object {
                    "name": "IntegerID",
                    "type": "identifier",
                  },
                  "operator": "==",
                  "right": Object {
                    "type": "number",
                    "value": 3,
                  },
                  "type": "binaryExpression",
                },
                "falseStatement": Object {
                  "condition": Object {
                    "left": Object {
                      "name": "IntegerID",
                      "type": "identifier",
                    },
                    "operator": "==",
                    "right": Object {
                      "type": "number",
                      "value": 4,
                    },
                    "type": "binaryExpression",
                  },
                  "falseStatement": Object {
                    "condition": Object {
                      "left": Object {
                        "name": "IntegerID",
                        "type": "identifier",
                      },
                      "operator": "==",
                      "right": Object {
                        "type": "number",
                        "value": 5,
                      },
                      "type": "binaryExpression",
                    },
                    "falseStatement": Object {
                      "condition": Object {
                        "left": Object {
                          "name": "IntegerID",
                          "type": "identifier",
                        },
                        "operator": "==",
                        "right": Object {
                          "type": "number",
                          "value": 6,
                        },
                        "type": "binaryExpression",
                      },
                      "falseStatement": Object {
                        "condition": Object {
                          "left": Object {
                            "name": "IntegerID",
                            "type": "identifier",
                          },
                          "operator": "==",
                          "right": Object {
                            "type": "number",
                            "value": 7,
                          },
                          "type": "binaryExpression",
                        },
                        "falseStatement": Object {
                          "condition": Object {
                            "left": Object {
                              "name": "IntegerID",
                              "type": "identifier",
                            },
                            "operator": "==",
                            "right": Object {
                              "type": "number",
                              "value": 8,
                            },
                            "type": "binaryExpression",
                          },
                          "falseStatement": Object {
                            "condition": Object {
                              "left": Object {
                                "name": "IntegerID",
                                "type": "identifier",
                              },
                              "operator": "==",
                              "right": Object {
                                "type": "number",
                                "value": 9,
                              },
                              "type": "binaryExpression",
                            },
                            "falseStatement": Object {
                              "condition": Object {
                                "left": Object {
                                  "name": "IntegerID",
                                  "type": "identifier",
                                },
                                "operator": "==",
                                "right": Object {
                                  "type": "number",
                                  "value": 10,
                                },
                                "type": "binaryExpression",
                              },
                              "falseStatement": Object {
                                "condition": Object {
                                  "left": Object {
                                    "name": "IntegerID",
                                    "type": "identifier",
                                  },
                                  "operator": "==",
                                  "right": Object {
                                    "type": "number",
                                    "value": 11,
                                  },
                                  "type": "binaryExpression",
                                },
                                "falseStatement": Object {
                                  "condition": Object {
                                    "left": Object {
                                      "name": "IntegerID",
                                      "type": "identifier",
                                    },
                                    "operator": "==",
                                    "right": Object {
                                      "type": "number",
                                      "value": 12,
                                    },
                                    "type": "binaryExpression",
                                  },
                                  "falseStatement": Object {
                                    "condition": Object {
                                      "left": Object {
                                        "name": "IntegerID",
                                        "type": "identifier",
                                      },
                                      "operator": "==",
                                      "right": Object {
                                        "type": "number",
                                        "value": 13,
                                      },
                                      "type": "binaryExpression",
                                    },
                                    "falseStatement": Object {
                                      "condition": Object {
                                        "left": Object {
                                          "name": "IntegerID",
                                          "type": "identifier",
                                        },
                                        "operator": "==",
                                        "right": Object {
                                          "type": "number",
                                          "value": 14,
                                        },
                                        "type": "binaryExpression",
                                      },
                                      "falseStatement": Object {
                                        "condition": Object {
                                          "left": Object {
                                            "name": "IntegerID",
                                            "type": "identifier",
                                          },
                                          "operator": "==",
                                          "right": Object {
                                            "type": "number",
                                            "value": 15,
                                          },
                                          "type": "binaryExpression",
                                        },
                                        "falseStatement": Object {
                                          "condition": Object {
                                            "left": Object {
                                              "name": "IntegerID",
                                              "type": "identifier",
                                            },
                                            "operator": "==",
                                            "right": Object {
                                              "type": "number",
                                              "value": 16,
                                            },
                                            "type": "binaryExpression",
                                          },
                                          "falseStatement": Object {
                                            "condition": Object {
                                              "left": Object {
                                                "name": "IntegerID",
                                                "type": "identifier",
                                              },
                                              "operator": "==",
                                              "right": Object {
                                                "type": "number",
                                                "value": 17,
                                              },
                                              "type": "binaryExpression",
                                            },
                                            "falseStatement": Object {
                                              "condition": Object {
                                                "left": Object {
                                                  "name": "IntegerID",
                                                  "type": "identifier",
                                                },
                                                "operator": "==",
                                                "right": Object {
                                                  "type": "number",
                                                  "value": 18,
                                                },
                                                "type": "binaryExpression",
                                              },
                                              "falseStatement": Object {
                                                "condition": Object {
                                                  "left": Object {
                                                    "name": "IntegerID",
                                                    "type": "identifier",
                                                  },
                                                  "operator": "==",
                                                  "right": Object {
                                                    "type": "number",
                                                    "value": 19,
                                                  },
                                                  "type": "binaryExpression",
                                                },
                                                "falseStatement": Object {
                                                  "condition": Object {
                                                    "left": Object {
                                                      "name": "IntegerID",
                                                      "type": "identifier",
                                                    },
                                                    "operator": "==",
                                                    "right": Object {
                                                      "type": "number",
                                                      "value": 20,
                                                    },
                                                    "type": "binaryExpression",
                                                  },
                                                  "falseStatement": Object {
                                                    "condition": Object {
                                                      "left": Object {
                                                        "name": "IntegerID",
                                                        "type": "identifier",
                                                      },
                                                      "operator": "==",
                                                      "right": Object {
                                                        "type": "number",
                                                        "value": 21,
                                                      },
                                                      "type": "binaryExpression",
                                                    },
                                                    "falseStatement": Object {
                                                      "condition": Object {
                                                        "left": Object {
                                                          "name": "IntegerID",
                                                          "type": "identifier",
                                                        },
                                                        "operator": "==",
                                                        "right": Object {
                                                          "type": "number",
                                                          "value": 22,
                                                        },
                                                        "type": "binaryExpression",
                                                      },
                                                      "falseStatement": Object {
                                                        "condition": Object {
                                                          "left": Object {
                                                            "name": "IntegerID",
                                                            "type": "identifier",
                                                          },
                                                          "operator": "==",
                                                          "right": Object {
                                                            "type": "number",
                                                            "value": 23,
                                                          },
                                                          "type": "binaryExpression",
                                                        },
                                                        "falseStatement": Object {
                                                          "condition": Object {
                                                            "left": Object {
                                                              "name": "IntegerID",
                                                              "type": "identifier",
                                                            },
                                                            "operator": "==",
                                                            "right": Object {
                                                              "type": "number",
                                                              "value": 24,
                                                            },
                                                            "type": "binaryExpression",
                                                          },
                                                          "falseStatement": Object {
                                                            "condition": Object {
                                                              "left": Object {
                                                                "name": "IntegerID",
                                                                "type": "identifier",
                                                              },
                                                              "operator": "<",
                                                              "right": Object {
                                                                "type": "number",
                                                                "value": 256,
                                                              },
                                                              "type": "binaryExpression",
                                                            },
                                                            "trueStatement": Object {
                                                              "arguments": Array [
                                                                Object {
                                                                  "name": "sComment",
                                                                  "type": "identifier",
                                                                },
                                                                Object {
                                                                  "string": "%d: Reserved",
                                                                  "type": "string",
                                                                },
                                                                Object {
                                                                  "name": "IntegerID",
                                                                  "type": "identifier",
                                                                },
                                                              ],
                                                              "name": Object {
                                                                "name": "SPrintf",
                                                                "type": "identifier",
                                                              },
                                                              "type": "functionCallExpression",
                                                            },
                                                            "type": "ifStatement",
                                                          },
                                                          "trueStatement": Object {
                                                            "arguments": Array [
                                                              Object {
                                                                "name": "sComment",
                                                                "type": "identifier",
                                                              },
                                                              Object {
                                                                "string": "%d: RT_MANIFEST",
                                                                "type": "string",
                                                              },
                                                              Object {
                                                                "name": "IntegerID",
                                                                "type": "identifier",
                                                              },
                                                            ],
                                                            "name": Object {
                                                              "name": "SPrintf",
                                                              "type": "identifier",
                                                            },
                                                            "type": "functionCallExpression",
                                                          },
                                                          "type": "ifStatement",
                                                        },
                                                        "trueStatement": Object {
                                                          "arguments": Array [
                                                            Object {
                                                              "name": "sComment",
                                                              "type": "identifier",
                                                            },
                                                            Object {
                                                              "string": "%d: RT_HTML",
                                                              "type": "string",
                                                            },
                                                            Object {
                                                              "name": "IntegerID",
                                                              "type": "identifier",
                                                            },
                                                          ],
                                                          "name": Object {
                                                            "name": "SPrintf",
                                                            "type": "identifier",
                                                          },
                                                          "type": "functionCallExpression",
                                                        },
                                                        "type": "ifStatement",
                                                      },
                                                      "trueStatement": Object {
                                                        "arguments": Array [
                                                          Object {
                                                            "name": "sComment",
                                                            "type": "identifier",
                                                          },
                                                          Object {
                                                            "string": "%d: RT_ANIICON",
                                                            "type": "string",
                                                          },
                                                          Object {
                                                            "name": "IntegerID",
                                                            "type": "identifier",
                                                          },
                                                        ],
                                                        "name": Object {
                                                          "name": "SPrintf",
                                                          "type": "identifier",
                                                        },
                                                        "type": "functionCallExpression",
                                                      },
                                                      "type": "ifStatement",
                                                    },
                                                    "trueStatement": Object {
                                                      "arguments": Array [
                                                        Object {
                                                          "name": "sComment",
                                                          "type": "identifier",
                                                        },
                                                        Object {
                                                          "string": "%d: RT_ANICURSOR",
                                                          "type": "string",
                                                        },
                                                        Object {
                                                          "name": "IntegerID",
                                                          "type": "identifier",
                                                        },
                                                      ],
                                                      "name": Object {
                                                        "name": "SPrintf",
                                                        "type": "identifier",
                                                      },
                                                      "type": "functionCallExpression",
                                                    },
                                                    "type": "ifStatement",
                                                  },
                                                  "trueStatement": Object {
                                                    "arguments": Array [
                                                      Object {
                                                        "name": "sComment",
                                                        "type": "identifier",
                                                      },
                                                      Object {
                                                        "string": "%d: RT_VXD",
                                                        "type": "string",
                                                      },
                                                      Object {
                                                        "name": "IntegerID",
                                                        "type": "identifier",
                                                      },
                                                    ],
                                                    "name": Object {
                                                      "name": "SPrintf",
                                                      "type": "identifier",
                                                    },
                                                    "type": "functionCallExpression",
                                                  },
                                                  "type": "ifStatement",
                                                },
                                                "trueStatement": Object {
                                                  "arguments": Array [
                                                    Object {
                                                      "name": "sComment",
                                                      "type": "identifier",
                                                    },
                                                    Object {
                                                      "string": "%d: RT_PLUGPLAY",
                                                      "type": "string",
                                                    },
                                                    Object {
                                                      "name": "IntegerID",
                                                      "type": "identifier",
                                                    },
                                                  ],
                                                  "name": Object {
                                                    "name": "SPrintf",
                                                    "type": "identifier",
                                                  },
                                                  "type": "functionCallExpression",
                                                },
                                                "type": "ifStatement",
                                              },
                                              "trueStatement": Object {
                                                "arguments": Array [
                                                  Object {
                                                    "name": "sComment",
                                                    "type": "identifier",
                                                  },
                                                  Object {
                                                    "string": "%d: Reserved",
                                                    "type": "string",
                                                  },
                                                  Object {
                                                    "name": "IntegerID",
                                                    "type": "identifier",
                                                  },
                                                ],
                                                "name": Object {
                                                  "name": "SPrintf",
                                                  "type": "identifier",
                                                },
                                                "type": "functionCallExpression",
                                              },
                                              "type": "ifStatement",
                                            },
                                            "trueStatement": Object {
                                              "arguments": Array [
                                                Object {
                                                  "name": "sComment",
                                                  "type": "identifier",
                                                },
                                                Object {
                                                  "string": "%d: RT_DLGINCLUDE",
                                                  "type": "string",
                                                },
                                                Object {
                                                  "name": "IntegerID",
                                                  "type": "identifier",
                                                },
                                              ],
                                              "name": Object {
                                                "name": "SPrintf",
                                                "type": "identifier",
                                              },
                                              "type": "functionCallExpression",
                                            },
                                            "type": "ifStatement",
                                          },
                                          "trueStatement": Object {
                                            "arguments": Array [
                                              Object {
                                                "name": "sComment",
                                                "type": "identifier",
                                              },
                                              Object {
                                                "string": "%d: RT_VERSION",
                                                "type": "string",
                                              },
                                              Object {
                                                "name": "IntegerID",
                                                "type": "identifier",
                                              },
                                            ],
                                            "name": Object {
                                              "name": "SPrintf",
                                              "type": "identifier",
                                            },
                                            "type": "functionCallExpression",
                                          },
                                          "type": "ifStatement",
                                        },
                                        "trueStatement": Object {
                                          "arguments": Array [
                                            Object {
                                              "name": "sComment",
                                              "type": "identifier",
                                            },
                                            Object {
                                              "string": "%d: Reserved",
                                              "type": "string",
                                            },
                                            Object {
                                              "name": "IntegerID",
                                              "type": "identifier",
                                            },
                                          ],
                                          "name": Object {
                                            "name": "SPrintf",
                                            "type": "identifier",
                                          },
                                          "type": "functionCallExpression",
                                        },
                                        "type": "ifStatement",
                                      },
                                      "trueStatement": Object {
                                        "arguments": Array [
                                          Object {
                                            "name": "sComment",
                                            "type": "identifier",
                                          },
                                          Object {
                                            "string": "%d: RT_GROUP_ICON",
                                            "type": "string",
                                          },
                                          Object {
                                            "name": "IntegerID",
                                            "type": "identifier",
                                          },
                                        ],
                                        "name": Object {
                                          "name": "SPrintf",
                                          "type": "identifier",
                                        },
                                        "type": "functionCallExpression",
                                      },
                                      "type": "ifStatement",
                                    },
                                    "trueStatement": Object {
                                      "arguments": Array [
                                        Object {
                                          "name": "sComment",
                                          "type": "identifier",
                                        },
                                        Object {
                                          "string": "%d: Reserved",
                                          "type": "string",
                                        },
                                        Object {
                                          "name": "IntegerID",
                                          "type": "identifier",
                                        },
                                      ],
                                      "name": Object {
                                        "name": "SPrintf",
                                        "type": "identifier",
                                      },
                                      "type": "functionCallExpression",
                                    },
                                    "type": "ifStatement",
                                  },
                                  "trueStatement": Object {
                                    "arguments": Array [
                                      Object {
                                        "name": "sComment",
                                        "type": "identifier",
                                      },
                                      Object {
                                        "string": "%d: RT_GROUP_CURSOR",
                                        "type": "string",
                                      },
                                      Object {
                                        "name": "IntegerID",
                                        "type": "identifier",
                                      },
                                    ],
                                    "name": Object {
                                      "name": "SPrintf",
                                      "type": "identifier",
                                    },
                                    "type": "functionCallExpression",
                                  },
                                  "type": "ifStatement",
                                },
                                "trueStatement": Object {
                                  "arguments": Array [
                                    Object {
                                      "name": "sComment",
                                      "type": "identifier",
                                    },
                                    Object {
                                      "string": "%d: RT_MESSAGETABLE",
                                      "type": "string",
                                    },
                                    Object {
                                      "name": "IntegerID",
                                      "type": "identifier",
                                    },
                                  ],
                                  "name": Object {
                                    "name": "SPrintf",
                                    "type": "identifier",
                                  },
                                  "type": "functionCallExpression",
                                },
                                "type": "ifStatement",
                              },
                              "trueStatement": Object {
                                "arguments": Array [
                                  Object {
                                    "name": "sComment",
                                    "type": "identifier",
                                  },
                                  Object {
                                    "string": "%d: RT_RCDATA",
                                    "type": "string",
                                  },
                                  Object {
                                    "name": "IntegerID",
                                    "type": "identifier",
                                  },
                                ],
                                "name": Object {
                                  "name": "SPrintf",
                                  "type": "identifier",
                                },
                                "type": "functionCallExpression",
                              },
                              "type": "ifStatement",
                            },
                            "trueStatement": Object {
                              "arguments": Array [
                                Object {
                                  "name": "sComment",
                                  "type": "identifier",
                                },
                                Object {
                                  "string": "%d: RT_ACCELERATOR",
                                  "type": "string",
                                },
                                Object {
                                  "name": "IntegerID",
                                  "type": "identifier",
                                },
                              ],
                              "name": Object {
                                "name": "SPrintf",
                                "type": "identifier",
                              },
                              "type": "functionCallExpression",
                            },
                            "type": "ifStatement",
                          },
                          "trueStatement": Object {
                            "arguments": Array [
                              Object {
                                "name": "sComment",
                                "type": "identifier",
                              },
                              Object {
                                "string": "%d: RT_FONT",
                                "type": "string",
                              },
                              Object {
                                "name": "IntegerID",
                                "type": "identifier",
                              },
                            ],
                            "name": Object {
                              "name": "SPrintf",
                              "type": "identifier",
                            },
                            "type": "functionCallExpression",
                          },
                          "type": "ifStatement",
                        },
                        "trueStatement": Object {
                          "arguments": Array [
                            Object {
                              "name": "sComment",
                              "type": "identifier",
                            },
                            Object {
                              "string": "%d: RT_FONTDIR",
                              "type": "string",
                            },
                            Object {
                              "name": "IntegerID",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "SPrintf",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                        "type": "ifStatement",
                      },
                      "trueStatement": Object {
                        "arguments": Array [
                          Object {
                            "name": "sComment",
                            "type": "identifier",
                          },
                          Object {
                            "string": "%d: RT_STRING",
                            "type": "string",
                          },
                          Object {
                            "name": "IntegerID",
                            "type": "identifier",
                          },
                        ],
                        "name": Object {
                          "name": "SPrintf",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                      "type": "ifStatement",
                    },
                    "trueStatement": Object {
                      "arguments": Array [
                        Object {
                          "name": "sComment",
                          "type": "identifier",
                        },
                        Object {
                          "string": "%d: RT_DIALOG",
                          "type": "string",
                        },
                        Object {
                          "name": "IntegerID",
                          "type": "identifier",
                        },
                      ],
                      "name": Object {
                        "name": "SPrintf",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    "type": "ifStatement",
                  },
                  "trueStatement": Object {
                    "arguments": Array [
                      Object {
                        "name": "sComment",
                        "type": "identifier",
                      },
                      Object {
                        "string": "%d: RT_MENU",
                        "type": "string",
                      },
                      Object {
                        "name": "IntegerID",
                        "type": "identifier",
                      },
                    ],
                    "name": Object {
                      "name": "SPrintf",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                  "type": "ifStatement",
                },
                "trueStatement": Object {
                  "arguments": Array [
                    Object {
                      "name": "sComment",
                      "type": "identifier",
                    },
                    Object {
                      "string": "%d: RT_ICON",
                      "type": "string",
                    },
                    Object {
                      "name": "IntegerID",
                      "type": "identifier",
                    },
                  ],
                  "name": Object {
                    "name": "SPrintf",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "type": "ifStatement",
              },
              "trueStatement": Object {
                "arguments": Array [
                  Object {
                    "name": "sComment",
                    "type": "identifier",
                  },
                  Object {
                    "string": "%d: RT_BITMAP",
                    "type": "string",
                  },
                  Object {
                    "name": "IntegerID",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "SPrintf",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "type": "ifStatement",
            },
            "trueStatement": Object {
              "arguments": Array [
                Object {
                  "name": "sComment",
                  "type": "identifier",
                },
                Object {
                  "string": "%d: RT_CURSOR",
                  "type": "string",
                },
                Object {
                  "name": "IntegerID",
                  "type": "identifier",
                },
              ],
              "name": Object {
                "name": "SPrintf",
                "type": "identifier",
              },
              "type": "functionCallExpression",
            },
            "type": "ifStatement",
          },
          "trueStatement": Object {
            "arguments": Array [
              Object {
                "name": "sComment",
                "type": "identifier",
              },
              Object {
                "string": "%d: Unknown",
                "type": "string",
              },
              Object {
                "name": "IntegerID",
                "type": "identifier",
              },
            ],
            "name": Object {
              "name": "SPrintf",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
          "type": "ifStatement",
        },
        Object {
          "assignmentExpression": Object {
            "name": "sComment",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "GetType",
    "parameters": Array [
      Object {
        "name": "IntegerID",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "DWORD",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "",
                "type": "string",
              },
              "name": "sComment",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "arguments": Array [
                  Object {
                    "arguments": Array [
                      Object {
                        "name": "IntegerID",
                        "type": "identifier",
                      },
                    ],
                    "name": Object {
                      "name": "parentof",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                ],
                "name": Object {
                  "name": "GetLevel",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "name": "level",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "statements": Array [
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "left": Object {
                      "name": "sComment",
                      "type": "identifier",
                    },
                    "operator": "=",
                    "right": Object {
                      "left": Object {
                        "left": Object {
                          "string": "Type (",
                          "type": "string",
                        },
                        "operator": "+",
                        "right": Object {
                          "arguments": Array [
                            Object {
                              "name": "IntegerID",
                              "type": "identifier",
                            },
                          ],
                          "name": Object {
                            "name": "GetType",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                        "type": "binaryExpression",
                      },
                      "operator": "+",
                      "right": Object {
                        "string": ")",
                        "type": "string",
                      },
                      "type": "binaryExpression",
                    },
                    "type": "binaryExpression",
                  },
                  Object {
                    "type": "breakStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 1,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "left": Object {
                      "name": "sComment",
                      "type": "identifier",
                    },
                    "operator": "=",
                    "right": Object {
                      "string": "",
                      "type": "string",
                    },
                    "type": "binaryExpression",
                  },
                  Object {
                    "type": "breakStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 2,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "left": Object {
                      "name": "sComment",
                      "type": "identifier",
                    },
                    "operator": "=",
                    "right": Object {
                      "string": "Language",
                      "type": "string",
                    },
                    "type": "binaryExpression",
                  },
                  Object {
                    "type": "breakStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "number",
                  "value": 3,
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [
                  Object {
                    "type": "breakStatement",
                  },
                ],
                "type": "statementList",
              },
              "labels": Array [
                Object {
                  "type": "defaultStatement",
                },
              ],
            },
            Object {
              "body": Object {
                "statements": Array [],
                "type": "statementList",
              },
              "labels": Array [],
            },
          ],
          "type": "switchStatement",
        },
        Object {
          "assignmentExpression": Object {
            "name": "sComment",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "CommentIntegerID",
    "parameters": Array [
      Object {
        "name": "IntegerID",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "DWORD",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "",
                "type": "string",
              },
              "name": "sComment",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "arguments": Array [
                  Object {
                    "name": "str",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "startof",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "name": "loc",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "DWORD",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "arguments": Array [
                  Object {
                    "name": "loc",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "ReadShort",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "name": "actualLength",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "WORD",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "arguments": Array [
                  Object {
                    "arguments": Array [
                      Object {
                        "arguments": Array [
                          Object {
                            "arguments": Array [
                              Object {
                                "arguments": Array [
                                  Object {
                                    "arguments": Array [
                                      Object {
                                        "name": "str",
                                        "type": "identifier",
                                      },
                                    ],
                                    "name": Object {
                                      "name": "parentof",
                                      "type": "identifier",
                                    },
                                    "type": "functionCallExpression",
                                  },
                                ],
                                "name": Object {
                                  "name": "parentof",
                                  "type": "identifier",
                                },
                                "type": "functionCallExpression",
                              },
                            ],
                            "name": Object {
                              "name": "parentof",
                              "type": "identifier",
                            },
                            "type": "functionCallExpression",
                          },
                        ],
                        "name": Object {
                          "name": "parentof",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                    ],
                    "name": Object {
                      "name": "parentof",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                ],
                "name": Object {
                  "name": "GetEntryIntegerID",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "name": "BlockNumber",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "DWORD",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "type": "number",
                "value": 0,
              },
              "name": "myIndex",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "arguments": Array [
                  Object {
                    "arguments": Array [
                      Object {
                        "name": "str",
                        "type": "identifier",
                      },
                    ],
                    "name": Object {
                      "name": "parentof",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                ],
                "name": Object {
                  "name": "startof",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "name": "blockStart",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "DWORD",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "name": "blockStart",
                "type": "identifier",
              },
              "name": "curLoc",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "DWORD",
          },
        },
        Object {
          "body": Object {
            "statements": Array [
              Object {
                "expression": Object {
                  "name": "myIndex",
                  "type": "identifier",
                },
                "operator": "++",
                "type": "postfixExpression",
              },
              Object {
                "left": Object {
                  "name": "curLoc",
                  "type": "identifier",
                },
                "operator": "+=",
                "right": Object {
                  "left": Object {
                    "left": Object {
                      "type": "number",
                      "value": 2,
                    },
                    "operator": "*",
                    "right": Object {
                      "arguments": Array [
                        Object {
                          "name": "curLoc",
                          "type": "identifier",
                        },
                      ],
                      "name": Object {
                        "name": "ReadUShort",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    "type": "binaryExpression",
                  },
                  "operator": "+",
                  "right": Object {
                    "operand": Object {
                      "name": "WORD",
                      "type": "identifier",
                    },
                    "type": "sizeofExpression",
                  },
                  "type": "binaryExpression",
                },
                "type": "binaryExpression",
              },
            ],
            "type": "statementList",
          },
          "condition": Object {
            "left": Object {
              "name": "curLoc",
              "type": "identifier",
            },
            "operator": "!=",
            "right": Object {
              "name": "loc",
              "type": "identifier",
            },
            "type": "binaryExpression",
          },
          "type": "whileStatement",
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "left": Object {
                  "left": Object {
                    "left": Object {
                      "name": "BlockNumber",
                      "type": "identifier",
                    },
                    "operator": "-",
                    "right": Object {
                      "type": "number",
                      "value": 1,
                    },
                    "type": "binaryExpression",
                  },
                  "operator": "*",
                  "right": Object {
                    "type": "number",
                    "value": 16,
                  },
                  "type": "binaryExpression",
                },
                "operator": "+",
                "right": Object {
                  "name": "myIndex",
                  "type": "identifier",
                },
                "type": "binaryExpression",
              },
              "name": "myStringID",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "DWORD",
          },
        },
        Object {
          "condition": Object {
            "left": Object {
              "name": "actualLength",
              "type": "identifier",
            },
            "operator": ">",
            "right": Object {
              "type": "number",
              "value": 0,
            },
            "type": "binaryExpression",
          },
          "falseStatement": Object {
            "statements": Array [
              Object {
                "arguments": Array [
                  Object {
                    "name": "sComment",
                    "type": "identifier",
                  },
                  Object {
                    "string": "String ID #%d: <null>",
                    "type": "string",
                  },
                  Object {
                    "name": "myStringID",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "SPrintf",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
            ],
            "type": "statementList",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "annotations": Array [],
                "declarations": Array [
                  Object {
                    "annotations": Array [],
                    "initializer": Object {
                      "arguments": Array [
                        Object {
                          "left": Object {
                            "arguments": Array [
                              Object {
                                "name": "str",
                                "type": "identifier",
                              },
                            ],
                            "name": Object {
                              "name": "startof",
                              "type": "identifier",
                            },
                            "type": "functionCallExpression",
                          },
                          "operator": "+",
                          "right": Object {
                            "operand": Object {
                              "name": "WORD",
                              "type": "identifier",
                            },
                            "type": "sizeofExpression",
                          },
                          "type": "binaryExpression",
                        },
                      ],
                      "name": Object {
                        "name": "ReadWString",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    "name": "wsComment",
                  },
                ],
                "local": true,
                "type": "variableDeclaration",
                "variableType": Object {
                  "array": false,
                  "name": "wstring",
                },
              },
              Object {
                "left": Object {
                  "name": "wsComment",
                  "type": "identifier",
                },
                "operator": "=",
                "right": Object {
                  "arguments": Array [
                    Object {
                      "name": "wsComment",
                      "type": "identifier",
                    },
                    Object {
                      "type": "number",
                      "value": 0,
                    },
                    Object {
                      "name": "actualLength",
                      "type": "identifier",
                    },
                  ],
                  "name": Object {
                    "name": "WSubStr",
                    "type": "identifier",
                  },
                  "type": "functionCallExpression",
                },
                "type": "binaryExpression",
              },
              Object {
                "arguments": Array [
                  Object {
                    "name": "sComment",
                    "type": "identifier",
                  },
                  Object {
                    "string": "String ID #%d: %s",
                    "type": "string",
                  },
                  Object {
                    "name": "myStringID",
                    "type": "identifier",
                  },
                  Object {
                    "arguments": Array [
                      Object {
                        "name": "wsComment",
                        "type": "identifier",
                      },
                    ],
                    "name": Object {
                      "name": "WStringToString",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                ],
                "name": Object {
                  "name": "SPrintf",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "assignmentExpression": Object {
            "name": "sComment",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "CommentResourceDirectoryString",
    "parameters": Array [
      Object {
        "name": "str",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "RESOURCE_DIRECTORY_STRING",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "",
                "type": "string",
              },
              "name": "sComment",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "left": Object {
                  "expression": Object {
                    "name": "ResourceDirectoryTable",
                    "type": "identifier",
                  },
                  "name": "NumberOfNameEntries",
                  "type": "propertyAccessExpression",
                },
                "operator": "+",
                "right": Object {
                  "expression": Object {
                    "name": "ResourceDirectoryTable",
                    "type": "identifier",
                  },
                  "name": "NumberOfIDEntries",
                  "type": "propertyAccessExpression",
                },
                "type": "binaryExpression",
              },
              "name": "totalEntries",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "DWORD",
          },
        },
        Object {
          "condition": Object {
            "left": Object {
              "name": "totalEntries",
              "type": "identifier",
            },
            "operator": "==",
            "right": Object {
              "type": "number",
              "value": 1,
            },
            "type": "binaryExpression",
          },
          "falseStatement": Object {
            "statements": Array [
              Object {
                "arguments": Array [
                  Object {
                    "name": "sComment",
                    "type": "identifier",
                  },
                  Object {
                    "string": "Level %d, %d entries",
                    "type": "string",
                  },
                  Object {
                    "expression": Object {
                      "name": "ResourceDirectoryTable",
                      "type": "identifier",
                    },
                    "name": "Level",
                    "type": "propertyAccessExpression",
                  },
                  Object {
                    "name": "totalEntries",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "SPrintf",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
            ],
            "type": "statementList",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "arguments": Array [
                  Object {
                    "name": "sComment",
                    "type": "identifier",
                  },
                  Object {
                    "string": "Level %d, %d entry",
                    "type": "string",
                  },
                  Object {
                    "expression": Object {
                      "name": "ResourceDirectoryTable",
                      "type": "identifier",
                    },
                    "name": "Level",
                    "type": "propertyAccessExpression",
                  },
                  Object {
                    "name": "totalEntries",
                    "type": "identifier",
                  },
                ],
                "name": Object {
                  "name": "SPrintf",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "assignmentExpression": Object {
            "name": "sComment",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "CommentResourceDirectoryTable",
    "parameters": Array [
      Object {
        "name": "ResourceDirectoryTable",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "RESOURCE_DIRECTORY_TABLE",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "expression": Object {
              "name": "ResourceDirectoryEntry",
              "type": "identifier",
            },
            "name": "IntegerID",
            "type": "propertyAccessExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "GetEntryIntegerID",
    "parameters": Array [
      Object {
        "name": "ResourceDirectoryEntry",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "RESOURCE_DIRECTORY_ENTRY",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "int",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "expression": Object {
              "name": "ResourceDirectoryEntry",
              "type": "identifier",
            },
            "name": "IsNameEntry",
            "type": "propertyAccessExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "GetEntryIsNameEntry",
    "parameters": Array [
      Object {
        "name": "ResourceDirectoryEntry",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "RESOURCE_DIRECTORY_ENTRY",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "int",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "assignmentExpression": Object {
            "expression": Object {
              "name": "ResourceDirectoryTable",
              "type": "identifier",
            },
            "name": "Level",
            "type": "propertyAccessExpression",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "GetParentTableLevel",
    "parameters": Array [
      Object {
        "name": "ResourceDirectoryTable",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "RESOURCE_DIRECTORY_TABLE",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "int",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "arguments": Array [
                  Object {
                    "arguments": Array [
                      Object {
                        "arguments": Array [
                          Object {
                            "name": "ResourceDataEntry",
                            "type": "identifier",
                          },
                        ],
                        "name": Object {
                          "name": "parentof",
                          "type": "identifier",
                        },
                        "type": "functionCallExpression",
                      },
                    ],
                    "name": Object {
                      "name": "parentof",
                      "type": "identifier",
                    },
                    "type": "functionCallExpression",
                  },
                ],
                "name": Object {
                  "name": "GetParentTableLevel",
                  "type": "identifier",
                },
                "type": "functionCallExpression",
              },
              "name": "ParentTableLevel",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "int",
          },
        },
        Object {
          "condition": Object {
            "left": Object {
              "name": "ParentTableLevel",
              "type": "identifier",
            },
            "operator": "==",
            "right": Object {
              "type": "number",
              "value": 3,
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "annotations": Array [],
                "declarations": Array [
                  Object {
                    "annotations": Array [],
                    "initializer": Object {
                      "arguments": Array [
                        Object {
                          "arguments": Array [
                            Object {
                              "arguments": Array [
                                Object {
                                  "arguments": Array [
                                    Object {
                                      "arguments": Array [
                                        Object {
                                          "arguments": Array [
                                            Object {
                                              "name": "ResourceDataEntry",
                                              "type": "identifier",
                                            },
                                          ],
                                          "name": Object {
                                            "name": "parentof",
                                            "type": "identifier",
                                          },
                                          "type": "functionCallExpression",
                                        },
                                      ],
                                      "name": Object {
                                        "name": "parentof",
                                        "type": "identifier",
                                      },
                                      "type": "functionCallExpression",
                                    },
                                  ],
                                  "name": Object {
                                    "name": "parentof",
                                    "type": "identifier",
                                  },
                                  "type": "functionCallExpression",
                                },
                              ],
                              "name": Object {
                                "name": "parentof",
                                "type": "identifier",
                              },
                              "type": "functionCallExpression",
                            },
                          ],
                          "name": Object {
                            "name": "parentof",
                            "type": "identifier",
                          },
                          "type": "functionCallExpression",
                        },
                      ],
                      "name": Object {
                        "name": "GetEntryIsNameEntry",
                        "type": "identifier",
                      },
                      "type": "functionCallExpression",
                    },
                    "name": "BaseEntryIsNameEntry",
                  },
                ],
                "local": true,
                "type": "variableDeclaration",
                "variableType": Object {
                  "array": false,
                  "name": "int",
                },
              },
              Object {
                "condition": Object {
                  "left": Object {
                    "name": "BaseEntryIsNameEntry",
                    "type": "identifier",
                  },
                  "operator": "==",
                  "right": Object {
                    "type": "number",
                    "value": 0,
                  },
                  "type": "binaryExpression",
                },
                "trueStatement": Object {
                  "statements": Array [
                    Object {
                      "annotations": Array [],
                      "declarations": Array [
                        Object {
                          "annotations": Array [],
                          "initializer": Object {
                            "arguments": Array [
                              Object {
                                "arguments": Array [
                                  Object {
                                    "arguments": Array [
                                      Object {
                                        "arguments": Array [
                                          Object {
                                            "arguments": Array [
                                              Object {
                                                "arguments": Array [
                                                  Object {
                                                    "name": "ResourceDataEntry",
                                                    "type": "identifier",
                                                  },
                                                ],
                                                "name": Object {
                                                  "name": "parentof",
                                                  "type": "identifier",
                                                },
                                                "type": "functionCallExpression",
                                              },
                                            ],
                                            "name": Object {
                                              "name": "parentof",
                                              "type": "identifier",
                                            },
                                            "type": "functionCallExpression",
                                          },
                                        ],
                                        "name": Object {
                                          "name": "parentof",
                                          "type": "identifier",
                                        },
                                        "type": "functionCallExpression",
                                      },
                                    ],
                                    "name": Object {
                                      "name": "parentof",
                                      "type": "identifier",
                                    },
                                    "type": "functionCallExpression",
                                  },
                                ],
                                "name": Object {
                                  "name": "parentof",
                                  "type": "identifier",
                                },
                                "type": "functionCallExpression",
                              },
                            ],
                            "name": Object {
                              "name": "GetEntryIntegerID",
                              "type": "identifier",
                            },
                            "type": "functionCallExpression",
                          },
                          "name": "BaseEntryIntegerID",
                        },
                      ],
                      "local": true,
                      "type": "variableDeclaration",
                      "variableType": Object {
                        "array": false,
                        "name": "int",
                      },
                    },
                    Object {
                      "condition": Object {
                        "left": Object {
                          "name": "BaseEntryIntegerID",
                          "type": "identifier",
                        },
                        "operator": "==",
                        "right": Object {
                          "type": "number",
                          "value": 6,
                        },
                        "type": "binaryExpression",
                      },
                      "trueStatement": Object {
                        "statements": Array [
                          Object {
                            "assignmentExpression": Object {
                              "type": "number",
                              "value": 1,
                            },
                            "type": "returnStatement",
                          },
                        ],
                        "type": "statementList",
                      },
                      "type": "ifStatement",
                    },
                  ],
                  "type": "statementList",
                },
                "type": "ifStatement",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "assignmentExpression": Object {
            "type": "number",
            "value": 0,
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "IsResourceDirectoryString",
    "parameters": Array [
      Object {
        "name": "ResourceDataEntry",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "RESOURCE_DATA_ENTRY",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "int",
    },
    "type": "functionDeclaration",
  },
  Object {
    "content": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "initializer": Object {
                "string": "",
                "type": "string",
              },
              "name": "sComment",
            },
          ],
          "local": true,
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "string",
          },
        },
        Object {
          "arguments": Array [
            Object {
              "name": "sComment",
              "type": "identifier",
            },
            Object {
              "string": "%d",
              "type": "string",
            },
            Object {
              "expression": Object {
                "name": "RelocTable",
                "type": "identifier",
              },
              "name": "ulRelocNum",
              "type": "propertyAccessExpression",
            },
          ],
          "name": Object {
            "name": "SPrintf",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "assignmentExpression": Object {
            "name": "sComment",
            "type": "identifier",
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "forwardDeclaration": false,
    "name": "CommentBaseRelocationTable",
    "parameters": Array [
      Object {
        "name": "RelocTable",
        "reference": true,
        "type": Object {
          "array": false,
          "name": "BASE_RELOCATION_TABLE",
        },
      },
    ],
    "returnType": Object {
      "array": false,
      "name": "string",
    },
    "type": "functionDeclaration",
  },
  Object {
    "arguments": Array [],
    "name": Object {
      "name": "LittleEndian",
      "type": "identifier",
    },
    "type": "functionCallExpression",
  },
  Object {
    "arguments": Array [
      Object {
        "string": "EXE.bt Begin\\\\n",
        "type": "string",
      },
    ],
    "name": Object {
      "name": "Printf",
      "type": "identifier",
    },
    "type": "functionCallExpression",
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [
          Object {
            "key": "bgcolor",
            "value": Object {
              "name": "cLtPurple",
              "type": "identifier",
            },
          },
        ],
        "name": "DosHeader",
      },
    ],
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "IMAGE_DOS_HEADER",
    },
  },
  Object {
    "condition": Object {
      "left": Object {
        "expression": Object {
          "name": "DosHeader",
          "type": "identifier",
        },
        "name": "MZSignature",
        "type": "propertyAccessExpression",
      },
      "operator": "!=",
      "right": Object {
        "type": "number",
        "value": 23117,
      },
      "type": "binaryExpression",
    },
    "trueStatement": Object {
      "statements": Array [
        Object {
          "arguments": Array [
            Object {
              "string": "Invalid DOS Magic.\\\\n",
              "type": "string",
            },
          ],
          "name": Object {
            "name": "Printf",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "assignmentExpression": Object {
            "type": "number",
            "value": 1,
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "type": "ifStatement",
  },
  Object {
    "condition": Object {
      "left": Object {
        "type": "number",
        "value": 0,
      },
      "operator": "==",
      "right": Object {
        "expression": Object {
          "name": "DosHeader",
          "type": "identifier",
        },
        "name": "AddressOfNewExeHeader",
        "type": "propertyAccessExpression",
      },
      "type": "binaryExpression",
    },
    "trueStatement": Object {
      "statements": Array [
        Object {
          "arguments": Array [
            Object {
              "string": "Invalid AddressOfNewExeHeader = 0x%X",
              "type": "string",
            },
            Object {
              "expression": Object {
                "name": "DosHeader",
                "type": "identifier",
              },
              "name": "AddressOfNewExeHeader",
              "type": "propertyAccessExpression",
            },
          ],
          "name": Object {
            "name": "Warning",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "assignmentExpression": Object {
            "type": "number",
            "value": 2,
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "type": "ifStatement",
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [],
        "name": "DosStub",
      },
    ],
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "IMAGE_DOS_STUB",
    },
  },
  Object {
    "arguments": Array [
      Object {
        "expression": Object {
          "name": "DosHeader",
          "type": "identifier",
        },
        "name": "AddressOfNewExeHeader",
        "type": "propertyAccessExpression",
      },
    ],
    "name": Object {
      "name": "FSeek",
      "type": "identifier",
    },
    "type": "functionCallExpression",
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [
          Object {
            "key": "bgcolor",
            "value": Object {
              "name": "cLtPurple",
              "type": "identifier",
            },
          },
        ],
        "name": "NtHeader",
      },
    ],
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "IMAGE_NT_HEADERS",
    },
  },
  Object {
    "condition": Object {
      "left": Object {
        "type": "number",
        "value": 17744,
      },
      "operator": "!=",
      "right": Object {
        "expression": Object {
          "name": "NtHeader",
          "type": "identifier",
        },
        "name": "Signature",
        "type": "propertyAccessExpression",
      },
      "type": "binaryExpression",
    },
    "trueStatement": Object {
      "statements": Array [
        Object {
          "arguments": Array [
            Object {
              "string": "Invalid NT Signature 0x%x\\\\n",
              "type": "string",
            },
            Object {
              "expression": Object {
                "name": "NtHeader",
                "type": "identifier",
              },
              "name": "Signature",
              "type": "propertyAccessExpression",
            },
          ],
          "name": Object {
            "name": "Printf",
            "type": "identifier",
          },
          "type": "functionCallExpression",
        },
        Object {
          "assignmentExpression": Object {
            "type": "number",
            "value": 3,
          },
          "type": "returnStatement",
        },
      ],
      "type": "statementList",
    },
    "type": "ifStatement",
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [
          Object {
            "key": "bgcolor",
            "value": Object {
              "name": "cLtGray",
              "type": "identifier",
            },
          },
        ],
        "arraySelector": Object {
          "expression": Object {
            "expression": Object {
              "name": "NtHeader",
              "type": "identifier",
            },
            "name": "FileHeader",
            "type": "propertyAccessExpression",
          },
          "name": "NumberOfSections",
          "type": "propertyAccessExpression",
        },
        "name": "SectionHeaders",
      },
    ],
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "IMAGE_SECTION_HEADER",
    },
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [],
        "initializer": Object {
          "left": Object {
            "left": Object {
              "expression": Object {
                "name": "DosHeader",
                "type": "identifier",
              },
              "name": "AddressOfNewExeHeader",
              "type": "propertyAccessExpression",
            },
            "operator": "+",
            "right": Object {
              "operand": Object {
                "name": "NtHeader",
                "type": "identifier",
              },
              "type": "sizeofExpression",
            },
            "type": "binaryExpression",
          },
          "operator": "+",
          "right": Object {
            "left": Object {
              "expression": Object {
                "expression": Object {
                  "name": "NtHeader",
                  "type": "identifier",
                },
                "name": "FileHeader",
                "type": "propertyAccessExpression",
              },
              "name": "NumberOfSections",
              "type": "propertyAccessExpression",
            },
            "operator": "*",
            "right": Object {
              "operand": Object {
                "name": "IMAGE_SECTION_HEADER",
                "type": "identifier",
              },
              "type": "sizeofExpression",
            },
            "type": "binaryExpression",
          },
          "type": "binaryExpression",
        },
        "name": "ulRawHeaderSize",
      },
    ],
    "local": true,
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "ULONG",
    },
  },
  Object {
    "condition": Object {
      "left": Object {
        "left": Object {
          "expression": Object {
            "expression": Object {
              "name": "NtHeader",
              "type": "identifier",
            },
            "name": "OptionalHeader",
            "type": "propertyAccessExpression",
          },
          "name": "SizeOfHeaders",
          "type": "propertyAccessExpression",
        },
        "operator": "-",
        "right": Object {
          "name": "ulRawHeaderSize",
          "type": "identifier",
        },
        "type": "binaryExpression",
      },
      "operator": ">",
      "right": Object {
        "type": "number",
        "value": 0,
      },
      "type": "binaryExpression",
    },
    "trueStatement": Object {
      "statements": Array [
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [
                Object {
                  "key": "hidden",
                  "value": Object {
                    "type": "boolean",
                    "value": true,
                  },
                },
                Object {
                  "key": "fgcolor",
                  "value": Object {
                    "name": "cRed",
                    "type": "identifier",
                  },
                },
                Object {
                  "key": "comment",
                  "value": Object {
                    "string": "Space between header and first section",
                    "type": "string",
                  },
                },
              ],
              "arraySelector": Object {
                "left": Object {
                  "expression": Object {
                    "expression": Object {
                      "name": "NtHeader",
                      "type": "identifier",
                    },
                    "name": "OptionalHeader",
                    "type": "propertyAccessExpression",
                  },
                  "name": "SizeOfHeaders",
                  "type": "propertyAccessExpression",
                },
                "operator": "-",
                "right": Object {
                  "name": "ulRawHeaderSize",
                  "type": "identifier",
                },
                "type": "binaryExpression",
              },
              "name": "Space2",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "UCHAR",
          },
        },
      ],
      "type": "statementList",
    },
    "type": "ifStatement",
  },
  Object {
    "arguments": Array [
      Object {
        "string": "Space between headers and first sections is %d bytes\\\\n",
        "type": "string",
      },
      Object {
        "operand": Object {
          "name": "Space2",
          "type": "identifier",
        },
        "type": "sizeofExpression",
      },
    ],
    "name": Object {
      "name": "Printf",
      "type": "identifier",
    },
    "type": "functionCallExpression",
  },
  Object {
    "arguments": Array [
      Object {
        "expression": Object {
          "expression": Object {
            "name": "NtHeader",
            "type": "identifier",
          },
          "name": "OptionalHeader",
          "type": "propertyAccessExpression",
        },
        "name": "SizeOfHeaders",
        "type": "propertyAccessExpression",
      },
    ],
    "name": Object {
      "name": "FSeek",
      "type": "identifier",
    },
    "type": "functionCallExpression",
  },
  Object {
    "annotations": Array [],
    "declarations": Array [
      Object {
        "annotations": Array [],
        "initializer": Object {
          "type": "number",
          "value": 0,
        },
        "name": "ulIndex",
      },
    ],
    "local": true,
    "type": "variableDeclaration",
    "variableType": Object {
      "array": false,
      "name": "ULONG",
    },
  },
  Object {
    "body": Object {
      "statements": Array [
        Object {
          "condition": Object {
            "left": Object {
              "type": "number",
              "value": 0,
            },
            "operator": "==",
            "right": Object {
              "expression": Object {
                "expression": Object {
                  "name": "SectionHeaders",
                  "type": "identifier",
                },
                "index": Object {
                  "name": "ulIndex",
                  "type": "identifier",
                },
                "type": "arrayIndexExpression",
              },
              "name": "PointerToRawData",
              "type": "propertyAccessExpression",
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "name": "continue",
                "type": "identifier",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "condition": Object {
            "left": Object {
              "type": "number",
              "value": 0,
            },
            "operator": "==",
            "right": Object {
              "expression": Object {
                "expression": Object {
                  "name": "SectionHeaders",
                  "type": "identifier",
                },
                "index": Object {
                  "name": "ulIndex",
                  "type": "identifier",
                },
                "type": "arrayIndexExpression",
              },
              "name": "SizeOfRawData",
              "type": "propertyAccessExpression",
            },
            "type": "binaryExpression",
          },
          "trueStatement": Object {
            "statements": Array [
              Object {
                "name": "continue",
                "type": "identifier",
              },
            ],
            "type": "statementList",
          },
          "type": "ifStatement",
        },
        Object {
          "annotations": Array [],
          "declarations": Array [
            Object {
              "annotations": Array [],
              "arguments": Array [
                Object {
                  "expression": Object {
                    "name": "SectionHeaders",
                    "type": "identifier",
                  },
                  "index": Object {
                    "name": "ulIndex",
                    "type": "identifier",
                  },
                  "type": "arrayIndexExpression",
                },
              ],
              "name": "Section",
            },
          ],
          "type": "variableDeclaration",
          "variableType": Object {
            "array": false,
            "name": "IMAGE_SECTION_DATA",
          },
        },
      ],
      "type": "statementList",
    },
    "condition": Object {
      "left": Object {
        "name": "ulIndex",
        "type": "identifier",
      },
      "operator": "<",
      "right": Object {
        "expression": Object {
          "expression": Object {
            "name": "NtHeader",
            "type": "identifier",
          },
          "name": "FileHeader",
          "type": "propertyAccessExpression",
        },
        "name": "NumberOfSections",
        "type": "propertyAccessExpression",
      },
      "type": "binaryExpression",
    },
    "increment": Object {
      "expressions": Array [
        Object {
          "expression": Object {
            "name": "ulIndex",
            "type": "identifier",
          },
          "operator": "++",
          "type": "postfixExpression",
        },
      ],
      "type": "commaExpression",
    },
    "initialization": Object {
      "expressions": Array [
        Object {
          "left": Object {
            "name": "ulIndex",
            "type": "identifier",
          },
          "operator": "=",
          "right": Object {
            "type": "number",
            "value": 0,
          },
          "type": "binaryExpression",
        },
      ],
      "type": "commaExpression",
    },
    "type": "forStatement",
  },
  Object {
    "arguments": Array [
      Object {
        "expression": Object {
          "expression": Object {
            "name": "NtHeader",
            "type": "identifier",
          },
          "name": "OptionalHeader",
          "type": "propertyAccessExpression",
        },
        "name": "SizeOfHeaders",
        "type": "propertyAccessExpression",
      },
    ],
    "name": Object {
      "name": "FSeek",
      "type": "identifier",
    },
    "type": "functionCallExpression",
  },
  Object {
    "arguments": Array [],
    "name": Object {
      "name": "ParseEAT",
      "type": "identifier",
    },
    "type": "functionCallExpression",
  },
  Object {
    "arguments": Array [],
    "name": Object {
      "name": "ParseIAT",
      "type": "identifier",
    },
    "type": "functionCallExpression",
  },
  Object {
    "arguments": Array [],
    "name": Object {
      "name": "ParseResource",
      "type": "identifier",
    },
    "type": "functionCallExpression",
  },
  Object {
    "arguments": Array [],
    "name": Object {
      "name": "ParseException",
      "type": "identifier",
    },
    "type": "functionCallExpression",
  },
  Object {
    "arguments": Array [],
    "name": Object {
      "name": "ParseSecurity",
      "type": "identifier",
    },
    "type": "functionCallExpression",
  },
  Object {
    "arguments": Array [],
    "name": Object {
      "name": "ParseBaseReloc",
      "type": "identifier",
    },
    "type": "functionCallExpression",
  },
  Object {
    "arguments": Array [],
    "name": Object {
      "name": "ParseDebug",
      "type": "identifier",
    },
    "type": "functionCallExpression",
  },
  Object {
    "arguments": Array [],
    "name": Object {
      "name": "ParseTLS",
      "type": "identifier",
    },
    "type": "functionCallExpression",
  },
  Object {
    "arguments": Array [],
    "name": Object {
      "name": "ParseBoundImport",
      "type": "identifier",
    },
    "type": "functionCallExpression",
  },
  Object {
    "arguments": Array [],
    "name": Object {
      "name": "ParseDelayImport",
      "type": "identifier",
    },
    "type": "functionCallExpression",
  },
  Object {
    "arguments": Array [
      Object {
        "string": "EXE.bt finished\\\\n",
        "type": "string",
      },
    ],
    "name": Object {
      "name": "Printf",
      "type": "identifier",
    },
    "type": "functionCallExpression",
  },
]
`;

exports[`Sweetscape Importer creates basic definitions 1`] = `
Object {
  "content": Array [
    Object {
      "condition": Object {
        "left": Object {
          "left": Object {
            "left": Object {
              "name": "a",
              "type": "identifier",
            },
            "operator": "&&",
            "right": Object {
              "name": "b",
              "type": "identifier",
            },
            "type": "binaryExpression",
          },
          "operator": "||",
          "right": Object {
            "name": "c",
            "type": "identifier",
          },
          "type": "binaryExpression",
        },
        "operator": "||",
        "right": Object {
          "name": "d",
          "type": "identifier",
        },
        "type": "binaryExpression",
      },
      "trueStatement": Object {
        "statements": Array [
          Object {
            "arguments": Array [],
            "name": Object {
              "name": "foo",
              "type": "identifier",
            },
            "type": "functionCallExpression",
          },
        ],
        "type": "statementList",
      },
      "type": "ifStatement",
    },
  ],
  "type": "definition",
}
`;
