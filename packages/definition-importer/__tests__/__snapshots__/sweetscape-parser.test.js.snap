// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Sweetscape Parser parses complex expression (operator priority with cast) 1`] = `
Object {
  "ternaryExpression": Object {
    "booleanOrExpression": Object {
      "booleanAndExpression": Object {
        "binaryOrExpression": Object {
          "binaryXorExpression": Object {
            "binaryAndExpression": Object {
              "equalityExpression": Object {
                "relationalExpression": Object {
                  "shiftExpression": Object {
                    "additiveExpression": Object {
                      "additiveOperator": Object {
                        "Plus": Object {
                          "TOKEN": "Plus",
                          "content": "+",
                        },
                      },
                      "multiplicativeExpression": Array [
                        Object {
                          "castExpression": Object {
                            "castOperation": Object {
                              "ParenthesisClose": Object {
                                "TOKEN": "ParenthesisClose",
                                "content": ")",
                              },
                              "ParenthesisOpen": Object {
                                "TOKEN": "ParenthesisOpen",
                                "content": "(",
                              },
                              "prefixExpression": Object {
                                "postfixExpression": Object {
                                  "callExpression": Object {
                                    "callExpressionRest": Object {
                                      "arguments": Object {
                                        "ParenthesisClose": Object {
                                          "TOKEN": "ParenthesisClose",
                                          "content": ")",
                                        },
                                        "ParenthesisOpen": Object {
                                          "TOKEN": "ParenthesisOpen",
                                          "content": "(",
                                        },
                                        "assignmentExpression": Object {
                                          "ternaryExpression": Object {
                                            "booleanOrExpression": Object {
                                              "booleanAndExpression": Object {
                                                "binaryOrExpression": Object {
                                                  "binaryXorExpression": Object {
                                                    "binaryAndExpression": Object {
                                                      "equalityExpression": Object {
                                                        "relationalExpression": Object {
                                                          "shiftExpression": Object {
                                                            "additiveExpression": Object {
                                                              "multiplicativeExpression": Object {
                                                                "castExpression": Object {
                                                                  "prefixExpression": Object {
                                                                    "postfixExpression": Object {
                                                                      "callExpression": Object {
                                                                        "memberExpression": Object {
                                                                          "primaryExpression": Object {
                                                                            "simpleValue": Object {
                                                                              "Identifier": Object {
                                                                                "TOKEN": "Identifier",
                                                                                "content": "a",
                                                                              },
                                                                            },
                                                                          },
                                                                        },
                                                                      },
                                                                    },
                                                                  },
                                                                },
                                                              },
                                                            },
                                                          },
                                                        },
                                                      },
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                    "memberExpression": Object {
                                      "primaryExpression": Object {
                                        "simpleValue": Object {
                                          "Identifier": Object {
                                            "TOKEN": "Identifier",
                                            "content": "fn",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                              "typeNameWithoutVoid": Object {
                                "Identifier": Object {
                                  "TOKEN": "Identifier",
                                  "content": "int",
                                },
                              },
                            },
                          },
                        },
                        Object {
                          "castExpression": Object {
                            "prefixExpression": Object {
                              "postfixExpression": Object {
                                "callExpression": Object {
                                  "memberExpression": Object {
                                    "primaryExpression": Object {
                                      "simpleValue": Object {
                                        "number": Object {
                                          "NumberDecimalLiteral": Object {
                                            "TOKEN": "NumberDecimalLiteral",
                                            "content": "1",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      ],
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses complex expression (operator priority with parenthesis and cast) 1`] = `
Object {
  "ternaryExpression": Object {
    "booleanOrExpression": Object {
      "booleanAndExpression": Object {
        "binaryOrExpression": Object {
          "binaryXorExpression": Object {
            "binaryAndExpression": Object {
              "equalityExpression": Object {
                "relationalExpression": Object {
                  "shiftExpression": Object {
                    "additiveExpression": Object {
                      "additiveOperator": Object {
                        "Plus": Object {
                          "TOKEN": "Plus",
                          "content": "+",
                        },
                      },
                      "multiplicativeExpression": Array [
                        Object {
                          "castExpression": Object {
                            "castOperation": Object {
                              "ParenthesisClose": Object {
                                "TOKEN": "ParenthesisClose",
                                "content": ")",
                              },
                              "ParenthesisOpen": Object {
                                "TOKEN": "ParenthesisOpen",
                                "content": "(",
                              },
                              "prefixExpression": Object {
                                "postfixExpression": Object {
                                  "callExpression": Object {
                                    "memberExpression": Object {
                                      "primaryExpression": Object {
                                        "ParenthesisClose": Object {
                                          "TOKEN": "ParenthesisClose",
                                          "content": ")",
                                        },
                                        "ParenthesisOpen": Object {
                                          "TOKEN": "ParenthesisOpen",
                                          "content": "(",
                                        },
                                        "assignmentExpression": Object {
                                          "ternaryExpression": Object {
                                            "booleanOrExpression": Object {
                                              "booleanAndExpression": Object {
                                                "binaryOrExpression": Object {
                                                  "binaryXorExpression": Object {
                                                    "binaryAndExpression": Object {
                                                      "equalityExpression": Object {
                                                        "relationalExpression": Object {
                                                          "shiftExpression": Object {
                                                            "additiveExpression": Object {
                                                              "multiplicativeExpression": Object {
                                                                "castExpression": Array [
                                                                  Object {
                                                                    "prefixExpression": Object {
                                                                      "postfixExpression": Object {
                                                                        "callExpression": Object {
                                                                          "memberExpression": Object {
                                                                            "primaryExpression": Object {
                                                                              "simpleValue": Object {
                                                                                "Identifier": Object {
                                                                                  "TOKEN": "Identifier",
                                                                                  "content": "a",
                                                                                },
                                                                              },
                                                                            },
                                                                          },
                                                                        },
                                                                      },
                                                                    },
                                                                  },
                                                                  Object {
                                                                    "prefixExpression": Object {
                                                                      "postfixExpression": Object {
                                                                        "callExpression": Object {
                                                                          "memberExpression": Object {
                                                                            "primaryExpression": Object {
                                                                              "simpleValue": Object {
                                                                                "Identifier": Object {
                                                                                  "TOKEN": "Identifier",
                                                                                  "content": "b",
                                                                                },
                                                                              },
                                                                            },
                                                                          },
                                                                        },
                                                                      },
                                                                    },
                                                                  },
                                                                ],
                                                                "multiplicativeOperator": Object {
                                                                  "Multiplication": Object {
                                                                    "TOKEN": "Multiplication",
                                                                    "content": "*",
                                                                  },
                                                                },
                                                              },
                                                            },
                                                          },
                                                        },
                                                      },
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                              "typeNameWithoutVoid": Object {
                                "Identifier": Object {
                                  "TOKEN": "Identifier",
                                  "content": "int",
                                },
                              },
                            },
                          },
                        },
                        Object {
                          "castExpression": Object {
                            "prefixExpression": Object {
                              "postfixExpression": Object {
                                "callExpression": Object {
                                  "memberExpression": Object {
                                    "primaryExpression": Object {
                                      "simpleValue": Object {
                                        "Identifier": Object {
                                          "TOKEN": "Identifier",
                                          "content": "c",
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      ],
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses complex expression (operator priority with parenthesis) 1`] = `
Object {
  "ternaryExpression": Object {
    "booleanOrExpression": Object {
      "booleanAndExpression": Object {
        "binaryOrExpression": Object {
          "binaryXorExpression": Object {
            "binaryAndExpression": Object {
              "equalityExpression": Object {
                "relationalExpression": Object {
                  "shiftExpression": Object {
                    "additiveExpression": Object {
                      "additiveOperator": Object {
                        "Plus": Object {
                          "TOKEN": "Plus",
                          "content": "+",
                        },
                      },
                      "multiplicativeExpression": Array [
                        Object {
                          "castExpression": Object {
                            "prefixExpression": Object {
                              "postfixExpression": Object {
                                "callExpression": Object {
                                  "memberExpression": Object {
                                    "primaryExpression": Object {
                                      "ParenthesisClose": Object {
                                        "TOKEN": "ParenthesisClose",
                                        "content": ")",
                                      },
                                      "ParenthesisOpen": Object {
                                        "TOKEN": "ParenthesisOpen",
                                        "content": "(",
                                      },
                                      "assignmentExpression": Object {
                                        "ternaryExpression": Object {
                                          "booleanOrExpression": Object {
                                            "booleanAndExpression": Object {
                                              "binaryOrExpression": Object {
                                                "binaryXorExpression": Object {
                                                  "binaryAndExpression": Object {
                                                    "equalityExpression": Object {
                                                      "relationalExpression": Object {
                                                        "shiftExpression": Object {
                                                          "additiveExpression": Object {
                                                            "multiplicativeExpression": Object {
                                                              "castExpression": Array [
                                                                Object {
                                                                  "prefixExpression": Object {
                                                                    "postfixExpression": Object {
                                                                      "callExpression": Object {
                                                                        "memberExpression": Object {
                                                                          "primaryExpression": Object {
                                                                            "simpleValue": Object {
                                                                              "Identifier": Object {
                                                                                "TOKEN": "Identifier",
                                                                                "content": "a",
                                                                              },
                                                                            },
                                                                          },
                                                                        },
                                                                      },
                                                                    },
                                                                  },
                                                                },
                                                                Object {
                                                                  "prefixExpression": Object {
                                                                    "postfixExpression": Object {
                                                                      "callExpression": Object {
                                                                        "memberExpression": Object {
                                                                          "primaryExpression": Object {
                                                                            "simpleValue": Object {
                                                                              "Identifier": Object {
                                                                                "TOKEN": "Identifier",
                                                                                "content": "b",
                                                                              },
                                                                            },
                                                                          },
                                                                        },
                                                                      },
                                                                    },
                                                                  },
                                                                },
                                                              ],
                                                              "multiplicativeOperator": Object {
                                                                "Multiplication": Object {
                                                                  "TOKEN": "Multiplication",
                                                                  "content": "*",
                                                                },
                                                              },
                                                            },
                                                          },
                                                        },
                                                      },
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                        Object {
                          "castExpression": Object {
                            "prefixExpression": Object {
                              "postfixExpression": Object {
                                "callExpression": Object {
                                  "memberExpression": Object {
                                    "primaryExpression": Object {
                                      "simpleValue": Object {
                                        "Identifier": Object {
                                          "TOKEN": "Identifier",
                                          "content": "c",
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      ],
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses complex expression (operator priority) 1`] = `
Object {
  "ternaryExpression": Object {
    "booleanOrExpression": Object {
      "booleanAndExpression": Object {
        "binaryOrExpression": Object {
          "binaryXorExpression": Object {
            "binaryAndExpression": Object {
              "equalityExpression": Object {
                "relationalExpression": Object {
                  "shiftExpression": Object {
                    "additiveExpression": Object {
                      "additiveOperator": Object {
                        "Plus": Object {
                          "TOKEN": "Plus",
                          "content": "+",
                        },
                      },
                      "multiplicativeExpression": Array [
                        Object {
                          "castExpression": Array [
                            Object {
                              "prefixExpression": Object {
                                "postfixExpression": Object {
                                  "callExpression": Object {
                                    "memberExpression": Object {
                                      "primaryExpression": Object {
                                        "simpleValue": Object {
                                          "Identifier": Object {
                                            "TOKEN": "Identifier",
                                            "content": "a",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                            Object {
                              "prefixExpression": Object {
                                "postfixExpression": Object {
                                  "callExpression": Object {
                                    "memberExpression": Object {
                                      "primaryExpression": Object {
                                        "simpleValue": Object {
                                          "Identifier": Object {
                                            "TOKEN": "Identifier",
                                            "content": "b",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          ],
                          "multiplicativeOperator": Object {
                            "Multiplication": Object {
                              "TOKEN": "Multiplication",
                              "content": "*",
                            },
                          },
                        },
                        Object {
                          "castExpression": Object {
                            "prefixExpression": Object {
                              "postfixExpression": Object {
                                "callExpression": Object {
                                  "memberExpression": Object {
                                    "primaryExpression": Object {
                                      "simpleValue": Object {
                                        "Identifier": Object {
                                          "TOKEN": "Identifier",
                                          "content": "c",
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      ],
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses complex expression (or-and mixed) 1`] = `
Object {
  "ternaryExpression": Object {
    "booleanOrExpression": Object {
      "BooleanOr": Array [
        Object {
          "TOKEN": "BooleanOr",
          "content": "||",
        },
        Object {
          "TOKEN": "BooleanOr",
          "content": "||",
        },
      ],
      "booleanAndExpression": Array [
        Object {
          "BooleanAnd": Object {
            "TOKEN": "BooleanAnd",
            "content": "&&",
          },
          "binaryOrExpression": Array [
            Object {
              "binaryXorExpression": Object {
                "binaryAndExpression": Object {
                  "equalityExpression": Object {
                    "relationalExpression": Object {
                      "shiftExpression": Object {
                        "additiveExpression": Object {
                          "multiplicativeExpression": Object {
                            "castExpression": Object {
                              "prefixExpression": Object {
                                "postfixExpression": Object {
                                  "callExpression": Object {
                                    "memberExpression": Object {
                                      "primaryExpression": Object {
                                        "simpleValue": Object {
                                          "Identifier": Object {
                                            "TOKEN": "Identifier",
                                            "content": "a",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
            Object {
              "binaryXorExpression": Object {
                "binaryAndExpression": Object {
                  "equalityExpression": Object {
                    "relationalExpression": Object {
                      "shiftExpression": Object {
                        "additiveExpression": Object {
                          "multiplicativeExpression": Object {
                            "castExpression": Object {
                              "prefixExpression": Object {
                                "postfixExpression": Object {
                                  "callExpression": Object {
                                    "memberExpression": Object {
                                      "primaryExpression": Object {
                                        "simpleValue": Object {
                                          "Identifier": Object {
                                            "TOKEN": "Identifier",
                                            "content": "b",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          ],
        },
        Object {
          "binaryOrExpression": Object {
            "binaryXorExpression": Object {
              "binaryAndExpression": Object {
                "equalityExpression": Object {
                  "relationalExpression": Object {
                    "shiftExpression": Object {
                      "additiveExpression": Object {
                        "multiplicativeExpression": Object {
                          "castExpression": Object {
                            "prefixExpression": Object {
                              "postfixExpression": Object {
                                "callExpression": Object {
                                  "memberExpression": Object {
                                    "primaryExpression": Object {
                                      "simpleValue": Object {
                                        "Identifier": Object {
                                          "TOKEN": "Identifier",
                                          "content": "c",
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
        Object {
          "binaryOrExpression": Object {
            "binaryXorExpression": Object {
              "binaryAndExpression": Object {
                "equalityExpression": Object {
                  "relationalExpression": Object {
                    "shiftExpression": Object {
                      "additiveExpression": Object {
                        "multiplicativeExpression": Object {
                          "castExpression": Object {
                            "prefixExpression": Object {
                              "postfixExpression": Object {
                                "callExpression": Object {
                                  "memberExpression": Object {
                                    "primaryExpression": Object {
                                      "simpleValue": Object {
                                        "Identifier": Object {
                                          "TOKEN": "Identifier",
                                          "content": "d",
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      ],
    },
  },
}
`;

exports[`Sweetscape Parser parses expression (assignment) 1`] = `
Object {
  "assignmentOperator": Object {
    "Equals": Object {
      "TOKEN": "Equals",
      "content": "=",
    },
  },
  "ternaryExpression": Array [
    Object {
      "booleanOrExpression": Object {
        "booleanAndExpression": Object {
          "binaryOrExpression": Object {
            "binaryXorExpression": Object {
              "binaryAndExpression": Object {
                "equalityExpression": Object {
                  "relationalExpression": Object {
                    "shiftExpression": Object {
                      "additiveExpression": Object {
                        "multiplicativeExpression": Object {
                          "castExpression": Object {
                            "prefixExpression": Object {
                              "postfixExpression": Object {
                                "callExpression": Object {
                                  "memberExpression": Object {
                                    "primaryExpression": Object {
                                      "simpleValue": Object {
                                        "Identifier": Object {
                                          "TOKEN": "Identifier",
                                          "content": "a",
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    Object {
      "booleanOrExpression": Object {
        "booleanAndExpression": Object {
          "binaryOrExpression": Object {
            "binaryXorExpression": Object {
              "binaryAndExpression": Object {
                "equalityExpression": Object {
                  "relationalExpression": Object {
                    "shiftExpression": Object {
                      "additiveExpression": Object {
                        "multiplicativeExpression": Object {
                          "castExpression": Object {
                            "prefixExpression": Object {
                              "postfixExpression": Object {
                                "callExpression": Object {
                                  "memberExpression": Object {
                                    "primaryExpression": Object {
                                      "simpleValue": Object {
                                        "Identifier": Object {
                                          "TOKEN": "Identifier",
                                          "content": "b",
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  ],
}
`;

exports[`Sweetscape Parser parses expression (binary number) 1`] = `
Object {
  "ternaryExpression": Object {
    "booleanOrExpression": Object {
      "booleanAndExpression": Object {
        "binaryOrExpression": Object {
          "binaryXorExpression": Object {
            "binaryAndExpression": Object {
              "equalityExpression": Object {
                "relationalExpression": Object {
                  "shiftExpression": Object {
                    "additiveExpression": Object {
                      "multiplicativeExpression": Object {
                        "castExpression": Object {
                          "prefixExpression": Object {
                            "postfixExpression": Object {
                              "callExpression": Object {
                                "memberExpression": Object {
                                  "primaryExpression": Object {
                                    "simpleValue": Object {
                                      "number": Object {
                                        "NumberBinaryLiteral": Object {
                                          "TOKEN": "NumberBinaryLiteral",
                                          "content": "0b10",
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses expression (cast) 1`] = `
Object {
  "ternaryExpression": Object {
    "booleanOrExpression": Object {
      "booleanAndExpression": Object {
        "binaryOrExpression": Object {
          "binaryXorExpression": Object {
            "binaryAndExpression": Object {
              "equalityExpression": Object {
                "relationalExpression": Object {
                  "shiftExpression": Object {
                    "additiveExpression": Object {
                      "multiplicativeExpression": Object {
                        "castExpression": Object {
                          "castOperation": Object {
                            "ParenthesisClose": Object {
                              "TOKEN": "ParenthesisClose",
                              "content": ")",
                            },
                            "ParenthesisOpen": Object {
                              "TOKEN": "ParenthesisOpen",
                              "content": "(",
                            },
                            "prefixExpression": Object {
                              "postfixExpression": Object {
                                "callExpression": Object {
                                  "memberExpression": Object {
                                    "primaryExpression": Object {
                                      "simpleValue": Object {
                                        "Identifier": Object {
                                          "TOKEN": "Identifier",
                                          "content": "b",
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                            "typeNameWithoutVoid": Object {
                              "Identifier": Object {
                                "TOKEN": "Identifier",
                                "content": "int",
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses expression (decimal number) 1`] = `
Object {
  "ternaryExpression": Object {
    "booleanOrExpression": Object {
      "booleanAndExpression": Object {
        "binaryOrExpression": Object {
          "binaryXorExpression": Object {
            "binaryAndExpression": Object {
              "equalityExpression": Object {
                "relationalExpression": Object {
                  "shiftExpression": Object {
                    "additiveExpression": Object {
                      "multiplicativeExpression": Object {
                        "castExpression": Object {
                          "prefixExpression": Object {
                            "postfixExpression": Object {
                              "callExpression": Object {
                                "memberExpression": Object {
                                  "primaryExpression": Object {
                                    "simpleValue": Object {
                                      "number": Object {
                                        "NumberDecimalLiteral": Object {
                                          "TOKEN": "NumberDecimalLiteral",
                                          "content": "10",
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses expression (function call) 1`] = `
Object {
  "ternaryExpression": Object {
    "booleanOrExpression": Object {
      "booleanAndExpression": Object {
        "binaryOrExpression": Object {
          "binaryXorExpression": Object {
            "binaryAndExpression": Object {
              "equalityExpression": Object {
                "relationalExpression": Object {
                  "shiftExpression": Object {
                    "additiveExpression": Object {
                      "multiplicativeExpression": Object {
                        "castExpression": Object {
                          "prefixExpression": Object {
                            "postfixExpression": Object {
                              "callExpression": Object {
                                "callExpressionRest": Object {
                                  "arguments": Object {
                                    "Comma": Object {
                                      "TOKEN": "Comma",
                                      "content": ",",
                                    },
                                    "ParenthesisClose": Object {
                                      "TOKEN": "ParenthesisClose",
                                      "content": ")",
                                    },
                                    "ParenthesisOpen": Object {
                                      "TOKEN": "ParenthesisOpen",
                                      "content": "(",
                                    },
                                    "assignmentExpression": Array [
                                      Object {
                                        "ternaryExpression": Object {
                                          "booleanOrExpression": Object {
                                            "booleanAndExpression": Object {
                                              "binaryOrExpression": Object {
                                                "binaryXorExpression": Object {
                                                  "binaryAndExpression": Object {
                                                    "equalityExpression": Object {
                                                      "relationalExpression": Object {
                                                        "shiftExpression": Object {
                                                          "additiveExpression": Object {
                                                            "multiplicativeExpression": Object {
                                                              "castExpression": Object {
                                                                "prefixExpression": Object {
                                                                  "postfixExpression": Object {
                                                                    "callExpression": Object {
                                                                      "memberExpression": Object {
                                                                        "primaryExpression": Object {
                                                                          "simpleValue": Object {
                                                                            "number": Object {
                                                                              "NumberDecimalLiteral": Object {
                                                                                "TOKEN": "NumberDecimalLiteral",
                                                                                "content": "1",
                                                                              },
                                                                            },
                                                                          },
                                                                        },
                                                                      },
                                                                    },
                                                                  },
                                                                },
                                                              },
                                                            },
                                                          },
                                                        },
                                                      },
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                      Object {
                                        "ternaryExpression": Object {
                                          "booleanOrExpression": Object {
                                            "booleanAndExpression": Object {
                                              "binaryOrExpression": Object {
                                                "binaryXorExpression": Object {
                                                  "binaryAndExpression": Object {
                                                    "equalityExpression": Object {
                                                      "relationalExpression": Object {
                                                        "shiftExpression": Object {
                                                          "additiveExpression": Object {
                                                            "multiplicativeExpression": Object {
                                                              "castExpression": Object {
                                                                "prefixExpression": Object {
                                                                  "postfixExpression": Object {
                                                                    "callExpression": Object {
                                                                      "memberExpression": Object {
                                                                        "primaryExpression": Object {
                                                                          "simpleValue": Object {
                                                                            "number": Object {
                                                                              "NumberDecimalLiteral": Object {
                                                                                "TOKEN": "NumberDecimalLiteral",
                                                                                "content": "2",
                                                                              },
                                                                            },
                                                                          },
                                                                        },
                                                                      },
                                                                    },
                                                                  },
                                                                },
                                                              },
                                                            },
                                                          },
                                                        },
                                                      },
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    ],
                                  },
                                },
                                "memberExpression": Object {
                                  "primaryExpression": Object {
                                    "simpleValue": Object {
                                      "Identifier": Object {
                                        "TOKEN": "Identifier",
                                        "content": "a",
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses expression (hex number 1) 1`] = `
Object {
  "ternaryExpression": Object {
    "booleanOrExpression": Object {
      "booleanAndExpression": Object {
        "binaryOrExpression": Object {
          "binaryXorExpression": Object {
            "binaryAndExpression": Object {
              "equalityExpression": Object {
                "relationalExpression": Object {
                  "shiftExpression": Object {
                    "additiveExpression": Object {
                      "multiplicativeExpression": Object {
                        "castExpression": Object {
                          "prefixExpression": Object {
                            "postfixExpression": Object {
                              "callExpression": Object {
                                "memberExpression": Object {
                                  "primaryExpression": Object {
                                    "simpleValue": Object {
                                      "number": Object {
                                        "NumberHexadecimalLiteral": Object {
                                          "TOKEN": "NumberHexadecimalLiteral",
                                          "content": "0x20",
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses expression (hex number 2) 1`] = `
Object {
  "ternaryExpression": Object {
    "booleanOrExpression": Object {
      "booleanAndExpression": Object {
        "binaryOrExpression": Object {
          "binaryXorExpression": Object {
            "binaryAndExpression": Object {
              "equalityExpression": Object {
                "relationalExpression": Object {
                  "shiftExpression": Object {
                    "additiveExpression": Object {
                      "multiplicativeExpression": Object {
                        "castExpression": Object {
                          "prefixExpression": Object {
                            "postfixExpression": Object {
                              "callExpression": Object {
                                "memberExpression": Object {
                                  "primaryExpression": Object {
                                    "simpleValue": Object {
                                      "number": Object {
                                        "NumberHexadecimalLiteral2": Object {
                                          "TOKEN": "NumberHexadecimalLiteral2",
                                          "content": "20h",
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses expression (infixOperation) 1`] = `
Object {
  "ternaryExpression": Object {
    "booleanOrExpression": Object {
      "booleanAndExpression": Object {
        "binaryOrExpression": Object {
          "binaryXorExpression": Object {
            "binaryAndExpression": Object {
              "equalityExpression": Object {
                "relationalExpression": Object {
                  "shiftExpression": Object {
                    "additiveExpression": Object {
                      "additiveOperator": Object {
                        "Plus": Object {
                          "TOKEN": "Plus",
                          "content": "+",
                        },
                      },
                      "multiplicativeExpression": Array [
                        Object {
                          "castExpression": Object {
                            "prefixExpression": Object {
                              "postfixExpression": Object {
                                "callExpression": Object {
                                  "memberExpression": Object {
                                    "primaryExpression": Object {
                                      "simpleValue": Object {
                                        "Identifier": Object {
                                          "TOKEN": "Identifier",
                                          "content": "a",
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                        Object {
                          "castExpression": Object {
                            "prefixExpression": Object {
                              "postfixExpression": Object {
                                "callExpression": Object {
                                  "memberExpression": Object {
                                    "primaryExpression": Object {
                                      "simpleValue": Object {
                                        "Identifier": Object {
                                          "TOKEN": "Identifier",
                                          "content": "b",
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      ],
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses expression (octal number) 1`] = `
Object {
  "ternaryExpression": Object {
    "booleanOrExpression": Object {
      "booleanAndExpression": Object {
        "binaryOrExpression": Object {
          "binaryXorExpression": Object {
            "binaryAndExpression": Object {
              "equalityExpression": Object {
                "relationalExpression": Object {
                  "shiftExpression": Object {
                    "additiveExpression": Object {
                      "multiplicativeExpression": Object {
                        "castExpression": Object {
                          "prefixExpression": Object {
                            "postfixExpression": Object {
                              "callExpression": Object {
                                "memberExpression": Object {
                                  "primaryExpression": Object {
                                    "simpleValue": Object {
                                      "number": Object {
                                        "NumberOctalLiteral": Object {
                                          "TOKEN": "NumberOctalLiteral",
                                          "content": "045",
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses expression (parenthesized expression) 1`] = `
Object {
  "ternaryExpression": Object {
    "booleanOrExpression": Object {
      "booleanAndExpression": Object {
        "binaryOrExpression": Object {
          "binaryXorExpression": Object {
            "binaryAndExpression": Object {
              "equalityExpression": Object {
                "relationalExpression": Object {
                  "shiftExpression": Object {
                    "additiveExpression": Object {
                      "multiplicativeExpression": Object {
                        "castExpression": Object {
                          "prefixExpression": Object {
                            "postfixExpression": Object {
                              "callExpression": Object {
                                "memberExpression": Object {
                                  "primaryExpression": Object {
                                    "ParenthesisClose": Object {
                                      "TOKEN": "ParenthesisClose",
                                      "content": ")",
                                    },
                                    "ParenthesisOpen": Object {
                                      "TOKEN": "ParenthesisOpen",
                                      "content": "(",
                                    },
                                    "assignmentExpression": Object {
                                      "ternaryExpression": Object {
                                        "booleanOrExpression": Object {
                                          "booleanAndExpression": Object {
                                            "binaryOrExpression": Object {
                                              "binaryXorExpression": Object {
                                                "binaryAndExpression": Object {
                                                  "equalityExpression": Object {
                                                    "relationalExpression": Object {
                                                      "shiftExpression": Object {
                                                        "additiveExpression": Object {
                                                          "additiveOperator": Object {
                                                            "Plus": Object {
                                                              "TOKEN": "Plus",
                                                              "content": "+",
                                                            },
                                                          },
                                                          "multiplicativeExpression": Array [
                                                            Object {
                                                              "castExpression": Object {
                                                                "prefixExpression": Object {
                                                                  "postfixExpression": Object {
                                                                    "callExpression": Object {
                                                                      "memberExpression": Object {
                                                                        "primaryExpression": Object {
                                                                          "simpleValue": Object {
                                                                            "Identifier": Object {
                                                                              "TOKEN": "Identifier",
                                                                              "content": "a",
                                                                            },
                                                                          },
                                                                        },
                                                                      },
                                                                    },
                                                                  },
                                                                },
                                                              },
                                                            },
                                                            Object {
                                                              "castExpression": Object {
                                                                "prefixExpression": Object {
                                                                  "postfixExpression": Object {
                                                                    "callExpression": Object {
                                                                      "memberExpression": Object {
                                                                        "primaryExpression": Object {
                                                                          "simpleValue": Object {
                                                                            "Identifier": Object {
                                                                              "TOKEN": "Identifier",
                                                                              "content": "b",
                                                                            },
                                                                          },
                                                                        },
                                                                      },
                                                                    },
                                                                  },
                                                                },
                                                              },
                                                            },
                                                          ],
                                                        },
                                                      },
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses expression (postfixOperation) 1`] = `
Object {
  "ternaryExpression": Object {
    "booleanOrExpression": Object {
      "booleanAndExpression": Object {
        "binaryOrExpression": Object {
          "binaryXorExpression": Object {
            "binaryAndExpression": Object {
              "equalityExpression": Object {
                "relationalExpression": Object {
                  "shiftExpression": Object {
                    "additiveExpression": Object {
                      "multiplicativeExpression": Object {
                        "castExpression": Object {
                          "prefixExpression": Object {
                            "postfixExpression": Object {
                              "callExpression": Object {
                                "memberExpression": Object {
                                  "primaryExpression": Object {
                                    "simpleValue": Object {
                                      "Identifier": Object {
                                        "TOKEN": "Identifier",
                                        "content": "a",
                                      },
                                    },
                                  },
                                },
                              },
                              "postfixOperator": Object {
                                "DoublePlus": Object {
                                  "TOKEN": "DoublePlus",
                                  "content": "++",
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses expression (prefixOperation) 1`] = `
Object {
  "ternaryExpression": Object {
    "booleanOrExpression": Object {
      "booleanAndExpression": Object {
        "binaryOrExpression": Object {
          "binaryXorExpression": Object {
            "binaryAndExpression": Object {
              "equalityExpression": Object {
                "relationalExpression": Object {
                  "shiftExpression": Object {
                    "additiveExpression": Object {
                      "multiplicativeExpression": Object {
                        "castExpression": Object {
                          "prefixExpression": Object {
                            "castExpression": Object {
                              "prefixExpression": Object {
                                "postfixExpression": Object {
                                  "callExpression": Object {
                                    "memberExpression": Object {
                                      "primaryExpression": Object {
                                        "simpleValue": Object {
                                          "Identifier": Object {
                                            "TOKEN": "Identifier",
                                            "content": "a",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                            "unaryOperator": Object {
                              "Exclamation": Object {
                                "TOKEN": "Exclamation",
                                "content": "!",
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses expression (selector) 1`] = `
Object {
  "ternaryExpression": Object {
    "booleanOrExpression": Object {
      "booleanAndExpression": Object {
        "binaryOrExpression": Object {
          "binaryXorExpression": Object {
            "binaryAndExpression": Object {
              "equalityExpression": Object {
                "relationalExpression": Object {
                  "shiftExpression": Object {
                    "additiveExpression": Object {
                      "multiplicativeExpression": Object {
                        "castExpression": Object {
                          "prefixExpression": Object {
                            "postfixExpression": Object {
                              "callExpression": Object {
                                "memberExpression": Object {
                                  "memberExpressionRest": Array [
                                    Object {
                                      "propertyAccess": Object {
                                        "Identifier": Object {
                                          "TOKEN": "Identifier",
                                          "content": "b",
                                        },
                                        "Period": Object {
                                          "TOKEN": "Period",
                                          "content": ".",
                                        },
                                      },
                                    },
                                    Object {
                                      "arraySelector": Object {
                                        "BracketClose": Object {
                                          "TOKEN": "BracketClose",
                                          "content": "]",
                                        },
                                        "BracketOpen": Object {
                                          "TOKEN": "BracketOpen",
                                          "content": "[",
                                        },
                                        "assignmentExpression": Object {
                                          "ternaryExpression": Object {
                                            "booleanOrExpression": Object {
                                              "booleanAndExpression": Object {
                                                "binaryOrExpression": Object {
                                                  "binaryXorExpression": Object {
                                                    "binaryAndExpression": Object {
                                                      "equalityExpression": Object {
                                                        "relationalExpression": Object {
                                                          "shiftExpression": Object {
                                                            "additiveExpression": Object {
                                                              "multiplicativeExpression": Object {
                                                                "castExpression": Object {
                                                                  "prefixExpression": Object {
                                                                    "postfixExpression": Object {
                                                                      "callExpression": Object {
                                                                        "memberExpression": Object {
                                                                          "primaryExpression": Object {
                                                                            "simpleValue": Object {
                                                                              "Identifier": Object {
                                                                                "TOKEN": "Identifier",
                                                                                "content": "c",
                                                                              },
                                                                            },
                                                                          },
                                                                        },
                                                                      },
                                                                    },
                                                                  },
                                                                },
                                                              },
                                                            },
                                                          },
                                                        },
                                                      },
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  ],
                                  "primaryExpression": Object {
                                    "simpleValue": Object {
                                      "Identifier": Object {
                                        "TOKEN": "Identifier",
                                        "content": "a",
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses expression (sizeof expression) 1`] = `
Object {
  "ternaryExpression": Object {
    "booleanOrExpression": Object {
      "booleanAndExpression": Object {
        "binaryOrExpression": Object {
          "binaryXorExpression": Object {
            "binaryAndExpression": Object {
              "equalityExpression": Object {
                "relationalExpression": Object {
                  "shiftExpression": Object {
                    "additiveExpression": Object {
                      "multiplicativeExpression": Object {
                        "castExpression": Object {
                          "prefixExpression": Object {
                            "postfixExpression": Object {
                              "callExpression": Object {
                                "memberExpression": Object {
                                  "primaryExpression": Object {
                                    "ParenthesisClose": Object {
                                      "TOKEN": "ParenthesisClose",
                                      "content": ")",
                                    },
                                    "ParenthesisOpen": Object {
                                      "TOKEN": "ParenthesisOpen",
                                      "content": "(",
                                    },
                                    "Sizeof": Object {
                                      "TOKEN": "Sizeof",
                                      "content": "sizeof",
                                    },
                                    "expressionOrTypeName": Object {
                                      "assignmentExpression": Object {
                                        "ternaryExpression": Object {
                                          "booleanOrExpression": Object {
                                            "booleanAndExpression": Object {
                                              "binaryOrExpression": Object {
                                                "binaryXorExpression": Object {
                                                  "binaryAndExpression": Object {
                                                    "equalityExpression": Object {
                                                      "relationalExpression": Object {
                                                        "shiftExpression": Object {
                                                          "additiveExpression": Object {
                                                            "multiplicativeExpression": Object {
                                                              "castExpression": Object {
                                                                "prefixExpression": Object {
                                                                  "postfixExpression": Object {
                                                                    "callExpression": Object {
                                                                      "memberExpression": Object {
                                                                        "memberExpressionRest": Object {
                                                                          "arraySelector": Object {
                                                                            "BracketClose": Object {
                                                                              "TOKEN": "BracketClose",
                                                                              "content": "]",
                                                                            },
                                                                            "BracketOpen": Object {
                                                                              "TOKEN": "BracketOpen",
                                                                              "content": "[",
                                                                            },
                                                                            "assignmentExpression": Object {
                                                                              "ternaryExpression": Object {
                                                                                "booleanOrExpression": Object {
                                                                                  "booleanAndExpression": Object {
                                                                                    "binaryOrExpression": Object {
                                                                                      "binaryXorExpression": Object {
                                                                                        "binaryAndExpression": Object {
                                                                                          "equalityExpression": Object {
                                                                                            "relationalExpression": Object {
                                                                                              "shiftExpression": Object {
                                                                                                "additiveExpression": Object {
                                                                                                  "multiplicativeExpression": Object {
                                                                                                    "castExpression": Object {
                                                                                                      "prefixExpression": Object {
                                                                                                        "postfixExpression": Object {
                                                                                                          "callExpression": Object {
                                                                                                            "memberExpression": Object {
                                                                                                              "primaryExpression": Object {
                                                                                                                "simpleValue": Object {
                                                                                                                  "number": Object {
                                                                                                                    "NumberDecimalLiteral": Object {
                                                                                                                      "TOKEN": "NumberDecimalLiteral",
                                                                                                                      "content": "0",
                                                                                                                    },
                                                                                                                  },
                                                                                                                },
                                                                                                              },
                                                                                                            },
                                                                                                          },
                                                                                                        },
                                                                                                      },
                                                                                                    },
                                                                                                  },
                                                                                                },
                                                                                              },
                                                                                            },
                                                                                          },
                                                                                        },
                                                                                      },
                                                                                    },
                                                                                  },
                                                                                },
                                                                              },
                                                                            },
                                                                          },
                                                                        },
                                                                        "primaryExpression": Object {
                                                                          "simpleValue": Object {
                                                                            "Identifier": Object {
                                                                              "TOKEN": "Identifier",
                                                                              "content": "a",
                                                                            },
                                                                          },
                                                                        },
                                                                      },
                                                                    },
                                                                  },
                                                                },
                                                              },
                                                            },
                                                          },
                                                        },
                                                      },
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses expression (sizeof type) 1`] = `
Object {
  "ternaryExpression": Object {
    "booleanOrExpression": Object {
      "booleanAndExpression": Object {
        "binaryOrExpression": Object {
          "binaryXorExpression": Object {
            "binaryAndExpression": Object {
              "equalityExpression": Object {
                "relationalExpression": Object {
                  "shiftExpression": Object {
                    "additiveExpression": Object {
                      "multiplicativeExpression": Object {
                        "castExpression": Object {
                          "prefixExpression": Object {
                            "postfixExpression": Object {
                              "callExpression": Object {
                                "memberExpression": Object {
                                  "primaryExpression": Object {
                                    "ParenthesisClose": Object {
                                      "TOKEN": "ParenthesisClose",
                                      "content": ")",
                                    },
                                    "ParenthesisOpen": Object {
                                      "TOKEN": "ParenthesisOpen",
                                      "content": "(",
                                    },
                                    "Sizeof": Object {
                                      "TOKEN": "Sizeof",
                                      "content": "sizeof",
                                    },
                                    "expressionOrTypeName": Object {
                                      "assignmentExpression": Object {
                                        "ternaryExpression": Object {
                                          "booleanOrExpression": Object {
                                            "booleanAndExpression": Object {
                                              "binaryOrExpression": Object {
                                                "binaryXorExpression": Object {
                                                  "binaryAndExpression": Object {
                                                    "equalityExpression": Object {
                                                      "relationalExpression": Object {
                                                        "shiftExpression": Object {
                                                          "additiveExpression": Object {
                                                            "multiplicativeExpression": Object {
                                                              "castExpression": Object {
                                                                "prefixExpression": Object {
                                                                  "postfixExpression": Object {
                                                                    "callExpression": Object {
                                                                      "memberExpression": Object {
                                                                        "primaryExpression": Object {
                                                                          "simpleValue": Object {
                                                                            "Identifier": Object {
                                                                              "TOKEN": "Identifier",
                                                                              "content": "int",
                                                                            },
                                                                          },
                                                                        },
                                                                      },
                                                                    },
                                                                  },
                                                                },
                                                              },
                                                            },
                                                          },
                                                        },
                                                      },
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses expression (string) 1`] = `
Object {
  "ternaryExpression": Object {
    "booleanOrExpression": Object {
      "booleanAndExpression": Object {
        "binaryOrExpression": Object {
          "binaryXorExpression": Object {
            "binaryAndExpression": Object {
              "equalityExpression": Object {
                "relationalExpression": Object {
                  "shiftExpression": Object {
                    "additiveExpression": Object {
                      "multiplicativeExpression": Object {
                        "castExpression": Object {
                          "prefixExpression": Object {
                            "postfixExpression": Object {
                              "callExpression": Object {
                                "memberExpression": Object {
                                  "primaryExpression": Object {
                                    "simpleValue": Object {
                                      "StringLiteral": Object {
                                        "TOKEN": "StringLiteral",
                                        "content": "'a'",
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses expression (ternary) 1`] = `
Object {
  "ternaryExpression": Object {
    "Colon": Object {
      "TOKEN": "Colon",
      "content": ":",
    },
    "Question": Object {
      "TOKEN": "Question",
      "content": "?",
    },
    "assignmentExpression": Object {
      "ternaryExpression": Object {
        "booleanOrExpression": Object {
          "booleanAndExpression": Object {
            "binaryOrExpression": Object {
              "binaryXorExpression": Object {
                "binaryAndExpression": Object {
                  "equalityExpression": Object {
                    "relationalExpression": Object {
                      "shiftExpression": Object {
                        "additiveExpression": Object {
                          "multiplicativeExpression": Object {
                            "castExpression": Object {
                              "prefixExpression": Object {
                                "postfixExpression": Object {
                                  "callExpression": Object {
                                    "memberExpression": Object {
                                      "primaryExpression": Object {
                                        "simpleValue": Object {
                                          "number": Object {
                                            "NumberDecimalLiteral": Object {
                                              "TOKEN": "NumberDecimalLiteral",
                                              "content": "1",
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    "booleanOrExpression": Object {
      "booleanAndExpression": Object {
        "binaryOrExpression": Object {
          "binaryXorExpression": Object {
            "binaryAndExpression": Object {
              "equalityExpression": Object {
                "relationalExpression": Object {
                  "shiftExpression": Object {
                    "additiveExpression": Object {
                      "multiplicativeExpression": Object {
                        "castExpression": Object {
                          "prefixExpression": Object {
                            "postfixExpression": Object {
                              "callExpression": Object {
                                "memberExpression": Object {
                                  "primaryExpression": Object {
                                    "simpleValue": Object {
                                      "Identifier": Object {
                                        "TOKEN": "Identifier",
                                        "content": "a",
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    "ternaryExpression": Object {
      "booleanOrExpression": Object {
        "booleanAndExpression": Object {
          "binaryOrExpression": Object {
            "binaryXorExpression": Object {
              "binaryAndExpression": Object {
                "equalityExpression": Object {
                  "relationalExpression": Object {
                    "shiftExpression": Object {
                      "additiveExpression": Object {
                        "multiplicativeExpression": Object {
                          "castExpression": Object {
                            "prefixExpression": Object {
                              "postfixExpression": Object {
                                "callExpression": Object {
                                  "memberExpression": Object {
                                    "primaryExpression": Object {
                                      "simpleValue": Object {
                                        "number": Object {
                                          "NumberDecimalLiteral": Object {
                                            "TOKEN": "NumberDecimalLiteral",
                                            "content": "0",
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses statement (annotated anonymous variable with bitfield) 1`] = `
Object {
  "localVariableDeclarationStatement": Object {
    "SemiColon": Object {
      "TOKEN": "SemiColon",
      "content": ";",
    },
    "annotations": Object {
      "Greater": Object {
        "TOKEN": "Greater",
        "content": ">",
      },
      "Less": Object {
        "TOKEN": "Less",
        "content": "<",
      },
      "annotation": Object {
        "Equals": Object {
          "TOKEN": "Equals",
          "content": "=",
        },
        "Identifier": Object {
          "TOKEN": "Identifier",
          "content": "format",
        },
        "simpleValue": Object {
          "Identifier": Object {
            "TOKEN": "Identifier",
            "content": "hex",
          },
        },
      },
    },
    "bitfieldRest": Object {
      "Colon": Object {
        "TOKEN": "Colon",
        "content": ":",
      },
      "additiveExpression": Object {
        "multiplicativeExpression": Object {
          "castExpression": Object {
            "prefixExpression": Object {
              "postfixExpression": Object {
                "callExpression": Object {
                  "memberExpression": Object {
                    "primaryExpression": Object {
                      "simpleValue": Object {
                        "number": Object {
                          "NumberDecimalLiteral": Object {
                            "TOKEN": "NumberDecimalLiteral",
                            "content": "3",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    "typeName": Object {
      "typeNameWithoutVoid": Object {
        "Identifier": Object {
          "TOKEN": "Identifier",
          "content": "int",
        },
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses statement (annotated variable definition) 1`] = `
Object {
  "localVariableDeclarationStatement": Object {
    "SemiColon": Object {
      "TOKEN": "SemiColon",
      "content": ";",
    },
    "typeName": Object {
      "typeNameWithoutVoid": Object {
        "Identifier": Object {
          "TOKEN": "Identifier",
          "content": "int",
        },
      },
    },
    "variableDeclarators": Object {
      "variableDeclarator": Object {
        "Identifier": Object {
          "TOKEN": "Identifier",
          "content": "a",
        },
        "variableDeclaratorRest": Object {
          "annotations": Object {
            "Greater": Object {
              "TOKEN": "Greater",
              "content": ">",
            },
            "Less": Object {
              "TOKEN": "Less",
              "content": "<",
            },
            "annotation": Object {
              "Equals": Object {
                "TOKEN": "Equals",
                "content": "=",
              },
              "Identifier": Object {
                "TOKEN": "Identifier",
                "content": "format",
              },
              "simpleValue": Object {
                "Identifier": Object {
                  "TOKEN": "Identifier",
                  "content": "hex",
                },
              },
            },
          },
        },
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses statement (anonymous variable with bitfield) 1`] = `
Object {
  "localVariableDeclarationStatement": Object {
    "SemiColon": Object {
      "TOKEN": "SemiColon",
      "content": ";",
    },
    "bitfieldRest": Object {
      "Colon": Object {
        "TOKEN": "Colon",
        "content": ":",
      },
      "additiveExpression": Object {
        "multiplicativeExpression": Object {
          "castExpression": Object {
            "prefixExpression": Object {
              "postfixExpression": Object {
                "callExpression": Object {
                  "memberExpression": Object {
                    "primaryExpression": Object {
                      "simpleValue": Object {
                        "number": Object {
                          "NumberDecimalLiteral": Object {
                            "TOKEN": "NumberDecimalLiteral",
                            "content": "3",
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
    "typeName": Object {
      "typeNameWithoutVoid": Object {
        "Identifier": Object {
          "TOKEN": "Identifier",
          "content": "int",
        },
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses statement (array variable definition with initializer) 1`] = `
Object {
  "localVariableDeclarationStatement": Object {
    "SemiColon": Object {
      "TOKEN": "SemiColon",
      "content": ";",
    },
    "typeName": Object {
      "typeNameWithoutVoid": Object {
        "Identifier": Object {
          "TOKEN": "Identifier",
          "content": "int",
        },
        "emptyArraySelector": Object {
          "BracketClose": Object {
            "TOKEN": "BracketClose",
            "content": "]",
          },
          "BracketOpen": Object {
            "TOKEN": "BracketOpen",
            "content": "[",
          },
        },
      },
    },
    "variableDeclarators": Object {
      "variableDeclarator": Object {
        "Identifier": Object {
          "TOKEN": "Identifier",
          "content": "a",
        },
        "variableDeclaratorRest": Object {
          "Equals": Object {
            "TOKEN": "Equals",
            "content": "=",
          },
          "variableInitializer": Object {
            "arrayInitializer": Object {
              "Comma": Object {
                "TOKEN": "Comma",
                "content": ",",
              },
              "CurlyBraceClose": Object {
                "TOKEN": "CurlyBraceClose",
                "content": "}",
              },
              "CurlyBraceOpen": Object {
                "TOKEN": "CurlyBraceOpen",
                "content": "{",
              },
              "assignmentExpression": Array [
                Object {
                  "ternaryExpression": Object {
                    "booleanOrExpression": Object {
                      "booleanAndExpression": Object {
                        "binaryOrExpression": Object {
                          "binaryXorExpression": Object {
                            "binaryAndExpression": Object {
                              "equalityExpression": Object {
                                "relationalExpression": Object {
                                  "shiftExpression": Object {
                                    "additiveExpression": Object {
                                      "multiplicativeExpression": Object {
                                        "castExpression": Object {
                                          "prefixExpression": Object {
                                            "postfixExpression": Object {
                                              "callExpression": Object {
                                                "memberExpression": Object {
                                                  "primaryExpression": Object {
                                                    "simpleValue": Object {
                                                      "number": Object {
                                                        "NumberDecimalLiteral": Object {
                                                          "TOKEN": "NumberDecimalLiteral",
                                                          "content": "1",
                                                        },
                                                      },
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
                Object {
                  "ternaryExpression": Object {
                    "booleanOrExpression": Object {
                      "booleanAndExpression": Object {
                        "binaryOrExpression": Object {
                          "binaryXorExpression": Object {
                            "binaryAndExpression": Object {
                              "equalityExpression": Object {
                                "relationalExpression": Object {
                                  "shiftExpression": Object {
                                    "additiveExpression": Object {
                                      "multiplicativeExpression": Object {
                                        "castExpression": Object {
                                          "prefixExpression": Object {
                                            "postfixExpression": Object {
                                              "callExpression": Object {
                                                "memberExpression": Object {
                                                  "primaryExpression": Object {
                                                    "simpleValue": Object {
                                                      "number": Object {
                                                        "NumberDecimalLiteral": Object {
                                                          "TOKEN": "NumberDecimalLiteral",
                                                          "content": "2",
                                                        },
                                                      },
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              ],
            },
          },
        },
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses statement (array variable definition) 1`] = `
Object {
  "localVariableDeclarationStatement": Object {
    "SemiColon": Object {
      "TOKEN": "SemiColon",
      "content": ";",
    },
    "typeName": Object {
      "typeNameWithoutVoid": Object {
        "Identifier": Object {
          "TOKEN": "Identifier",
          "content": "int",
        },
        "emptyArraySelector": Object {
          "BracketClose": Object {
            "TOKEN": "BracketClose",
            "content": "]",
          },
          "BracketOpen": Object {
            "TOKEN": "BracketOpen",
            "content": "[",
          },
        },
      },
    },
    "variableDeclarators": Object {
      "variableDeclarator": Object {
        "Identifier": Object {
          "TOKEN": "Identifier",
          "content": "a",
        },
        "variableDeclaratorRest": Object {},
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses statement (const variable definition) 1`] = `
Object {
  "localVariableDeclarationStatement": Object {
    "SemiColon": Object {
      "TOKEN": "SemiColon",
      "content": ";",
    },
    "typeName": Object {
      "typeNameWithoutVoid": Object {
        "Identifier": Object {
          "TOKEN": "Identifier",
          "content": "int",
        },
      },
    },
    "variableDeclarators": Object {
      "variableDeclarator": Object {
        "Identifier": Object {
          "TOKEN": "Identifier",
          "content": "a",
        },
        "variableDeclaratorRest": Object {},
      },
    },
    "variableModifier": Object {
      "Const": Object {
        "TOKEN": "Const",
        "content": "const",
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses statement (local variable definition) 1`] = `
Object {
  "localVariableDeclarationStatement": Object {
    "SemiColon": Object {
      "TOKEN": "SemiColon",
      "content": ";",
    },
    "typeName": Object {
      "typeNameWithoutVoid": Object {
        "Identifier": Object {
          "TOKEN": "Identifier",
          "content": "int",
        },
      },
    },
    "variableDeclarators": Object {
      "variableDeclarator": Object {
        "Identifier": Object {
          "TOKEN": "Identifier",
          "content": "a",
        },
        "variableDeclaratorRest": Object {},
      },
    },
    "variableModifier": Object {
      "Local": Object {
        "TOKEN": "Local",
        "content": "local",
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses statement (several variable definitions) 1`] = `
Object {
  "localVariableDeclarationStatement": Object {
    "SemiColon": Object {
      "TOKEN": "SemiColon",
      "content": ";",
    },
    "typeName": Object {
      "typeNameWithoutVoid": Object {
        "Identifier": Object {
          "TOKEN": "Identifier",
          "content": "int",
        },
      },
    },
    "variableDeclarators": Object {
      "Comma": Object {
        "TOKEN": "Comma",
        "content": ",",
      },
      "variableDeclarator": Array [
        Object {
          "Identifier": Object {
            "TOKEN": "Identifier",
            "content": "a",
          },
          "variableDeclaratorRest": Object {},
        },
        Object {
          "Identifier": Object {
            "TOKEN": "Identifier",
            "content": "b",
          },
          "variableDeclaratorRest": Object {},
        },
      ],
    },
  },
}
`;

exports[`Sweetscape Parser parses statement (variable definition with initializer) 1`] = `
Object {
  "localVariableDeclarationStatement": Object {
    "SemiColon": Object {
      "TOKEN": "SemiColon",
      "content": ";",
    },
    "typeName": Object {
      "typeNameWithoutVoid": Object {
        "Identifier": Object {
          "TOKEN": "Identifier",
          "content": "int",
        },
      },
    },
    "variableDeclarators": Object {
      "variableDeclarator": Object {
        "Identifier": Object {
          "TOKEN": "Identifier",
          "content": "a",
        },
        "variableDeclaratorRest": Object {
          "Equals": Object {
            "TOKEN": "Equals",
            "content": "=",
          },
          "variableInitializer": Object {
            "assignmentExpression": Object {
              "ternaryExpression": Object {
                "booleanOrExpression": Object {
                  "booleanAndExpression": Object {
                    "binaryOrExpression": Object {
                      "binaryXorExpression": Object {
                        "binaryAndExpression": Object {
                          "equalityExpression": Object {
                            "relationalExpression": Object {
                              "shiftExpression": Object {
                                "additiveExpression": Object {
                                  "multiplicativeExpression": Object {
                                    "castExpression": Object {
                                      "prefixExpression": Object {
                                        "postfixExpression": Object {
                                          "callExpression": Object {
                                            "memberExpression": Object {
                                              "primaryExpression": Object {
                                                "simpleValue": Object {
                                                  "number": Object {
                                                    "NumberDecimalLiteral": Object {
                                                      "TOKEN": "NumberDecimalLiteral",
                                                      "content": "1",
                                                    },
                                                  },
                                                },
                                              },
                                            },
                                          },
                                        },
                                      },
                                    },
                                  },
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses statement (variable definition) 1`] = `
Object {
  "localVariableDeclarationStatement": Object {
    "SemiColon": Object {
      "TOKEN": "SemiColon",
      "content": ";",
    },
    "typeName": Object {
      "typeNameWithoutVoid": Object {
        "Identifier": Object {
          "TOKEN": "Identifier",
          "content": "int",
        },
      },
    },
    "variableDeclarators": Object {
      "variableDeclarator": Object {
        "Identifier": Object {
          "TOKEN": "Identifier",
          "content": "a",
        },
        "variableDeclaratorRest": Object {},
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses statement (variable with constant bitfield) 1`] = `
Object {
  "localVariableDeclarationStatement": Object {
    "SemiColon": Object {
      "TOKEN": "SemiColon",
      "content": ";",
    },
    "typeName": Object {
      "typeNameWithoutVoid": Object {
        "Identifier": Object {
          "TOKEN": "Identifier",
          "content": "int",
        },
      },
    },
    "variableDeclarators": Object {
      "variableDeclarator": Object {
        "Identifier": Object {
          "TOKEN": "Identifier",
          "content": "a",
        },
        "bitfieldRest": Object {
          "Colon": Object {
            "TOKEN": "Colon",
            "content": ":",
          },
          "additiveExpression": Object {
            "multiplicativeExpression": Object {
              "castExpression": Object {
                "prefixExpression": Object {
                  "postfixExpression": Object {
                    "callExpression": Object {
                      "memberExpression": Object {
                        "primaryExpression": Object {
                          "simpleValue": Object {
                            "number": Object {
                              "NumberDecimalLiteral": Object {
                                "TOKEN": "NumberDecimalLiteral",
                                "content": "3",
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
        "variableDeclaratorRest": Object {},
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses statement (variable with expression as bitfield) 1`] = `
Object {
  "localVariableDeclarationStatement": Object {
    "SemiColon": Object {
      "TOKEN": "SemiColon",
      "content": ";",
    },
    "typeName": Object {
      "typeNameWithoutVoid": Object {
        "Identifier": Object {
          "TOKEN": "Identifier",
          "content": "int",
        },
      },
    },
    "variableDeclarators": Object {
      "variableDeclarator": Object {
        "Identifier": Object {
          "TOKEN": "Identifier",
          "content": "a",
        },
        "bitfieldRest": Object {
          "Colon": Object {
            "TOKEN": "Colon",
            "content": ":",
          },
          "additiveExpression": Object {
            "multiplicativeExpression": Object {
              "castExpression": Array [
                Object {
                  "prefixExpression": Object {
                    "postfixExpression": Object {
                      "callExpression": Object {
                        "memberExpression": Object {
                          "primaryExpression": Object {
                            "simpleValue": Object {
                              "Identifier": Object {
                                "TOKEN": "Identifier",
                                "content": "NBits",
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
                Object {
                  "prefixExpression": Object {
                    "postfixExpression": Object {
                      "callExpression": Object {
                        "memberExpression": Object {
                          "primaryExpression": Object {
                            "simpleValue": Object {
                              "number": Object {
                                "NumberDecimalLiteral": Object {
                                  "TOKEN": "NumberDecimalLiteral",
                                  "content": "2",
                                },
                              },
                            },
                          },
                        },
                      },
                    },
                  },
                },
              ],
              "multiplicativeOperator": Object {
                "Division": Object {
                  "TOKEN": "Division",
                  "content": "/",
                },
              },
            },
          },
        },
        "variableDeclaratorRest": Object {},
      },
    },
  },
}
`;

exports[`Sweetscape Parser parses statement (variable with identifier as bitfield) 1`] = `
Object {
  "localVariableDeclarationStatement": Object {
    "SemiColon": Object {
      "TOKEN": "SemiColon",
      "content": ";",
    },
    "typeName": Object {
      "typeNameWithoutVoid": Object {
        "Identifier": Object {
          "TOKEN": "Identifier",
          "content": "int",
        },
      },
    },
    "variableDeclarators": Object {
      "variableDeclarator": Object {
        "Identifier": Object {
          "TOKEN": "Identifier",
          "content": "a",
        },
        "bitfieldRest": Object {
          "Colon": Object {
            "TOKEN": "Colon",
            "content": ":",
          },
          "additiveExpression": Object {
            "multiplicativeExpression": Object {
              "castExpression": Object {
                "prefixExpression": Object {
                  "postfixExpression": Object {
                    "callExpression": Object {
                      "memberExpression": Object {
                        "primaryExpression": Object {
                          "simpleValue": Object {
                            "Identifier": Object {
                              "TOKEN": "Identifier",
                              "content": "NBits",
                            },
                          },
                        },
                      },
                    },
                  },
                },
              },
            },
          },
        },
        "variableDeclaratorRest": Object {},
      },
    },
  },
}
`;
