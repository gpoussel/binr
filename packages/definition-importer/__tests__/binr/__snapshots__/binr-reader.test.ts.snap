// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`BinrDefinitionImporter accepts == and || 1`] = `
Definition {
  "_annotations": Array [],
  "_statements": Array [
    StructDeclarationStatement {
      "_annotations": Array [],
      "_body": BlockStatement {
        "_content": Array [
          VariableDeclarationStatement {
            "_annotations": Array [],
            "_bitfield": undefined,
            "_modifiers": Array [],
            "_variableDeclarations": Array [
              VariableDeclaration {
                "_annotations": Array [],
                "_arraySelector": ExpressionArraySelector {
                  "_innerExpression": BinaryExpression {
                    "_left": BinaryExpression {
                      "_left": BinaryExpression {
                        "_left": NumberValue {
                          "_value": 1,
                        },
                        "_operator": 8,
                        "_right": NumberValue {
                          "_value": 2,
                        },
                      },
                      "_operator": 5,
                      "_right": NumberValue {
                        "_value": 3,
                      },
                    },
                    "_operator": 8,
                    "_right": NumberValue {
                      "_value": 4,
                    },
                  },
                },
                "_bitfield": undefined,
                "_initializationExpression": undefined,
                "_name": "foo",
                "_typeArguments": Array [],
              },
            ],
            "_variableType": NamedType {
              "_array": false,
              "_modifiers": Array [],
              "_name": "int",
            },
          },
        ],
      },
      "_name": "a",
      "_parameters": Array [],
    },
  ],
}
`;

exports[`BinrDefinitionImporter accepts bitmasks 1`] = `
Definition {
  "_annotations": Array [],
  "_statements": Array [
    BitmaskDeclarationStatement {
      "_annotations": Array [],
      "_baseType": RestrictedType {
        "_baseType": NamedType {
          "_array": false,
          "_modifiers": Array [],
          "_name": "int",
        },
        "_size": 16,
      },
      "_declarations": Array [
        BitmaskDeclarationElement {
          "_expression": 10,
          "_name": "A",
        },
      ],
      "_name": "foo",
    },
    StructDeclarationStatement {
      "_annotations": Array [],
      "_body": BlockStatement {
        "_content": Array [],
      },
      "_name": "A",
      "_parameters": Array [],
    },
  ],
}
`;

exports[`BinrDefinitionImporter accepts enumerations 1`] = `
Definition {
  "_annotations": Array [],
  "_statements": Array [
    EnumDeclarationStatement {
      "_annotations": Array [],
      "_baseType": RestrictedType {
        "_baseType": NamedType {
          "_array": false,
          "_modifiers": Array [],
          "_name": "int",
        },
        "_size": 16,
      },
      "_declarations": Array [
        EnumDeclarationElement {
          "_expression": 10,
          "_name": "A",
        },
      ],
      "_name": "foo",
    },
    StructDeclarationStatement {
      "_annotations": Array [],
      "_body": BlockStatement {
        "_content": Array [],
      },
      "_name": "A",
      "_parameters": Array [],
    },
  ],
}
`;

exports[`BinrDefinitionImporter accepts field annotations 1`] = `
Definition {
  "_annotations": Array [],
  "_statements": Array [
    StructDeclarationStatement {
      "_annotations": Array [],
      "_body": BlockStatement {
        "_content": Array [
          VariableDeclarationStatement {
            "_annotations": Array [
              Annotation {
                "_key": "ignore",
                "_value": BooleanValue {
                  "_value": false,
                },
              },
            ],
            "_bitfield": undefined,
            "_modifiers": Array [],
            "_variableDeclarations": Array [
              VariableDeclaration {
                "_annotations": Array [],
                "_arraySelector": undefined,
                "_bitfield": undefined,
                "_initializationExpression": undefined,
                "_name": "b",
                "_typeArguments": Array [],
              },
            ],
            "_variableType": NamedType {
              "_array": false,
              "_modifiers": Array [],
              "_name": "int",
            },
          },
          VariableDeclarationStatement {
            "_annotations": Array [
              Annotation {
                "_key": "ignore",
                "_value": BooleanValue {
                  "_value": true,
                },
              },
            ],
            "_bitfield": undefined,
            "_modifiers": Array [],
            "_variableDeclarations": Array [
              VariableDeclaration {
                "_annotations": Array [],
                "_arraySelector": undefined,
                "_bitfield": undefined,
                "_initializationExpression": undefined,
                "_name": "c",
                "_typeArguments": Array [],
              },
            ],
            "_variableType": NamedType {
              "_array": false,
              "_modifiers": Array [],
              "_name": "int",
            },
          },
        ],
      },
      "_name": "a",
      "_parameters": Array [],
    },
  ],
}
`;

exports[`BinrDefinitionImporter accepts minimal input (#set "foo"
struct a {}) 1`] = `
Definition {
  "_annotations": Array [],
  "_statements": Array [
    StructDeclarationStatement {
      "_annotations": Array [],
      "_body": BlockStatement {
        "_content": Array [],
      },
      "_name": "a",
      "_parameters": Array [],
    },
  ],
}
`;

exports[`BinrDefinitionImporter accepts minimal input (#set 32
struct b {}) 1`] = `
Definition {
  "_annotations": Array [],
  "_statements": Array [
    StructDeclarationStatement {
      "_annotations": Array [],
      "_body": BlockStatement {
        "_content": Array [],
      },
      "_name": "b",
      "_parameters": Array [],
    },
  ],
}
`;

exports[`BinrDefinitionImporter accepts minimal input (struct a {}) 1`] = `
Definition {
  "_annotations": Array [],
  "_statements": Array [
    StructDeclarationStatement {
      "_annotations": Array [],
      "_body": BlockStatement {
        "_content": Array [],
      },
      "_name": "a",
      "_parameters": Array [],
    },
  ],
}
`;
